<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Shenlong616</title>
    <link>https://shenlong616.github.io/categories/python/</link>
    <description>Recent content in Python on Shenlong616</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 17 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shenlong616.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Awesome Python</title>
      <link>https://shenlong616.github.io/posts/github/vinta/awesome-python/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/vinta/awesome-python/</guid>
      <description>A curated list of awesome Python frameworks, libraries, software and resources</description>
      <content:encoded><![CDATA[<p>Inspired by <a href="https://github.com/ziadoz/awesome-php">awesome-php</a>.</p>
<hr>
<h2 id="admin-panels">Admin Panels</h2>
<p><em>Libraries for administrative interfaces.</em></p>
<ul>
<li><a href="https://github.com/ajenti/ajenti">ajenti</a> - The admin panel your servers deserve.</li>
<li><a href="https://grappelliproject.com/">django-grappelli</a> - A jazzy skin for the Django Admin-Interface.</li>
<li><a href="https://github.com/geex-arts/django-jet">django-jet</a> - Modern responsive template for the Django admin interface with improved functionality.</li>
<li><a href="https://djangosuit.com/">django-suit</a> - Alternative Django Admin-Interface (free only for Non-commercial use).</li>
<li><a href="https://github.com/sshwsfc/xadmin">django-xadmin</a> - Drop-in replacement of Django admin comes with lots of goodies.</li>
<li><a href="https://github.com/flask-admin/flask-admin">flask-admin</a> - Simple and extensible administrative interface framework for Flask.</li>
<li><a href="https://github.com/mher/flower">flower</a> - Real-time monitor and web admin for Celery.</li>
<li><a href="https://github.com/jet-admin/jet-bridge">jet-bridge</a> - Admin panel framework for any application with nice UI (ex Jet Django).</li>
<li><a href="https://github.com/wooey/wooey">wooey</a> - A Django app which creates automatic web UIs for Python scripts.</li>
</ul>
<h2 id="algorithms-and-design-patterns">Algorithms and Design Patterns</h2>
<p><em>Python implementation of data structures, algorithms and design patterns. Also see <a href="https://github.com/tayllan/awesome-algorithms">awesome-algorithms</a>.</em></p>
<ul>
<li>Algorithms
<ul>
<li><a href="https://github.com/keon/algorithms">algorithms</a> - Minimal examples of data structures and algorithms.</li>
<li><a href="https://github.com/prabhupant/python-ds">python-ds</a> - A collection of data structure and algorithms for coding interviews.</li>
<li><a href="https://github.com/grantjenks/python-sortedcontainers">sortedcontainers</a> - Fast and pure-Python implementation of sorted collections.</li>
<li><a href="https://github.com/TheAlgorithms/Python">TheAlgorithms</a> - All Algorithms implemented in Python.</li>
</ul>
</li>
<li>Design Patterns
<ul>
<li><a href="https://github.com/tylerlaberge/PyPattyrn">PyPattyrn</a> - A simple yet effective library for implementing common design patterns.</li>
<li><a href="https://github.com/faif/python-patterns">python-patterns</a> - A collection of design patterns in Python.</li>
<li><a href="https://github.com/pytransitions/transitions">transitions</a> - A lightweight, object-oriented finite state machine implementation.</li>
</ul>
</li>
</ul>
<h2 id="asgi-servers">ASGI Servers</h2>
<p><em><a href="https://asgi.readthedocs.io/en/latest/">ASGI</a>-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/django/daphne">daphne</a> - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP.</li>
<li><a href="https://github.com/encode/uvicorn">uvicorn</a> - A lightning-fast ASGI server implementation, using uvloop and httptools.</li>
</ul>
<h2 id="asynchronous-programming">Asynchronous Programming</h2>
<ul>
<li><a href="https://docs.python.org/3/library/asyncio.html">asyncio</a> - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.
<ul>
<li><a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a></li>
</ul>
</li>
<li><a href="https://github.com/python-trio/trio">trio</a> - A friendly library for async concurrency and I/O.</li>
<li><a href="https://twistedmatrix.com/trac/">Twisted</a> - An event-driven networking engine.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast asyncio event loop.</li>
</ul>
<h2 id="audio">Audio</h2>
<p><em>Libraries for manipulating audio and its metadata.</em></p>
<ul>
<li>Audio
<ul>
<li><a href="https://github.com/beetbox/audioread">audioread</a> - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li>
<li><a href="https://github.com/worldveil/dejavu">dejavu</a> - Audio fingerprinting and recognition.</li>
<li><a href="https://github.com/keunwoochoi/kapre">kapre</a> - Keras Audio Preprocessors.</li>
<li><a href="https://github.com/librosa/librosa">librosa</a> - Python library for audio and music analysis.</li>
<li><a href="https://github.com/sergree/matchering">matchering</a> - A library for automated reference audio mastering.</li>
<li><a href="http://bspaans.github.io/python-mingus/">mingus</a> - An advanced music theory and notation package with MIDI file and playback support.</li>
<li><a href="https://github.com/tyiannak/pyAudioAnalysis">pyAudioAnalysis</a> - Audio feature extraction, classification, segmentation and applications.</li>
<li><a href="https://github.com/jiaaro/pydub">pydub</a> - Manipulate audio with a simple and easy high level interface.</li>
<li><a href="https://github.com/Parisson/TimeSide">TimeSide</a> - Open web audio processing framework.</li>
</ul>
</li>
<li>Metadata
<ul>
<li><a href="https://github.com/beetbox/beets">beets</a> - A music library manager and <a href="https://musicbrainz.org/">MusicBrainz</a> tagger.</li>
<li><a href="https://github.com/nicfit/eyeD3">eyeD3</a> - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li>
<li><a href="https://github.com/quodlibet/mutagen">mutagen</a> - A Python module to handle audio metadata.</li>
<li><a href="https://github.com/devsnd/tinytag">tinytag</a> - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li>
</ul>
</li>
</ul>
<h2 id="authentication">Authentication</h2>
<p><em>Libraries for implementing authentications schemes.</em></p>
<ul>
<li>OAuth
<ul>
<li><a href="https://github.com/lepture/authlib">authlib</a> - JavaScript Object Signing and Encryption draft implementation.</li>
<li><a href="https://github.com/pennersr/django-allauth">django-allauth</a> - Authentication app for Django that &ldquo;just works.&rdquo;</li>
<li><a href="https://github.com/evonove/django-oauth-toolkit">django-oauth-toolkit</a> - OAuth 2 goodies for Django.</li>
<li><a href="https://github.com/idan/oauthlib">oauthlib</a> - A generic and thorough implementation of the OAuth request-signing logic.</li>
<li><a href="https://github.com/joestump/python-oauth2">python-oauth2</a> - A fully tested, abstract interface to creating OAuth clients and servers.</li>
<li><a href="https://github.com/omab/python-social-auth">python-social-auth</a> - An easy-to-setup social authentication mechanism.</li>
</ul>
</li>
<li>JWT
<ul>
<li><a href="https://github.com/jpadilla/pyjwt">pyjwt</a> - JSON Web Token implementation in Python.</li>
<li><a href="https://github.com/mpdavis/python-jose/">python-jose</a> - A JOSE implementation in Python.</li>
<li><a href="https://github.com/davedoesdev/python-jwt">python-jwt</a> - A module for generating and verifying JSON Web Tokens.</li>
</ul>
</li>
</ul>
<h2 id="build-tools">Build Tools</h2>
<p><em>Compile software from source code.</em></p>
<ul>
<li><a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">BitBake</a> - A make-like build tool for embedded Linux.</li>
<li><a href="http://www.buildout.org/en/latest/">buildout</a> - A build system for creating, assembling and deploying applications from multiple parts.</li>
<li><a href="https://github.com/platformio/platformio-core">PlatformIO</a> - A console tool to build code with different development platforms.</li>
<li><a href="https://github.com/pybuilder/pybuilder">pybuilder</a> - A continuous build tool written in pure Python.</li>
<li><a href="http://www.scons.org/">SCons</a> - A software construction tool.</li>
</ul>
<h2 id="built-in-classes-enhancement">Built-in Classes Enhancement</h2>
<p><em>Libraries for enhancing Python built-in classes.</em></p>
<ul>
<li><a href="https://github.com/python-attrs/attrs">attrs</a> - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li>
<li><a href="https://github.com/jab/bidict">bidict</a> - Efficient, Pythonic bidirectional map data structures and related functionality..</li>
<li><a href="https://github.com/cdgriffith/Box">Box</a> - Python dictionaries with advanced dot notation access.</li>
<li><a href="https://docs.python.org/3/library/dataclasses.html">dataclasses</a> - (Python standard library) Data classes.</li>
<li><a href="https://github.com/carlosescri/DottedDict">DottedDict</a> - A library that provides a method of accessing lists and dicts with a dotted path notation.</li>
</ul>
<h2 id="cms">CMS</h2>
<p><em>Content Management Systems.</em></p>
<ul>
<li><a href="https://www.django-cms.org/en/">django-cms</a> - An Open source enterprise CMS based on the Django.</li>
<li><a href="https://github.com/feincms/feincms">feincms</a> - One of the most advanced Content Management Systems built on Django.</li>
<li><a href="https://github.com/indico/indico">indico</a> - A feature-rich event management system, made @ <a href="https://en.wikipedia.org/wiki/CERN">CERN</a>.</li>
<li><a href="https://github.com/Kotti/Kotti">Kotti</a> - A high-level, Pythonic web application framework built on Pyramid.</li>
<li><a href="https://github.com/stephenmcd/mezzanine">mezzanine</a> - A powerful, consistent, and flexible content management platform.</li>
<li><a href="https://plone.org/">plone</a> - A CMS built on top of the open source application server Zope.</li>
<li><a href="https://github.com/rochacbruno/quokka">quokka</a> - Flexible, extensible, small CMS powered by Flask and MongoDB.</li>
<li><a href="https://wagtail.io/">wagtail</a> - A Django content management system.</li>
</ul>
<h2 id="caching">Caching</h2>
<p><em>Libraries for caching data.</em></p>
<ul>
<li><a href="https://github.com/bbangert/beaker">beaker</a> - A WSGI middleware for sessions and caching.</li>
<li><a href="https://github.com/django-cache-machine/django-cache-machine">django-cache-machine</a> - Automatic caching and invalidation for Django models.</li>
<li><a href="https://github.com/Suor/django-cacheops">django-cacheops</a> - A slick ORM cache with automatic granular event-driven invalidation.</li>
<li><a href="http://dogpilecache.readthedocs.io/en/latest/">dogpile.cache</a> - dogpile.cache is next generation replacement for Beaker made by same authors.</li>
<li><a href="https://pypi.org/project/HermesCache/">HermesCache</a> - Python caching library with tag-based invalidation and dogpile effect prevention.</li>
<li><a href="https://github.com/lericson/pylibmc">pylibmc</a> - A Python wrapper around the <a href="https://libmemcached.org/libMemcached.html">libmemcached</a> interface.</li>
<li><a href="http://www.grantjenks.com/docs/diskcache/">python-diskcache</a> - SQLite and file backed cache backend with faster lookups than memcached and redis.</li>
</ul>
<h2 id="chatops-tools">ChatOps Tools</h2>
<p><em>Libraries for chatbot development.</em></p>
<ul>
<li><a href="https://github.com/errbotio/errbot/">errbot</a> - The easiest and most popular chatbot to implement ChatOps.</li>
</ul>
<h2 id="code-analysis">Code Analysis</h2>
<p><em>Tools of static analysis, linters and code quality checkers. Also see <a href="https://github.com/mre/awesome-static-analysis">awesome-static-analysis</a>.</em></p>
<ul>
<li>Code Analysis
<ul>
<li><a href="https://github.com/coala/coala/">coala</a> - Language independent and easily extendable code analysis application.</li>
<li><a href="https://github.com/scottrogowski/code2flow">code2flow</a> - Turn your Python and JavaScript code into DOT flowcharts.</li>
<li><a href="https://github.com/PyCQA/prospector">prospector</a> - A tool to analyse Python code.</li>
<li><a href="https://github.com/gak/pycallgraph">pycallgraph</a> - A library that visualises the flow (call graph) of your Python application.</li>
<li><a href="https://github.com/jendrikseipp/vulture">vulture</a> - A tool for finding and analysing dead Python code.</li>
</ul>
</li>
<li>Code Linters
<ul>
<li><a href="https://pypi.org/project/flake8/">flake8</a> - A wrapper around <code>pycodestyle</code>, <code>pyflakes</code> and McCabe.
<ul>
<li><a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions">awesome-flake8-extensions</a></li>
</ul>
</li>
<li><a href="https://github.com/klen/pylama">pylama</a> - A code audit tool for Python and JavaScript.</li>
<li><a href="https://www.pylint.org/">pylint</a> - A fully customizable source code analyzer.</li>
<li><a href="https://github.com/wemake-services/wemake-python-styleguide">wemake-python-styleguide</a> - The strictest and most opinionated python linter ever.</li>
</ul>
</li>
<li>Code Formatters
<ul>
<li><a href="https://github.com/python/black">black</a> - The uncompromising Python code formatter.</li>
<li><a href="https://github.com/timothycrosley/isort">isort</a> - A Python utility / library to sort imports.</li>
<li><a href="https://github.com/google/yapf">yapf</a> - Yet another Python code formatter from Google.</li>
</ul>
</li>
<li>Static Type Checkers, also see <a href="https://github.com/typeddjango/awesome-python-typing">awesome-python-typing</a>
<ul>
<li><a href="http://mypy-lang.org/">mypy</a> - Check variable types during compile time.</li>
<li><a href="https://github.com/facebook/pyre-check">pyre-check</a> - Performant type checking.</li>
<li><a href="https://github.com/python/typeshed">typeshed</a> - Collection of library stubs for Python, with static types.</li>
</ul>
</li>
<li>Static Type Annotations Generators
<ul>
<li><a href="https://github.com/Instagram/MonkeyType">MonkeyType</a> - A system for Python that generates static type annotations by collecting runtime types.</li>
<li><a href="https://github.com/dropbox/pyannotate">pyannotate</a> - Auto-generate PEP-484 annotations.</li>
<li><a href="https://github.com/google/pytype">pytype</a> - Pytype checks and infers types for Python code - without requiring type annotations.</li>
</ul>
</li>
</ul>
<h2 id="command-line-interface-development">Command-line Interface Development</h2>
<p><em>Libraries for building command-line applications.</em></p>
<ul>
<li>Command-line Application Development
<ul>
<li><a href="http://builtoncement.com/">cement</a> - CLI Application Framework for Python.</li>
<li><a href="http://click.pocoo.org/dev/">click</a> - A package for creating beautiful command line interfaces in a composable way.</li>
<li><a href="https://docs.openstack.org/developer/cliff/">cliff</a> - A framework for creating command-line programs with multi-level commands.</li>
<li><a href="http://docopt.org/">docopt</a> - Pythonic command line arguments parser.</li>
<li><a href="https://github.com/google/python-fire">python-fire</a> - A library for creating command line interfaces from absolutely any Python object.</li>
<li><a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> - A library for building powerful interactive command lines.</li>
</ul>
</li>
<li>Terminal Rendering
<ul>
<li><a href="https://github.com/rsalmei/alive-progress">alive-progress</a> - A new kind of Progress Bar, with real-time throughput, eta and very cool animations.</li>
<li><a href="https://github.com/peterbrittain/asciimatics">asciimatics</a> - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li>
<li><a href="https://github.com/glamp/bashplotlib">bashplotlib</a> - Making basic plots in the terminal.</li>
<li><a href="https://pypi.org/project/colorama/">colorama</a> - Cross-platform colored terminal text.</li>
<li><a href="https://github.com/willmcgugan/rich">rich</a> - Python library for rich text and beautiful formatting in the terminal. Also provides a great <code>RichHandler</code> log handler.</li>
<li><a href="https://github.com/tqdm/tqdm">tqdm</a> - Fast, extensible progress bar for loops and CLI.</li>
</ul>
</li>
</ul>
<h2 id="command-line-tools">Command-line Tools</h2>
<p><em>Useful CLI-based tools for productivity.</em></p>
<ul>
<li>Productivity Tools
<ul>
<li><a href="https://github.com/pykong/copier">copier</a> - A library and command-line utility for rendering projects templates.</li>
<li><a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> - A command-line utility that creates projects from cookiecutters (project templates).</li>
<li><a href="https://github.com/sloria/doitlive">doitlive</a> - A tool for live presentations in the terminal.</li>
<li><a href="https://github.com/gleitz/howdoi">howdoi</a> - Instant coding answers via the command line.</li>
<li><a href="https://github.com/pyinvoke/invoke#readme">Invoke</a> - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks.</li>
<li><a href="https://github.com/facebook/PathPicker">PathPicker</a> - Select files out of bash output.</li>
<li><a href="https://github.com/mooz/percol">percol</a> - Adds flavor of interactive selection to the traditional pipe concept on UNIX.</li>
<li><a href="https://github.com/nvbn/thefuck">thefuck</a> - Correcting your previous console command.</li>
<li><a href="https://github.com/tony/tmuxp">tmuxp</a> - A <a href="https://github.com/tmux/tmux">tmux</a> session manager.</li>
<li><a href="https://github.com/timofurrer/try">try</a> - A dead simple CLI to try out python packages - it&rsquo;s never been easier.</li>
</ul>
</li>
<li>CLI Enhancements
<ul>
<li><a href="https://github.com/jakubroztocil/httpie">httpie</a> - A command line HTTP client, a user-friendly cURL replacement.</li>
<li><a href="https://github.com/laixintao/iredis">iredis</a> - Redis CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/cloudnativelabs/kube-shell">kube-shell</a> - An integrated shell for working with the Kubernetes CLI.</li>
<li><a href="https://github.com/dbcli/litecli">litecli</a> - SQLite CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/mycli">mycli</a> - MySQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/dbcli/pgcli">pgcli</a> - PostgreSQL CLI with autocompletion and syntax highlighting.</li>
<li><a href="https://github.com/donnemartin/saws">saws</a> - A Supercharged <a href="https://github.com/aws/aws-cli">aws-cli</a>.</li>
</ul>
</li>
</ul>
<h2 id="compatibility">Compatibility</h2>
<p><em>Libraries for migrating from Python 2 to 3.</em></p>
<ul>
<li><a href="http://python-future.org/index.html">python-future</a> - The missing compatibility layer between Python 2 and Python 3.</li>
<li><a href="https://github.com/PyCQA/modernize">modernize</a> - Modernizes Python code for eventual Python 3 migration.</li>
<li><a href="https://pypi.org/project/six/">six</a> - Python 2 and 3 compatibility utilities.</li>
</ul>
<h2 id="computer-vision">Computer Vision</h2>
<p><em>Libraries for Computer Vision.</em></p>
<ul>
<li><a href="https://github.com/JaidedAI/EasyOCR">EasyOCR</a> - Ready-to-use OCR with 40+ languages supported.</li>
<li><a href="https://github.com/ageitgey/face_recognition">Face Recognition</a> - Simple facial recognition library.</li>
<li><a href="https://github.com/kornia/kornia/">Kornia</a> - Open Source Differentiable Computer Vision Library for PyTorch.</li>
<li><a href="https://opencv.org/">OpenCV</a> - Open Source Computer Vision Library.</li>
<li><a href="https://github.com/madmaze/pytesseract">pytesseract</a> - A wrapper for <a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a>.</li>
<li><a href="https://github.com/sightmachine/SimpleCV">SimpleCV</a> - An open source framework for building computer vision applications.</li>
<li><a href="https://github.com/sirfz/tesserocr">tesserocr</a> - Another simple, Pillow-friendly, wrapper around the <code>tesseract-ocr</code> API for OCR.</li>
</ul>
<h2 id="concurrency-and-parallelism">Concurrency and Parallelism</h2>
<p><em>Libraries for concurrent and parallel execution. Also see <a href="https://github.com/timofurrer/awesome-asyncio">awesome-asyncio</a>.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html">concurrent.futures</a> - (Python standard library) A high-level interface for asynchronously executing callables.</li>
<li><a href="http://eventlet.net/">eventlet</a> - Asynchronous framework with WSGI support.</li>
<li><a href="http://www.gevent.org/">gevent</a> - A coroutine-based Python networking library that uses <a href="https://github.com/python-greenlet/greenlet">greenlet</a>.</li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html">multiprocessing</a> - (Python standard library) Process-based parallelism.</li>
<li><a href="https://github.com/soravux/scoop">scoop</a> - Scalable Concurrent Operations in Python.</li>
<li><a href="https://github.com/MagicStack/uvloop">uvloop</a> - Ultra fast implementation of <code>asyncio</code> event loop on top of <code>libuv</code>.</li>
</ul>
<h2 id="configuration">Configuration</h2>
<p><em>Libraries for storing and parsing configuration options.</em></p>
<ul>
<li><a href="https://github.com/DiffSK/configobj">configobj</a> - INI file parser with validation.</li>
<li><a href="https://docs.python.org/3/library/configparser.html">configparser</a> - (Python standard library) INI file parser.</li>
<li><a href="https://github.com/facebookresearch/hydra">hydra</a> - Hydra is a framework for elegantly configuring complex applications.</li>
<li><a href="https://profig.readthedocs.io/en/latest/">profig</a> - Config from multiple formats with value conversion.</li>
<li><a href="https://github.com/henriquebastos/python-decouple">python-decouple</a> - Strict separation of settings from code.</li>
</ul>
<h2 id="cryptography">Cryptography</h2>
<ul>
<li><a href="https://cryptography.io/en/latest/">cryptography</a> - A package designed to expose cryptographic primitives and recipes to Python developers.</li>
<li><a href="https://github.com/paramiko/paramiko">paramiko</a> - The leading native Python SSHv2 protocol library.</li>
<li><a href="https://passlib.readthedocs.io/en/stable/">passlib</a> - Secure password storage/hashing library, very high level.</li>
<li><a href="https://github.com/pyca/pynacl">pynacl</a> - Python binding to the Networking and Cryptography (NaCl) library.</li>
</ul>
<h2 id="data-analysis">Data Analysis</h2>
<p><em>Libraries for data analyzing.</em></p>
<ul>
<li><a href="https://github.com/awslabs/aws-data-wrangler">AWS Data Wrangler</a> - Pandas on AWS.</li>
<li><a href="https://github.com/blaze/blaze">Blaze</a> - NumPy and Pandas interface to Big Data.</li>
<li><a href="https://github.com/mining/mining">Open Mining</a> - Business Intelligence (BI) in Pandas interface.</li>
<li><a href="https://github.com/ironmussa/Optimus">Optimus</a> - Agile Data Science Workflows made easy with PySpark.</li>
<li><a href="https://orange.biolab.si/">Orange</a> - Data mining, data visualization, analysis and machine learning through visual programming or scripts.</li>
<li><a href="http://pandas.pydata.org/">Pandas</a> - A library providing high-performance, easy-to-use data structures and data analysis tools.</li>
</ul>
<h2 id="data-validation">Data Validation</h2>
<p><em>Libraries for validating data. Used for forms in many cases.</em></p>
<ul>
<li><a href="https://github.com/pyeve/cerberus">Cerberus</a> - A lightweight and extensible data validation library.</li>
<li><a href="https://docs.pylonsproject.org/projects/colander/en/latest/">colander</a> - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li>
<li><a href="https://github.com/Julian/jsonschema">jsonschema</a> - An implementation of <a href="http://json-schema.org/">JSON Schema</a> for Python.</li>
<li><a href="https://github.com/keleshev/schema">schema</a> - A library for validating Python data structures.</li>
<li><a href="https://github.com/schematics/schematics">Schematics</a> - Data Structure Validation.</li>
<li><a href="https://github.com/podio/valideer">valideer</a> - Lightweight extensible data validation and adaptation library.</li>
<li><a href="https://github.com/alecthomas/voluptuous">voluptuous</a> - A Python data validation library.</li>
</ul>
<h2 id="data-visualization">Data Visualization</h2>
<p><em>Libraries for visualizing data. Also see <a href="https://github.com/sorrycc/awesome-javascript#data-visualization">awesome-javascript</a>.</em></p>
<ul>
<li><a href="https://github.com/altair-viz/altair">Altair</a> - Declarative statistical visualization library for Python.</li>
<li><a href="https://github.com/bokeh/bokeh">Bokeh</a> - Interactive Web Plotting for Python.</li>
<li><a href="https://github.com/bloomberg/bqplot">bqplot</a> - Interactive Plotting Library for the Jupyter Notebook.</li>
<li><a href="https://github.com/SciTools/cartopy">Cartopy</a> - A cartographic python library with matplotlib support.</li>
<li><a href="https://plot.ly/products/dash/">Dash</a> - Built on top of Flask, React and Plotly aimed at analytical web applications.
<ul>
<li><a href="https://github.com/Acrotrend/awesome-dash">awesome-dash</a></li>
</ul>
</li>
<li><a href="https://github.com/mingrammer/diagrams">diagrams</a> - Diagram as Code.</li>
<li><a href="http://matplotlib.org/">Matplotlib</a> - A Python 2D plotting library.</li>
<li><a href="https://github.com/has2k1/plotnine">plotnine</a> - A grammar of graphics for Python based on ggplot2.</li>
<li><a href="http://www.pygal.org/en/latest/">Pygal</a> - A Python SVG Charts Creator.</li>
<li><a href="https://pypi.org/project/pygraphviz/">PyGraphviz</a> - Python interface to <a href="http://www.graphviz.org/">Graphviz</a>.</li>
<li><a href="http://www.pyqtgraph.org/">PyQtGraph</a> - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li>
<li><a href="https://github.com/mwaskom/seaborn">Seaborn</a> - Statistical data visualization using Matplotlib.</li>
<li><a href="https://github.com/vispy/vispy">VisPy</a> - High-performance scientific visualization based on OpenGL.</li>
</ul>
<h2 id="database">Database</h2>
<p><em>Databases implemented in Python.</em></p>
<ul>
<li><a href="https://github.com/patx/pickledb">pickleDB</a> - A simple and lightweight key-value store for Python.</li>
<li><a href="https://github.com/msiemens/tinydb">tinydb</a> - A tiny, document-oriented database.</li>
<li><a href="https://github.com/zopefoundation/ZODB">ZODB</a> - A native object database for Python. A key-value and object graph database.</li>
</ul>
<h2 id="database-drivers">Database Drivers</h2>
<p><em>Libraries for connecting and operating databases.</em></p>
<ul>
<li>MySQL - <a href="http://shlomi-noach.github.io/awesome-mysql/">awesome-mysql</a>
<ul>
<li><a href="https://github.com/PyMySQL/mysqlclient-python">mysqlclient</a> - MySQL connector with Python 3 support (<a href="https://sourceforge.net/projects/mysql-python/">mysql-python</a> fork).</li>
<li><a href="https://github.com/PyMySQL/PyMySQL">PyMySQL</a> - A pure Python MySQL driver compatible to mysql-python.</li>
</ul>
</li>
<li>PostgreSQL - <a href="https://github.com/dhamaniasad/awesome-postgres">awesome-postgres</a>
<ul>
<li><a href="http://initd.org/psycopg/">psycopg2</a> - The most popular PostgreSQL adapter for Python.</li>
<li><a href="https://github.com/gmr/queries">queries</a> - A wrapper of the psycopg2 library for interacting with PostgreSQL.</li>
</ul>
</li>
<li>SQlite - <a href="https://github.com/planetopendata/awesome-sqlite">awesome-sqlite</a>
<ul>
<li><a href="https://docs.python.org/3/library/sqlite3.html">sqlite3</a> - (Python standard library) SQlite interface compliant with DB-API 2.0</li>
<li><a href="https://github.com/plasticityai/supersqlite">SuperSQLite</a> - A supercharged SQLite library built on top of <a href="https://github.com/rogerbinns/apsw">apsw</a>.</li>
</ul>
</li>
<li>Other Relational Databases
<ul>
<li><a href="https://pymssql.readthedocs.io/en/latest/">pymssql</a> - A simple database interface to Microsoft SQL Server.</li>
<li><a href="https://github.com/mymarilyn/clickhouse-driver">clickhouse-driver</a> - Python driver with native interface for ClickHouse.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/datastax/python-driver">cassandra-driver</a> - The Python Driver for Apache Cassandra.</li>
<li><a href="https://github.com/wbolster/happybase">happybase</a> - A developer-friendly library for Apache HBase.</li>
<li><a href="https://github.com/dpkp/kafka-python">kafka-python</a> - The Python client for Apache Kafka.</li>
<li><a href="https://py2neo.org/">py2neo</a> - A client library and toolkit for working with Neo4j.</li>
<li><a href="https://github.com/mongodb/mongo-python-driver">pymongo</a> - The official Python client for MongoDB.</li>
<li><a href="https://github.com/andymccurdy/redis-py">redis-py</a> - The Python client for Redis.</li>
</ul>
</li>
<li>Asynchronous Clients
<ul>
<li><a href="https://github.com/mongodb/motor">motor</a> - The async Python driver for MongoDB.</li>
</ul>
</li>
</ul>
<h2 id="date-and-time">Date and Time</h2>
<p><em>Libraries for working with dates and times.</em></p>
<ul>
<li><a href="https://arrow.readthedocs.io/en/latest/">Arrow</a> - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</li>
<li><a href="https://github.com/KoffeinFlummi/Chronyk">Chronyk</a> - A Python 3 library for parsing human-written times and dates.</li>
<li><a href="https://github.com/dateutil/dateutil">dateutil</a> - Extensions to the standard Python <a href="https://docs.python.org/3/library/datetime.html">datetime</a> module.</li>
<li><a href="https://github.com/myusuf3/delorean/">delorean</a> - A library for clearing up the inconvenient truths that arise dealing with datetimes.</li>
<li><a href="https://github.com/timofurrer/maya">maya</a> - Datetimes for Humans.</li>
<li><a href="https://github.com/zachwill/moment">moment</a> - A Python library for dealing with dates/times. Inspired by <a href="http://momentjs.com/">Moment.js</a>.</li>
<li><a href="https://github.com/sdispater/pendulum">Pendulum</a> - Python datetimes made easy.</li>
<li><a href="https://github.com/shinux/PyTime">PyTime</a> - An easy-to-use Python module which aims to operate date/time/datetime by string.</li>
<li><a href="https://launchpad.net/pytz">pytz</a> - World timezone definitions, modern and historical. Brings the <a href="https://en.wikipedia.org/wiki/Tz_database">tz database</a> into Python.</li>
<li><a href="https://github.com/dirn/When.py">when.py</a> - Providing user-friendly functions to help perform common date and time actions.</li>
</ul>
<h2 id="debugging-tools">Debugging Tools</h2>
<p><em>Libraries for debugging code.</em></p>
<ul>
<li>pdb-like Debugger
<ul>
<li><a href="https://github.com/gotcha/ipdb">ipdb</a> - IPython-enabled <a href="https://docs.python.org/3/library/pdb.html">pdb</a>.</li>
<li><a href="https://github.com/antocuni/pdb">pdb++</a> - Another drop-in replacement for pdb.</li>
<li><a href="https://github.com/inducer/pudb">pudb</a> - A full-screen, console-based Python debugger.</li>
<li><a href="https://github.com/Kozea/wdb">wdb</a> - An improbable web debugger through WebSockets.</li>
</ul>
</li>
<li>Tracing
<ul>
<li><a href="https://github.com/khamidou/lptrace">lptrace</a> - <a href="http://man7.org/linux/man-pages/man1/strace.1.html">strace</a> for Python programs.</li>
<li><a href="https://github.com/ionelmc/python-manhole">manhole</a> - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.</li>
<li><a href="https://github.com/google/pyringe">pyringe</a> - Debugger capable of attaching to and injecting code into Python processes.</li>
<li><a href="https://github.com/ionelmc/python-hunter">python-hunter</a> - A flexible code tracing toolkit.</li>
</ul>
</li>
<li>Profiler
<ul>
<li><a href="https://github.com/rkern/line_profiler">line_profiler</a> - Line-by-line profiling.</li>
<li><a href="https://github.com/fabianp/memory_profiler">memory_profiler</a> - Monitor Memory usage of Python code.</li>
<li><a href="https://github.com/benfred/py-spy">py-spy</a> - A sampling profiler for Python programs. Written in Rust.</li>
<li><a href="https://github.com/uber/pyflame">pyflame</a> - A ptracing profiler For Python.</li>
<li><a href="https://github.com/nvdv/vprof">vprof</a> - Visual Python profiler.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/jazzband/django-debug-toolbar">django-debug-toolbar</a> - Display various debug information for Django.</li>
<li><a href="https://github.com/dcramer/django-devserver">django-devserver</a> - A drop-in replacement for Django&rsquo;s runserver.</li>
<li><a href="https://github.com/mgood/flask-debugtoolbar">flask-debugtoolbar</a> - A port of the django-debug-toolbar to flask.</li>
<li><a href="https://github.com/gruns/icecream">icecream</a> - Inspect variables, expressions, and program execution with a single, simple function call.</li>
<li><a href="https://github.com/eliben/pyelftools">pyelftools</a> - Parsing and analyzing ELF files and DWARF debugging information.</li>
</ul>
</li>
</ul>
<h2 id="deep-learning">Deep Learning</h2>
<p><em>Frameworks for Neural Networks and Deep Learning. Also see <a href="https://github.com/ChristosChristofidis/awesome-deep-learning">awesome-deep-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/BVLC/caffe">caffe</a> - A fast open framework for deep learning..</li>
<li><a href="https://github.com/keras-team/keras">keras</a> - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li>
<li><a href="https://github.com/dmlc/mxnet">mxnet</a> - A deep learning framework designed for both efficiency and flexibility.</li>
<li><a href="https://github.com/pytorch/pytorch">pytorch</a> - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li>
<li><a href="https://github.com/SerpentAI/SerpentAI">SerpentAI</a> - Game agent framework. Use any video game as a deep learning sandbox.</li>
<li><a href="https://github.com/tensorflow/tensorflow">tensorflow</a> - The most popular Deep Learning framework created by Google.</li>
<li><a href="https://github.com/Theano/Theano">Theano</a> - A library for fast numerical computation.</li>
</ul>
<h2 id="devops-tools">DevOps Tools</h2>
<p><em>Software and libraries for DevOps.</em></p>
<ul>
<li>Configuration Management
<ul>
<li><a href="https://github.com/ansible/ansible">ansible</a> - A radically simple IT automation platform.</li>
<li><a href="https://cloudinit.readthedocs.io/en/latest/">cloudinit</a> - A multi-distribution package that handles early initialization of a cloud instance.</li>
<li><a href="https://www.openstack.org/">OpenStack</a> - Open source software for building private and public clouds.</li>
<li><a href="https://github.com/Fizzadar/pyinfra">pyinfra</a> - A versatile CLI tools and python libraries to automate infrastructure.</li>
<li><a href="https://github.com/saltstack/salt">saltstack</a> - Infrastructure automation and management system.</li>
</ul>
</li>
<li>SSH-style Deployment
<ul>
<li><a href="https://github.com/sebastien/cuisine">cuisine</a> - Chef-like functionality for Fabric.</li>
<li><a href="https://github.com/fabric/fabric">fabric</a> - A simple, Pythonic tool for remote execution and deployment.</li>
<li><a href="https://github.com/fabtools/fabtools">fabtools</a> - Tools for writing awesome Fabric files.</li>
</ul>
</li>
<li>Process Management
<ul>
<li><a href="https://github.com/nickstenning/honcho">honcho</a> - A Python clone of <a href="https://github.com/ddollar/foreman">Foreman</a>, for managing Procfile-based applications.</li>
<li><a href="https://github.com/Supervisor/supervisor">supervisor</a> - Supervisor process control system for UNIX.</li>
</ul>
</li>
<li>Monitoring
<ul>
<li><a href="https://github.com/giampaolo/psutil">psutil</a> - A cross-platform process and system utilities module.</li>
</ul>
</li>
<li>Backup
<ul>
<li><a href="https://www.borgbackup.org/">BorgBackup</a> - A deduplicating archiver with compression and encryption.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://docs.docker.com/compose/">docker-compose</a> - Fast, isolated development environments using <a href="https://www.docker.com/">Docker</a>.</li>
</ul>
</li>
</ul>
<h2 id="distributed-computing">Distributed Computing</h2>
<p><em>Frameworks and libraries for Distributed Computing.</em></p>
<ul>
<li>Batch Processing
<ul>
<li><a href="https://github.com/dask/dask">dask</a> - A flexible parallel computing library for analytic computing.</li>
<li><a href="https://github.com/spotify/luigi">luigi</a> - A module that helps you build complex pipelines of batch jobs.</li>
<li><a href="https://github.com/Yelp/mrjob">mrjob</a> - Run MapReduce jobs on Hadoop or Amazon Web Services.</li>
<li><a href="https://pypi.org/project/pyspark/">PySpark</a> - <a href="https://spark.apache.org/">Apache Spark</a> Python API.</li>
<li><a href="https://github.com/ray-project/ray/">Ray</a> - A system for parallel and distributed Python that unifies the machine learning ecosystem.</li>
</ul>
</li>
<li>Stream Processing
<ul>
<li><a href="https://github.com/robinhood/faust">faust</a> - A stream processing library, porting the ideas from <a href="https://kafka.apache.org/documentation/streams/">Kafka Streams</a> to Python.</li>
<li><a href="https://github.com/Parsely/streamparse">streamparse</a> - Run Python code against real-time streams of data via <a href="http://storm.apache.org/">Apache Storm</a>.</li>
</ul>
</li>
</ul>
<h2 id="distribution">Distribution</h2>
<p><em>Libraries to create packaged executables for release distribution.</em></p>
<ul>
<li><a href="https://github.com/spotify/dh-virtualenv">dh-virtualenv</a> - Build and distribute a virtualenv as a Debian package.</li>
<li><a href="http://nuitka.net/">Nuitka</a> - Compile scripts, modules, packages to an executable or extension module.</li>
<li><a href="http://pythonhosted.org/py2app/">py2app</a> - Freezes Python scripts (Mac OS X).</li>
<li><a href="http://www.py2exe.org/">py2exe</a> - Freezes Python scripts (Windows).</li>
<li><a href="https://github.com/dashingsoft/pyarmor">pyarmor</a> - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts.</li>
<li><a href="https://github.com/pyinstaller/pyinstaller">PyInstaller</a> - Converts Python programs into stand-alone executables (cross-platform).</li>
<li><a href="http://pynsist.readthedocs.io/en/latest/">pynsist</a> - A tool to build Windows installers, installers bundle Python itself.</li>
<li><a href="https://github.com/linkedin/shiv">shiv</a> - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included.</li>
</ul>
<h2 id="documentation">Documentation</h2>
<p><em>Libraries for generating project documentation.</em></p>
<ul>
<li><a href="https://github.com/sphinx-doc/sphinx/">sphinx</a> - Python Documentation generator.
<ul>
<li><a href="https://github.com/yoloseem/awesome-sphinxdoc">awesome-sphinxdoc</a></li>
</ul>
</li>
<li><a href="https://github.com/mitmproxy/pdoc">pdoc</a> - Epydoc replacement to auto generate API documentation for Python libraries.</li>
<li><a href="https://github.com/pycco-docs/pycco">pycco</a> - The literate-programming-style documentation generator.</li>
</ul>
<h2 id="downloader">Downloader</h2>
<p><em>Libraries for downloading.</em></p>
<ul>
<li><a href="https://github.com/jindaxiang/akshare">akshare</a> - A financial data interface library, built for human beings!</li>
<li><a href="https://github.com/s3tools/s3cmd">s3cmd</a> - A command line tool for managing Amazon S3 and CloudFront.</li>
<li><a href="https://github.com/bloomreach/s4cmd">s4cmd</a> - Super S3 command line tool, good for higher performance.</li>
<li><a href="https://you-get.org/">you-get</a> - A YouTube/Youku/Niconico video downloader written in Python 3.</li>
<li><a href="https://rg3.github.io/youtube-dl/">youtube-dl</a> - A small command-line program to download videos from YouTube.</li>
</ul>
<h2 id="e-commerce">E-commerce</h2>
<p><em>Frameworks and libraries for e-commerce and payments.</em></p>
<ul>
<li><a href="https://github.com/lxneng/alipay">alipay</a> - Unofficial Alipay API for Python.</li>
<li><a href="https://github.com/stephenmcd/cartridge">Cartridge</a> - A shopping cart app built using the Mezzanine.</li>
<li><a href="http://oscarcommerce.com/">django-oscar</a> - An open-source e-commerce framework for Django.</li>
<li><a href="https://github.com/awesto/django-shop">django-shop</a> - A Django based shop system.</li>
<li><a href="https://github.com/MicroPyramid/forex-python">forex-python</a> - Foreign exchange rates, Bitcoin price index and currency conversion.</li>
<li><a href="https://github.com/agiliq/merchant">merchant</a> - A Django app to accept payments from various payment processors.</li>
<li><a href="https://github.com/carlospalol/money">money</a> - <code>Money</code> class with optional CLDR-backed locale-aware formatting and an extensible currency exchange.</li>
<li><a href="https://github.com/Alir3z4/python-currencies">python-currencies</a> - Display money format and its filthy currencies.</li>
<li><a href="http://getsaleor.com/">saleor</a> - An e-commerce storefront for Django.</li>
<li><a href="https://www.shuup.com/en/">shoop</a> - An open source E-Commerce platform based on Django.</li>
</ul>
<h2 id="editor-plugins-and-ides">Editor Plugins and IDEs</h2>
<ul>
<li>Emacs
<ul>
<li><a href="https://github.com/jorgenschaefer/elpy">elpy</a> - Emacs Python Development Environment.</li>
</ul>
</li>
<li>Sublime Text
<ul>
<li><a href="https://github.com/DamnWidget/anaconda">anaconda</a> - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.</li>
<li><a href="https://github.com/srusskih/SublimeJEDI">SublimeJEDI</a> - A Sublime Text plugin to the awesome auto-complete library Jedi.</li>
</ul>
</li>
<li>Vim
<ul>
<li><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a> - Vim bindings for the Jedi auto-completion library for Python.</li>
<li><a href="https://github.com/python-mode/python-mode">python-mode</a> - An all in one plugin for turning Vim into a Python IDE.</li>
<li><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> - Includes <a href="https://github.com/davidhalter/jedi">Jedi</a>-based completion engine for Python.</li>
</ul>
</li>
<li>Visual Studio
<ul>
<li><a href="https://github.com/Microsoft/PTVS">PTVS</a> - Python Tools for Visual Studio.</li>
</ul>
</li>
<li>Visual Studio Code
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a> - The official VSCode extension with rich support for Python.</li>
</ul>
</li>
<li>IDE
<ul>
<li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a> - Commercial Python IDE by JetBrains. Has free community edition available.</li>
<li><a href="https://github.com/spyder-ide/spyder">spyder</a> - Open Source Python IDE.</li>
</ul>
</li>
</ul>
<h2 id="email">Email</h2>
<p><em>Libraries for sending and parsing email.</em></p>
<ul>
<li>Mail Servers
<ul>
<li><a href="https://github.com/modoboa/modoboa">modoboa</a> - A mail hosting and management platform including a modern Web UI.</li>
<li><a href="https://github.com/moggers87/salmon">salmon</a> - A Python Mail Server.</li>
</ul>
</li>
<li>Clients
<ul>
<li><a href="https://github.com/martinrusev/imbox">imbox</a> - Python IMAP for Humans.</li>
<li><a href="https://github.com/kootenpv/yagmail">yagmail</a> - Yet another Gmail/SMTP client.</li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://github.com/mailgun/flanker">flanker</a> - An email address and Mime parsing library.</li>
<li><a href="https://github.com/marrow/mailer">mailer</a> - High-performance extensible mail delivery framework.</li>
</ul>
</li>
</ul>
<h2 id="enterprise-application-integrations">Enterprise Application Integrations</h2>
<p><em>Platforms and tools for systems integrations in enterprise environments</em></p>
<ul>
<li><a href="https://zato.io">Zato</a> - ESB, SOA, REST, APIs and Cloud Integrations in Python.</li>
</ul>
<h2 id="environment-management">Environment Management</h2>
<p><em>Libraries for Python version and virtual environment management.</em></p>
<ul>
<li><a href="https://github.com/pyenv/pyenv">pyenv</a> - Simple Python version management.</li>
<li><a href="https://github.com/pypa/virtualenv">virtualenv</a> - A tool to create isolated Python environments.</li>
</ul>
<h2 id="files">Files</h2>
<p><em>Libraries for file manipulation and MIME type detection.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/mimetypes.html">mimetypes</a> - (Python standard library) Map filenames to MIME types.</li>
<li><a href="https://github.com/jaraco/path.py">path.py</a> - A module wrapper for <a href="https://docs.python.org/3/library/os.path.html">os.path</a>.</li>
<li><a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> - (Python standard library) An cross-platform, object-oriented path library.</li>
<li><a href="https://github.com/pyfilesystem/pyfilesystem2">PyFilesystem2</a> - Python&rsquo;s filesystem abstraction layer.</li>
<li><a href="https://github.com/ahupp/python-magic">python-magic</a> - A Python interface to the libmagic file type identification library.</li>
<li><a href="https://github.com/mikeorr/Unipath">Unipath</a> - An object-oriented approach to file/directory operations.</li>
<li><a href="https://github.com/gorakhargosh/watchdog">watchdog</a> - API and shell utilities to monitor file system events.</li>
</ul>
<h2 id="foreign-function-interface">Foreign Function Interface</h2>
<p><em>Libraries for providing foreign function interface.</em></p>
<ul>
<li><a href="https://pypi.org/project/cffi/">cffi</a> - Foreign Function Interface for Python calling C code.</li>
<li><a href="https://docs.python.org/3/library/ctypes.html">ctypes</a> - (Python standard library) Foreign Function Interface for Python calling C code.</li>
<li><a href="https://mathema.tician.de/software/pycuda/">PyCUDA</a> - A Python wrapper for Nvidia&rsquo;s CUDA API.</li>
<li><a href="http://www.swig.org/Doc1.3/Python.html">SWIG</a> - Simplified Wrapper and Interface Generator.</li>
</ul>
<h2 id="forms">Forms</h2>
<p><em>Libraries for working with forms.</em></p>
<ul>
<li><a href="https://github.com/Pylons/deform">Deform</a> - Python HTML form generation library influenced by the formish form generation library.</li>
<li><a href="https://github.com/dyve/django-bootstrap3">django-bootstrap3</a> - Bootstrap 3 integration with Django.</li>
<li><a href="https://github.com/zostera/django-bootstrap4">django-bootstrap4</a> - Bootstrap 4 integration with Django.</li>
<li><a href="https://github.com/django-crispy-forms/django-crispy-forms">django-crispy-forms</a> - A Django app which lets you create beautiful forms in a very elegant and DRY way.</li>
<li><a href="https://github.com/WiserTogether/django-remote-forms">django-remote-forms</a> - A platform independent Django form serializer.</li>
<li><a href="https://github.com/wtforms/wtforms">WTForms</a> - A flexible forms validation and rendering library.</li>
</ul>
<h2 id="functional-programming">Functional Programming</h2>
<p><em>Functional Programming with Python.</em></p>
<ul>
<li><a href="https://github.com/evhub/coconut">Coconut</a> - A variant of Python built for simple, elegant, Pythonic functional programming.</li>
<li><a href="https://github.com/pytoolz/cytoolz/">CyToolz</a> - Cython implementation of <code>Toolz</code>: High performance functional utilities.</li>
<li><a href="https://github.com/kachayev/fn.py">fn.py</a> - Functional programming in Python: implementation of missing features to enjoy FP.</li>
<li><a href="https://github.com/Suor/funcy">funcy</a> - A fancy and practical functional tools.</li>
<li><a href="https://github.com/erikrose/more-itertools">more-itertools</a> - More routines for operating on iterables, beyond <code>itertools</code>.</li>
<li><a href="https://github.com/dry-python/returns">returns</a> - A set of type-safe monads, transformers, and composition utilities.</li>
<li><a href="https://github.com/pytoolz/toolz">Toolz</a> - A collection of functional utilities for iterators, functions, and dictionaries.</li>
</ul>
<h2 id="gui-development">GUI Development</h2>
<p><em>Libraries for working with graphical user interface applications.</em></p>
<ul>
<li><a href="https://docs.python.org/3/library/curses.html">curses</a> - Built-in wrapper for <a href="http://www.gnu.org/software/ncurses/">ncurses</a> used to create terminal GUI applications.</li>
<li><a href="https://github.com/ChrisKnott/Eel">Eel</a> - A library for making simple Electron-like offline HTML/JS GUI apps.</li>
<li><a href="https://github.com/nucleic/enaml">enaml</a> - Creating beautiful user-interfaces with Declarative Syntax like QML.</li>
<li><a href="https://github.com/zoofIO/flexx">Flexx</a> - Flexx is a pure Python toolkit for creating GUI&rsquo;s, that uses web technology for its rendering.</li>
<li><a href="https://github.com/chriskiehl/Gooey">Gooey</a> - Turn command line programs into a full GUI application with one line.</li>
<li><a href="https://kivy.org/">kivy</a> - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li>
<li><a href="https://github.com/pyglet/pyglet">pyglet</a> - A cross-platform windowing and multimedia library for Python.</li>
<li><a href="https://wiki.gnome.org/Projects/PyGObject">PyGObject</a> - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li>
<li><a href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a> - Python bindings for the <a href="https://www.qt.io/">Qt</a> cross-platform application and UI framework.</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> - Wrapper for tkinter, Qt, WxPython and Remi.</li>
<li><a href="https://github.com/r0x0r/pywebview/">pywebview</a> - A lightweight cross-platform native wrapper around a webview component.</li>
<li><a href="https://wiki.python.org/moin/TkInter">Tkinter</a> - Tkinter is Python&rsquo;s de-facto standard GUI package.</li>
<li><a href="https://github.com/pybee/toga">Toga</a> - A Python native, OS native GUI toolkit.</li>
<li><a href="http://urwid.org/">urwid</a> - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li>
<li><a href="https://wxpython.org/">wxPython</a> - A blending of the wxWidgets C++ class library with the Python.</li>
<li><a href="https://github.com/RaylockLLC/DearPyGui/">DearPyGui</a> - A Simple GPU accelerated Python GUI framework</li>
</ul>
<h2 id="graphql">GraphQL</h2>
<p><em>Libraries for working with GraphQL.</em></p>
<ul>
<li><a href="https://github.com/graphql-python/graphene/">graphene</a> - GraphQL framework for Python.</li>
<li><a href="https://github.com/tartiflette/tartiflette-aiohttp/">tartiflette-aiohttp</a> - An <code>aiohttp</code>-based wrapper for Tartiflette to expose GraphQL APIs over HTTP.</li>
<li><a href="https://github.com/tartiflette/tartiflette-asgi/">tartiflette-asgi</a> - ASGI support for the Tartiflette GraphQL engine.</li>
<li><a href="https://tartiflette.io">tartiflette</a> - SDL-first GraphQL engine implementation for Python 3.6+ and asyncio.</li>
</ul>
<h2 id="game-development">Game Development</h2>
<p><em>Awesome game development libraries.</em></p>
<ul>
<li><a href="https://api.arcade.academy/en/latest/">Arcade</a> - Arcade is a modern Python framework for crafting games with compelling graphics and sound.</li>
<li><a href="http://cocos2d.org/">Cocos2d</a> - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.</li>
<li><a href="http://www.harfang3d.com">Harfang3D</a> - Python framework for 3D, VR and game development.</li>
<li><a href="https://www.panda3d.org/">Panda3D</a> - 3D game engine developed by Disney.</li>
<li><a href="http://www.pygame.org/news.html">Pygame</a> - Pygame is a set of Python modules designed for writing games.</li>
<li><a href="http://www.ogre3d.org/tikiwiki/PyOgre">PyOgre</a> - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li>
<li><a href="http://pyopengl.sourceforge.net/">PyOpenGL</a> - Python ctypes bindings for OpenGL and it&rsquo;s related APIs.</li>
<li><a href="https://pysdl2.readthedocs.io">PySDL2</a> - A ctypes based wrapper for the SDL2 library.</li>
<li><a href="https://www.renpy.org/">RenPy</a> - A Visual Novel engine.</li>
</ul>
<h2 id="geolocation">Geolocation</h2>
<p><em>Libraries for geocoding addresses and working with latitudes and longitudes.</em></p>
<ul>
<li><a href="https://github.com/SmileyChris/django-countries">django-countries</a> - A Django app that provides a country field for models and forms.</li>
<li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/">GeoDjango</a> - A world-class geographic web framework.</li>
<li><a href="https://github.com/maxmind/geoip-api-python">GeoIP</a> - Python API for MaxMind GeoIP Legacy Database.</li>
<li><a href="https://github.com/frewsxcv/python-geojson">geojson</a> - Python bindings and utilities for GeoJSON.</li>
<li><a href="https://github.com/geopy/geopy">geopy</a> - Python Geocoding Toolbox.</li>
</ul>
<h2 id="html-manipulation">HTML Manipulation</h2>
<p><em>Libraries for working with HTML and XML.</em></p>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a> - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li>
<li><a href="https://github.com/mozilla/bleach">bleach</a> - A whitelist-based HTML sanitization and text linkification library.</li>
<li><a href="https://pypi.org/project/cssutils/">cssutils</a> - A CSS library for Python.</li>
<li><a href="https://github.com/html5lib/html5lib-python">html5lib</a> - A standards-compliant library for parsing and serializing HTML documents and fragments.</li>
<li><a href="http://lxml.de/">lxml</a> - A very fast, easy-to-use and versatile library for handling HTML and XML.</li>
<li><a href="https://github.com/pallets/markupsafe">MarkupSafe</a> - Implements a XML/HTML/XHTML Markup safe string for Python.</li>
<li><a href="https://github.com/gawel/pyquery">pyquery</a> - A jQuery-like library for parsing HTML.</li>
<li><a href="https://github.com/stchris/untangle">untangle</a> - Converts XML documents to Python objects for easy access.</li>
<li><a href="http://weasyprint.org">WeasyPrint</a> - A visual rendering engine for HTML and CSS that can export to PDF.</li>
<li><a href="https://xmldataset.readthedocs.io/en/latest/">xmldataset</a> - Simple XML Parsing.</li>
<li><a href="https://github.com/martinblech/xmltodict">xmltodict</a> - Working with XML feel like you are working with JSON.</li>
</ul>
<h2 id="http-clients">HTTP Clients</h2>
<p><em>Libraries for working with HTTP.</em></p>
<ul>
<li><a href="https://github.com/spyoungtech/grequests">grequests</a> - requests + gevent for asynchronous HTTP requests.</li>
<li><a href="https://github.com/httplib2/httplib2">httplib2</a> - Comprehensive HTTP client library.</li>
<li><a href="https://github.com/encode/httpx">httpx</a> - A next generation HTTP client for Python.</li>
<li><a href="https://github.com/psf/requests">requests</a> - HTTP Requests for Humans.</li>
<li><a href="https://github.com/twisted/treq">treq</a> - Python requests like API built on top of Twisted&rsquo;s HTTP client.</li>
<li><a href="https://github.com/shazow/urllib3">urllib3</a> - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li>
</ul>
<h2 id="hardware">Hardware</h2>
<p><em>Libraries for programming with hardware.</em></p>
<ul>
<li><a href="http://inotool.org/">ino</a> - Command line toolkit for working with <a href="https://www.arduino.cc/">Arduino</a>.</li>
<li><a href="https://github.com/boppreh/keyboard">keyboard</a> - Hook and simulate global keyboard events on Windows and Linux.</li>
<li><a href="https://github.com/boppreh/mouse">mouse</a> - Hook and simulate global mouse events on Windows and Linux.</li>
<li><a href="http://www.pingo.io/">Pingo</a> - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.</li>
<li><a href="https://github.com/SavinaRoja/PyUserInput">PyUserInput</a> - A module for cross-platform control of the mouse and keyboard.</li>
<li><a href="https://github.com/secdev/scapy">scapy</a> - A brilliant packet manipulation library.</li>
</ul>
<h2 id="image-processing">Image Processing</h2>
<p><em>Libraries for manipulating images.</em></p>
<ul>
<li><a href="https://github.com/rossgoodwin/hmap">hmap</a> - Image histogram remapping.</li>
<li><a href="https://sourceforge.net/projects/imgseek/">imgSeek</a> - A project for searching a collection of images using visual similarity.</li>
<li><a href="https://github.com/hhatto/nude.py">nude.py</a> - Nudity detection.</li>
<li><a href="https://github.com/daboth/pagan">pagan</a> - Retro identicon (Avatar) generation based on input string and hash.</li>
<li><a href="https://github.com/python-pillow/Pillow">pillow</a> - Pillow is the friendly <a href="http://www.pythonware.com/products/pil/">PIL</a> fork.</li>
<li><a href="https://github.com/WhyNotHugo/python-barcode">python-barcode</a> - Create barcodes in Python with no extra dependencies.</li>
<li><a href="https://github.com/ajkumar25/pygram">pygram</a> - Instagram-like image filters.</li>
<li><a href="http://github.com/pymatting/pymatting">PyMatting</a> - A library for alpha matting.</li>
<li><a href="https://github.com/lincolnloop/python-qrcode">python-qrcode</a> - A pure Python QR Code generator.</li>
<li><a href="https://github.com/dylanaraps/pywal">pywal</a> - A tool that generates color schemes from images.</li>
<li><a href="https://github.com/libvips/pyvips">pyvips</a> - A fast image processing library with low memory needs.</li>
<li><a href="https://github.com/fogleman/Quads">Quads</a> - Computer art based on quadtrees.</li>
<li><a href="http://scikit-image.org/">scikit-image</a> - A Python library for (scientific) image processing.</li>
<li><a href="https://github.com/thumbor/thumbor">thumbor</a> - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li>
<li><a href="https://github.com/dahlia/wand">wand</a> - Python bindings for <a href="http://www.imagemagick.org/script/magick-wand.php">MagickWand</a>, C API for ImageMagick.</li>
</ul>
<h2 id="implementations">Implementations</h2>
<p><em>Implementations of Python.</em></p>
<ul>
<li><a href="https://github.com/metawilm/cl-python">CLPython</a> - Implementation of the Python programming language written in Common Lisp.</li>
<li><a href="https://github.com/python/cpython">CPython</a> - <strong>Default, most widely used implementation of the Python programming language written in C.</strong></li>
<li><a href="http://cython.org/">Cython</a> - Optimizing Static Compiler for Python.</li>
<li><a href="https://github.com/google/grumpy">Grumpy</a> - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).</li>
<li><a href="https://github.com/IronLanguages/ironpython3">IronPython</a> - Implementation of the Python programming language written in C#.</li>
<li><a href="https://hg.python.org/jython">Jython</a> - Implementation of Python programming language written in Java for the JVM.</li>
<li><a href="https://github.com/micropython/micropython">MicroPython</a> - A lean and efficient Python programming language implementation.</li>
<li><a href="http://numba.pydata.org/">Numba</a> - Python JIT compiler to LLVM aimed at scientific Python.</li>
<li><a href="https://github.com/Maratyszcza/PeachPy">PeachPy</a> - x86-64 assembler embedded in Python.</li>
<li><a href="https://github.com/Microsoft/Pyjion">Pyjion</a> - A JIT for Python based upon CoreCLR.</li>
<li><a href="https://foss.heptapod.net/pypy/pypy">PyPy</a> - A very fast and compliant implementation of the Python language.</li>
<li><a href="https://github.com/dropbox/pyston">Pyston</a> - A Python implementation using JIT techniques.</li>
<li><a href="https://github.com/stackless-dev/stackless">Stackless Python</a> - An enhanced version of the Python programming language.</li>
</ul>
<h2 id="interactive-interpreter">Interactive Interpreter</h2>
<p><em>Interactive Python interpreters (REPL).</em></p>
<ul>
<li><a href="https://github.com/bpython/bpython">bpython</a> - A fancy interface to the Python interpreter.</li>
<li><a href="https://jupyter.org">Jupyter Notebook (IPython)</a> - A rich toolkit to help you make the most out of using Python interactively.
<ul>
<li><a href="https://github.com/markusschanta/awesome-jupyter">awesome-jupyter</a></li>
</ul>
</li>
<li><a href="https://github.com/jonathanslenders/ptpython">ptpython</a> - Advanced Python REPL built on top of the <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a>.</li>
</ul>
<h2 id="internationalization">Internationalization</h2>
<p><em>Libraries for working with i18n.</em></p>
<ul>
<li><a href="http://babel.pocoo.org/en/latest/">Babel</a> - An internationalization library for Python.</li>
<li><a href="https://github.com/ovalhub/pyicu">PyICU</a> - A wrapper of International Components for Unicode C++ library (<a href="http://site.icu-project.org/">ICU</a>).</li>
</ul>
<h2 id="job-scheduler">Job Scheduler</h2>
<p><em>Libraries for scheduling jobs.</em></p>
<ul>
<li><a href="https://airflow.apache.org/">Airflow</a> - Airflow is a platform to programmatically author, schedule and monitor workflows.</li>
<li><a href="http://apscheduler.readthedocs.io/en/latest/">APScheduler</a> - A light but powerful in-process task scheduler that lets you schedule functions.</li>
<li><a href="https://github.com/thauber/django-schedule">django-schedule</a> - A calendaring app for Django.</li>
<li><a href="http://pydoit.org/">doit</a> - A task runner and build tool.</li>
<li><a href="https://github.com/gunnery/gunnery">gunnery</a> - Multipurpose task execution tool for distributed systems with web-based interface.</li>
<li><a href="https://joblib.readthedocs.io/">Joblib</a> - A set of tools to provide lightweight pipelining in Python.</li>
<li><a href="https://github.com/fengsp/plan">Plan</a> - Writing crontab file in Python like a charm.</li>
<li><a href="https://github.com/PrefectHQ/prefect">Prefect</a> - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines.</li>
<li><a href="https://github.com/dbader/schedule">schedule</a> - Python job scheduling for humans.</li>
<li><a href="https://github.com/knipknap/SpiffWorkflow">Spiff</a> - A powerful workflow engine implemented in pure Python.</li>
<li><a href="https://docs.openstack.org/developer/taskflow/">TaskFlow</a> - A Python library that helps to make task execution easy, consistent and reliable.</li>
</ul>
<h2 id="logging">Logging</h2>
<p><em>Libraries for generating and working with logs.</em></p>
<ul>
<li><a href="http://logbook.readthedocs.io/en/stable/">logbook</a> - Logging replacement for Python.</li>
<li><a href="https://docs.python.org/3/library/logging.html">logging</a> - (Python standard library) Logging facility for Python.</li>
<li><a href="https://github.com/Delgan/loguru">loguru</a> - Library which aims to bring enjoyable logging in Python.</li>
<li><a href="https://github.com/getsentry/sentry-python">sentry-python</a> - Sentry SDK for Python.</li>
<li><a href="https://www.structlog.org/en/stable/">structlog</a> - Structured logging made easy.</li>
</ul>
<h2 id="machine-learning">Machine Learning</h2>
<p><em>Libraries for Machine Learning. Also see <a href="https://github.com/josephmisiti/awesome-machine-learning#python">awesome-machine-learning</a>.</em></p>
<ul>
<li><a href="https://github.com/openai/gym">gym</a> - A toolkit for developing and comparing reinforcement learning algorithms.</li>
<li><a href="https://github.com/h2oai/h2o-3">H2O</a> - Open Source Fast Scalable Machine Learning Platform.</li>
<li><a href="https://github.com/benhamner/Metrics">Metrics</a> - Machine learning evaluation metrics.</li>
<li><a href="https://github.com/numenta/nupic">NuPIC</a> - Numenta Platform for Intelligent Computing.</li>
<li><a href="http://scikit-learn.org/">scikit-learn</a> - The most popular Python library for Machine Learning.</li>
<li><a href="http://spark.apache.org/docs/latest/ml-guide.html">Spark ML</a> - <a href="http://spark.apache.org/">Apache Spark</a>&rsquo;s scalable Machine Learning library.</li>
<li><a href="https://github.com/josephreisinger/vowpal_porpoise">vowpal_porpoise</a> - A lightweight Python wrapper for <a href="https://github.com/JohnLangford/vowpal_wabbit/">Vowpal Wabbit</a>.</li>
<li><a href="https://github.com/dmlc/xgboost">xgboost</a> - A scalable, portable, and distributed gradient boosting library.</li>
<li><a href="https://github.com/mindsdb/mindsdb">MindsDB</a> - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries.</li>
</ul>
<h2 id="microsoft-windows">Microsoft Windows</h2>
<p><em>Python programming on Microsoft Windows.</em></p>
<ul>
<li><a href="http://python-xy.github.io/">Python(x,y)</a> - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li>
<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs</a> - Unofficial Windows binaries for Python extension packages.</li>
<li><a href="https://github.com/pythonnet/pythonnet">PythonNet</a> - Python Integration with the .NET Common Language Runtime (CLR).</li>
<li><a href="https://github.com/mhammond/pywin32">PyWin32</a> - Python Extensions for Windows.</li>
<li><a href="https://winpython.github.io/">WinPython</a> - Portable development environment for Windows 7/8.</li>
</ul>
<h2 id="miscellaneous">Miscellaneous</h2>
<p><em>Useful libraries or tools that don&rsquo;t fit in the categories above.</em></p>
<ul>
<li><a href="https://github.com/jek/blinker">blinker</a> - A fast Python in-process signal/event dispatching system.</li>
<li><a href="https://github.com/mahmoud/boltons">boltons</a> - A set of pure-Python utilities.</li>
<li><a href="https://github.com/pallets/itsdangerous">itsdangerous</a> - Various helpers to pass trusted data to untrusted environments.</li>
<li><a href="https://github.com/magenta/magenta">magenta</a> - A tool to generate music and art using artificial intelligence.</li>
<li><a href="https://github.com/mitsuhiko/pluginbase">pluginbase</a> - A simple but flexible plugin system for Python.</li>
<li><a href="http://www.tryton.org/">tryton</a> - A general purpose business framework.</li>
</ul>
<h2 id="natural-language-processing">Natural Language Processing</h2>
<p><em>Libraries for working with human languages.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/RaRe-Technologies/gensim">gensim</a> - Topic Modeling for Humans.</li>
<li><a href="https://github.com/saffsd/langid.py">langid.py</a> - Stand-alone language identification system.</li>
<li><a href="http://www.nltk.org/">nltk</a> - A leading platform for building Python programs to work with human language data.</li>
<li><a href="https://github.com/clips/pattern">pattern</a> - A web mining module.</li>
<li><a href="https://github.com/aboSamoor/polyglot">polyglot</a> - Natural language pipeline supporting hundreds of languages.</li>
<li><a href="https://github.com/facebookresearch/pytext">pytext</a> - A natural language modeling framework based on PyTorch.</li>
<li><a href="https://github.com/PetrochukM/PyTorch-NLP">PyTorch-NLP</a> - A toolkit enabling rapid deep learning NLP prototyping for research.</li>
<li><a href="https://spacy.io/">spacy</a> - A library for industrial-strength natural language processing in Python and Cython.</li>
<li><a href="https://github.com/stanfordnlp/stanza">Stanza</a> - The Stanford NLP Group&rsquo;s official Python library, supporting 60+ languages.</li>
</ul>
</li>
<li>Chinese
<ul>
<li><a href="https://github.com/fighting41love/funNLP">funNLP</a> - A collection of tools and datasets for Chinese NLP.</li>
<li><a href="https://github.com/fxsjy/jieba">jieba</a> - The most popular Chinese text segmentation library.</li>
<li><a href="https://github.com/lancopku/pkuseg-python">pkuseg-python</a> - A toolkit for Chinese word segmentation in various domains.</li>
<li><a href="https://github.com/isnowfy/snownlp">snownlp</a> - A library for processing Chinese text.</li>
</ul>
</li>
</ul>
<h2 id="network-virtualization">Network Virtualization</h2>
<p><em>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</em></p>
<ul>
<li><a href="https://github.com/mininet/mininet">mininet</a> - A popular network emulator and API written in Python.</li>
<li><a href="https://github.com/napalm-automation/napalm">napalm</a> - Cross-vendor API to manipulate network devices.</li>
<li><a href="https://github.com/noxrepo/pox">pox</a> - A Python-based SDN control applications, such as OpenFlow SDN controllers.</li>
</ul>
<h2 id="news-feed">News Feed</h2>
<p><em>Libraries for building user&rsquo;s activities.</em></p>
<ul>
<li><a href="https://github.com/justquick/django-activity-stream">django-activity-stream</a> - Generating generic activity streams from the actions on your site.</li>
<li><a href="https://github.com/tschellenbach/Stream-Framework">Stream Framework</a> - Building news feed and notification systems using Cassandra and Redis.</li>
</ul>
<h2 id="orm">ORM</h2>
<p><em>Libraries that implement Object-Relational Mapping or data mapping techniques.</em></p>
<ul>
<li>Relational Databases
<ul>
<li><a href="https://docs.djangoproject.com/en/dev/topics/db/models/">Django Models</a> - The Django ORM.</li>
<li><a href="https://www.sqlalchemy.org/">SQLAlchemy</a> - The Python SQL Toolkit and Object Relational Mapper.
<ul>
<li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a></li>
</ul>
</li>
<li><a href="https://github.com/pudo/dataset">dataset</a> - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li>
<li><a href="https://github.com/sdispater/orator">orator</a> - The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li>
<li><a href="https://github.com/encode/orm">orm</a> - An async ORM.</li>
<li><a href="https://github.com/coleifer/peewee">peewee</a> - A small, expressive ORM.</li>
<li><a href="https://github.com/ponyorm/pony/">pony</a> - ORM that provides a generator-oriented interface to SQL.</li>
<li><a href="https://github.com/web2py/pydal/">pydal</a> - A pure Python Database Abstraction Layer.</li>
</ul>
</li>
<li>NoSQL Databases
<ul>
<li><a href="https://github.com/stephenmcd/hot-redis">hot-redis</a> - Rich Python data types for Redis.</li>
<li><a href="https://github.com/MongoEngine/mongoengine">mongoengine</a> - A Python Object-Document-Mapper for working with MongoDB.</li>
<li><a href="https://github.com/pynamodb/PynamoDB">PynamoDB</a> - A Pythonic interface for <a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a>.</li>
<li><a href="https://github.com/kiddouk/redisco">redisco</a> - A Python Library for Simple Models and Containers Persisted in Redis.</li>
</ul>
</li>
</ul>
<h2 id="package-management">Package Management</h2>
<p><em>Libraries for package and dependency management.</em></p>
<ul>
<li><a href="https://pip.pypa.io/en/stable/">pip</a> - The package installer for Python.
<ul>
<li><a href="https://github.com/jazzband/pip-tools">pip-tools</a> - A set of tools to keep your pinned Python dependencies fresh.</li>
<li><a href="https://pypi.org/">PyPI</a></li>
</ul>
</li>
<li><a href="https://github.com/conda/conda/">conda</a> - Cross-platform, Python-agnostic binary package manager.</li>
<li><a href="https://github.com/sdispater/poetry">poetry</a> - Python dependency management and packaging made easy.</li>
</ul>
<h2 id="package-repositories">Package Repositories</h2>
<p><em>Local PyPI repository server and proxies.</em></p>
<ul>
<li><a href="https://github.com/pypa/bandersnatch/">bandersnatch</a> - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li>
<li><a href="https://github.com/devpi/devpi">devpi</a> - PyPI server and packaging/testing/release tool.</li>
<li><a href="https://github.com/jazzband/localshop">localshop</a> - Local PyPI server (custom packages and auto-mirroring of pypi).</li>
<li><a href="https://github.com/pypa/warehouse">warehouse</a> - Next generation Python Package Repository (PyPI).</li>
</ul>
<h2 id="penetration-testing">Penetration Testing</h2>
<p><em>Frameworks and tools for penetration testing.</em></p>
<ul>
<li><a href="https://github.com/Manisso/fsociety">fsociety</a> - A Penetration testing framework.</li>
<li><a href="https://github.com/trustedsec/social-engineer-toolkit">setoolkit</a> - A toolkit for social engineering.</li>
<li><a href="https://github.com/sqlmapproject/sqlmap">sqlmap</a> - Automatic SQL injection and database takeover tool.</li>
</ul>
<h2 id="permissions">Permissions</h2>
<p><em>Libraries that allow or deny users access to data or functionality.</em></p>
<ul>
<li><a href="https://github.com/django-guardian/django-guardian">django-guardian</a> - Implementation of per object permissions for Django 1.2+</li>
<li><a href="https://github.com/dfunckt/django-rules">django-rules</a> - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li>
</ul>
<h2 id="processes">Processes</h2>
<p><em>Libraries for starting and communicating with OS processes.</em></p>
<ul>
<li><a href="https://github.com/amitt001/delegator.py">delegator.py</a> - <a href="https://docs.python.org/3/library/subprocess.html">Subprocesses</a> for Humans 2.0.</li>
<li><a href="https://sarge.readthedocs.io/en/latest/">sarge</a> - Yet another wrapper for subprocess.</li>
<li><a href="https://github.com/amoffat/sh">sh</a> - A full-fledged subprocess replacement for Python.</li>
</ul>
<h2 id="recommender-systems">Recommender Systems</h2>
<p><em>Libraries for building recommender systems.</em></p>
<ul>
<li><a href="https://github.com/spotify/annoy">annoy</a> - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li>
<li><a href="https://github.com/ibayer/fastFM">fastFM</a> - A library for Factorization Machines.</li>
<li><a href="https://github.com/benfred/implicit">implicit</a> - A fast Python implementation of collaborative filtering for implicit datasets.</li>
<li><a href="https://github.com/guestwalk/libffm">libffm</a> - A library for Field-aware Factorization Machine (FFM).</li>
<li><a href="https://github.com/lyst/lightfm">lightfm</a> - A Python implementation of a number of popular recommendation algorithms.</li>
<li><a href="https://github.com/maciejkula/spotlight">spotlight</a> - Deep recommender models using PyTorch.</li>
<li><a href="https://github.com/NicolasHug/Surprise">Surprise</a> - A scikit for building and analyzing recommender systems.</li>
<li><a href="https://github.com/jfkirk/tensorrec">tensorrec</a> - A Recommendation Engine Framework in TensorFlow.</li>
</ul>
<h2 id="refactoring">Refactoring</h2>
<p><em>Refactoring tools and libraries for Python</em></p>
<ul>
<li><a href="http://bicyclerepair.sourceforge.net/">Bicycle Repair Man</a> - Bicycle Repair Man, a refactoring tool for Python.</li>
<li><a href="https://pybowler.io/">Bowler</a> - Safe code refactoring for modern Python.</li>
<li><a href="https://github.com/python-rope/rope">Rope</a> - Rope is a python refactoring library.</li>
</ul>
<h2 id="restful-api">RESTful API</h2>
<p><em>Libraries for building RESTful APIs.</em></p>
<ul>
<li>Django
<ul>
<li><a href="http://www.django-rest-framework.org/">django-rest-framework</a> - A powerful and flexible toolkit to build web APIs.</li>
<li><a href="http://tastypieapi.org/">django-tastypie</a> - Creating delicious APIs for Django apps.</li>
</ul>
</li>
<li>Flask
<ul>
<li><a href="https://github.com/pyeve/eve">eve</a> - REST API framework powered by Flask, MongoDB and good intentions.</li>
<li><a href="https://github.com/flask-api/flask-api">flask-api</a> - Browsable Web APIs for Flask.</li>
<li><a href="https://github.com/flask-restful/flask-restful">flask-restful</a> - Quickly building REST APIs for Flask.</li>
</ul>
</li>
<li>Pyramid
<ul>
<li><a href="https://github.com/Cornices/cornice">cornice</a> - A RESTful framework for Pyramid.</li>
</ul>
</li>
<li>Framework agnostic
<ul>
<li><a href="https://github.com/encode/apistar">apistar</a> - A smart Web API framework, designed for Python 3.</li>
<li><a href="https://github.com/falconry/falcon">falcon</a> - A high-performance framework for building cloud APIs and web app backends.</li>
<li><a href="https://github.com/tiangolo/fastapi">fastapi</a> - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.</li>
<li><a href="https://github.com/hugapi/hug">hug</a> - A Python 3 framework for cleanly exposing APIs.</li>
<li><a href="https://github.com/jeffknupp/sandman2">sandman2</a> - Automated REST APIs for existing database-driven systems.</li>
<li><a href="https://github.com/huge-success/sanic">sanic</a> - A Python 3.6+ web server and web framework that&rsquo;s written to go fast.</li>
<li><a href="https://vibora.io/">vibora</a> - Fast, efficient and asynchronous Web framework inspired by Flask.</li>
</ul>
</li>
</ul>
<h2 id="robotics">Robotics</h2>
<p><em>Libraries for robotics.</em></p>
<ul>
<li><a href="https://github.com/AtsushiSakai/PythonRobotics">PythonRobotics</a> - This is a compilation of various robotics algorithms with visualizations.</li>
<li><a href="http://wiki.ros.org/rospy">rospy</a> - This is a library for ROS (Robot Operating System).</li>
</ul>
<h2 id="rpc-servers">RPC Servers</h2>
<p><em>RPC-compatible servers.</em></p>
<ul>
<li><a href="https://github.com/tomerfiliba/rpyc">RPyC</a> (Remote Python Call) - A transparent and symmetric RPC library for Python</li>
<li><a href="https://github.com/0rpc/zerorpc-python">zeroRPC</a> - zerorpc is a flexible RPC implementation based on <a href="http://zeromq.org/">ZeroMQ</a> and <a href="http://msgpack.org/">MessagePack</a>.</li>
</ul>
<h2 id="science">Science</h2>
<p><em>Libraries for scientific computing. Also see <a href="https://github.com/TomNicholas/Python-for-Scientists">Python-for-Scientists</a>.</em></p>
<ul>
<li><a href="http://www.astropy.org/">astropy</a> - A community Python library for Astronomy.</li>
<li><a href="https://github.com/chapmanb/bcbio-nextgen">bcbio-nextgen</a> - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li>
<li><a href="https://github.com/chapmanb/bcbb">bccb</a> - Collection of useful code related to biological analysis.</li>
<li><a href="http://biopython.org/wiki/Main_Page">Biopython</a> - Biopython is a set of freely available tools for biological computation.</li>
<li><a href="http://cclib.github.io/">cclib</a> - A library for parsing and interpreting the results of computational chemistry packages.</li>
<li><a href="http://colour-science.org/">Colour</a> - Implementing a comprehensive number of colour theory transformations and algorithms.</li>
<li><a href="https://github.com/benedekrozemberczki/karateclub">Karate Club</a> - Unsupervised machine learning toolbox for graph structured data.</li>
<li><a href="https://networkx.github.io/">NetworkX</a> - A high-productivity software for complex networks.</li>
<li><a href="http://nipy.org">NIPY</a> - A collection of neuroimaging toolkits.</li>
<li><a href="http://www.numpy.org/">NumPy</a> - A fundamental package for scientific computing with Python.</li>
<li><a href="https://github.com/obspy/obspy/wiki/">ObsPy</a> - A Python toolbox for seismology.</li>
<li><a href="http://openbabel.org/wiki/Main_Page">Open Babel</a> - A chemical toolbox designed to speak the many languages of chemical data.</li>
<li><a href="http://www.pydy.org/">PyDy</a> - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li>
<li><a href="https://github.com/pymc-devs/pymc3">PyMC</a> - Markov Chain Monte Carlo sampling toolkit.</li>
<li><a href="http://qutip.org/">QuTiP</a> - Quantum Toolbox in Python.</li>
<li><a href="http://www.rdkit.org/">RDKit</a> - Cheminformatics and Machine Learning Software.</li>
<li><a href="https://www.scipy.org/">SciPy</a> - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li>
<li><a href="https://gitlab.com/team-simpy/simpy">SimPy</a> - A process-based discrete-event simulation framework.</li>
<li><a href="https://github.com/statsmodels/statsmodels">statsmodels</a> - Statistical modeling and econometrics in Python.</li>
<li><a href="https://github.com/sympy/sympy">SymPy</a> - A Python library for symbolic mathematics.</li>
<li><a href="https://github.com/quantopian/zipline">Zipline</a> - A Pythonic algorithmic trading library.</li>
</ul>
<h2 id="search">Search</h2>
<p><em>Libraries and software for indexing and performing search queries on data.</em></p>
<ul>
<li><a href="https://github.com/django-haystack/django-haystack">django-haystack</a> - Modular search for Django.</li>
<li><a href="https://github.com/elastic/elasticsearch-dsl-py">elasticsearch-dsl-py</a> - The official high-level Python client for Elasticsearch.</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html">elasticsearch-py</a> - The official low-level Python client for <a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a>.</li>
<li><a href="https://github.com/django-haystack/pysolr">pysolr</a> - A lightweight Python wrapper for <a href="https://lucene.apache.org/solr/">Apache Solr</a>.</li>
<li><a href="http://whoosh.readthedocs.io/en/latest/">whoosh</a> - A fast, pure Python search engine library.</li>
</ul>
<h2 id="serialization">Serialization</h2>
<p><em>Libraries for serializing complex data types</em></p>
<ul>
<li><a href="https://github.com/marshmallow-code/marshmallow">marshmallow</a> - A lightweight library for converting complex objects to and from simple Python datatypes.</li>
<li><a href="https://github.com/TkTech/pysimdjson">pysimdjson</a> - A Python bindings for <a href="https://github.com/lemire/simdjson">simdjson</a>.</li>
<li><a href="https://github.com/python-rapidjson/python-rapidjson">python-rapidjson</a> - A Python wrapper around <a href="https://github.com/Tencent/rapidjson">RapidJSON</a>.</li>
<li><a href="https://github.com/esnme/ultrajson">ultrajson</a> - A fast JSON decoder and encoder written in C with Python bindings.</li>
</ul>
<h2 id="serverless-frameworks">Serverless Frameworks</h2>
<p><em>Frameworks for developing serverless Python code.</em></p>
<ul>
<li><a href="https://github.com/nficano/python-lambda">python-lambda</a> - A toolkit for developing and deploying Python code in AWS Lambda.</li>
<li><a href="https://github.com/Miserlou/Zappa">Zappa</a> - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li>
</ul>
<h2 id="shell">Shell</h2>
<p><em>Shells based on Python.</em></p>
<ul>
<li><a href="https://github.com/xonsh/xonsh/">xonsh</a> - A Python-powered, cross-platform, Unix-gazing shell language and command prompt.</li>
</ul>
<h2 id="specific-formats-processing">Specific Formats Processing</h2>
<p><em>Libraries for parsing and manipulating specific text formats.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/jazzband/tablib">tablib</a> - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li>
</ul>
</li>
<li>Office
<ul>
<li><a href="https://github.com/elapouya/python-docx-template">docxtpl</a> - Editing a docx document by jinja2 template</li>
<li><a href="https://openpyxl.readthedocs.io/en/stable/">openpyxl</a> - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li>
<li><a href="https://github.com/pyexcel/pyexcel">pyexcel</a> - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li>
<li><a href="https://github.com/python-openxml/python-docx">python-docx</a> - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li>
<li><a href="https://github.com/scanny/python-pptx">python-pptx</a> - Python library for creating and updating PowerPoint (.pptx) files.</li>
<li><a href="https://github.com/unoconv/unoconv">unoconv</a> - Convert between any document format supported by LibreOffice/OpenOffice.</li>
<li><a href="https://github.com/jmcnamara/XlsxWriter">XlsxWriter</a> - A Python module for creating Excel .xlsx files.</li>
<li><a href="https://github.com/ZoomerAnalytics/xlwings">xlwings</a> - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li>
<li><a href="https://github.com/python-excel/xlwt">xlwt</a> / <a href="https://github.com/python-excel/xlrd">xlrd</a> - Writing and reading data and formatting information from Excel files.</li>
</ul>
</li>
<li>PDF
<ul>
<li><a href="https://github.com/euske/pdfminer">PDFMiner</a> - A tool for extracting information from PDF documents.</li>
<li><a href="https://github.com/mstamy2/PyPDF2">PyPDF2</a> - A library capable of splitting, merging and transforming PDF pages.</li>
<li><a href="https://www.reportlab.com/opensource/">ReportLab</a> - Allowing Rapid creation of rich PDF documents.</li>
</ul>
</li>
<li>Markdown
<ul>
<li><a href="https://github.com/lepture/mistune">Mistune</a> - Fastest and full featured pure Python parsers of Markdown.</li>
<li><a href="https://github.com/waylan/Python-Markdown">Python-Markdown</a> - A Python implementation of John Gruber’s Markdown.</li>
</ul>
</li>
<li>YAML
<ul>
<li><a href="http://pyyaml.org/">PyYAML</a> - YAML implementations for Python.</li>
</ul>
</li>
<li>CSV
<ul>
<li><a href="https://github.com/wireservice/csvkit">csvkit</a> - Utilities for converting to and working with CSV.</li>
</ul>
</li>
<li>Archive
<ul>
<li><a href="https://github.com/mitsuhiko/unp">unp</a> - A command line tool that can unpack archives easily.</li>
</ul>
</li>
</ul>
<h2 id="static-site-generator">Static Site Generator</h2>
<p><em>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</em></p>
<ul>
<li><a href="https://github.com/lektor/lektor">lektor</a> - An easy to use static CMS and blog engine.</li>
<li><a href="https://github.com/mkdocs/mkdocs/">mkdocs</a> - Markdown friendly documentation generator.</li>
<li><a href="https://github.com/sunainapai/makesite">makesite</a> - Simple, lightweight, and magic-free static site/blog generator (&lt; 130 lines).</li>
<li><a href="https://github.com/getnikola/nikola">nikola</a> - A static website and blog generator.</li>
<li><a href="https://github.com/getpelican/pelican">pelican</a> - Static site generator that supports Markdown and reST syntax.</li>
</ul>
<h2 id="tagging">Tagging</h2>
<p><em>Libraries for tagging items.</em></p>
<ul>
<li><a href="https://github.com/jazzband/django-taggit">django-taggit</a> - Simple tagging for Django.</li>
</ul>
<h2 id="task-queues">Task Queues</h2>
<p><em>Libraries for working with task queues.</em></p>
<ul>
<li><a href="https://docs.celeryproject.org/en/stable/">celery</a> - An asynchronous task queue/job queue based on distributed message passing.</li>
<li><a href="https://github.com/Bogdanp/dramatiq">dramatiq</a> - A fast and reliable background task processing library for Python 3.</li>
<li><a href="https://github.com/coleifer/huey">huey</a> - Little multi-threaded task queue.</li>
<li><a href="https://github.com/pricingassistant/mrq">mrq</a> - A distributed worker task queue in Python using Redis &amp; gevent.</li>
<li><a href="https://github.com/rq/rq">rq</a> - Simple job queues for Python.</li>
</ul>
<h2 id="template-engine">Template Engine</h2>
<p><em>Libraries and tools for templating and lexing.</em></p>
<ul>
<li><a href="https://genshi.edgewall.org/">Genshi</a> - Python templating toolkit for generation of web-aware output.</li>
<li><a href="https://github.com/pallets/jinja">Jinja2</a> - A modern and designer friendly templating language.</li>
<li><a href="http://www.makotemplates.org/">Mako</a> - Hyperfast and lightweight templating for the Python platform.</li>
</ul>
<h2 id="testing">Testing</h2>
<p><em>Libraries for testing codebases and generating test data.</em></p>
<ul>
<li>Testing Frameworks
<ul>
<li><a href="https://github.com/HypothesisWorks/hypothesis">hypothesis</a> - Hypothesis is an advanced Quickcheck style property based testing library.</li>
<li><a href="https://github.com/nose-devs/nose2">nose2</a> - The successor to <code>nose</code>, based on `unittest2.</li>
<li><a href="https://docs.pytest.org/en/latest/">pytest</a> - A mature full-featured Python testing tool.</li>
<li><a href="https://github.com/robotframework/robotframework">Robot Framework</a> - A generic test automation framework.</li>
<li><a href="https://docs.python.org/3/library/unittest.html">unittest</a> - (Python standard library) Unit testing framework.</li>
</ul>
</li>
<li>Test Runners
<ul>
<li><a href="https://github.com/CleanCut/green">green</a> - A clean, colorful test runner.</li>
<li><a href="http://nestorsalceda.github.io/mamba/">mamba</a> - The definitive testing tool for Python. Born under the banner of BDD.</li>
<li><a href="https://tox.readthedocs.io/en/latest/">tox</a> - Auto builds and tests distributions in multiple Python versions</li>
</ul>
</li>
<li>GUI / Web Testing
<ul>
<li><a href="https://github.com/locustio/locust">locust</a> - Scalable user load testing tool written in Python.</li>
<li><a href="https://github.com/asweigart/pyautogui">PyAutoGUI</a> - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li>
<li><a href="https://github.com/kiwicom/schemathesis">Schemathesis</a> - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications.</li>
<li><a href="https://pypi.org/project/selenium/">Selenium</a> - Python bindings for <a href="http://www.seleniumhq.org/">Selenium</a> WebDriver.</li>
<li><a href="https://github.com/seatgeek/sixpack">sixpack</a> - A language-agnostic A/B Testing framework.</li>
<li><a href="https://github.com/cobrateam/splinter">splinter</a> - Open source tool for testing web applications.</li>
</ul>
</li>
<li>Mock
<ul>
<li><a href="https://pypi.org/project/doublex/">doublex</a> - Powerful test doubles framework for Python.</li>
<li><a href="https://github.com/spulec/freezegun">freezegun</a> - Travel through time by mocking the datetime module.</li>
<li><a href="https://github.com/patrys/httmock">httmock</a> - A mocking library for requests for Python 2.6+ and 3.2+.</li>
<li><a href="https://github.com/gabrielfalcao/HTTPretty">httpretty</a> - HTTP request mock tool for Python.</li>
<li><a href="https://docs.python.org/3/library/unittest.mock.html">mock</a> - (Python standard library) A mocking and patching library.</li>
<li><a href="https://github.com/mindflayer/python-mocket">mocket</a> - A socket mock framework with gevent/asyncio/SSL support.</li>
<li><a href="https://github.com/getsentry/responses">responses</a> - A utility library for mocking out the requests Python library.</li>
<li><a href="https://github.com/kevin1024/vcrpy">VCR.py</a> - Record and replay HTTP interactions on your tests.</li>
</ul>
</li>
<li>Object Factories
<ul>
<li><a href="https://github.com/FactoryBoy/factory_boy">factory_boy</a> - A test fixtures replacement for Python.</li>
<li><a href="https://github.com/klen/mixer">mixer</a> - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc.</li>
<li><a href="https://github.com/vandersonmota/model_mommy">model_mommy</a> - Creating random fixtures for testing in Django.</li>
</ul>
</li>
<li>Code Coverage
<ul>
<li><a href="https://pypi.org/project/coverage/">coverage</a> - Code coverage measurement.</li>
</ul>
</li>
<li>Fake Data
<ul>
<li><a href="https://github.com/emirozer/fake2db">fake2db</a> - Fake database generator.</li>
<li><a href="https://github.com/joke2k/faker">faker</a> - A Python package that generates fake data.</li>
<li><a href="https://github.com/lk-geimfari/mimesis">mimesis</a> - is a Python library that help you generate fake data.</li>
<li><a href="https://pypi.org/project/radar/">radar</a> - Generate random datetime / time.</li>
</ul>
</li>
</ul>
<h2 id="text-processing">Text Processing</h2>
<p><em>Libraries for parsing and manipulating plain texts.</em></p>
<ul>
<li>General
<ul>
<li><a href="https://github.com/chardet/chardet">chardet</a> - Python 2/3 compatible character encoding detector.</li>
<li><a href="https://docs.python.org/3/library/difflib.html">difflib</a> - (Python standard library) Helpers for computing deltas.</li>
<li><a href="https://github.com/LuminosoInsight/python-ftfy">ftfy</a> - Makes Unicode text less broken and more consistent automagically.</li>
<li><a href="https://github.com/seatgeek/fuzzywuzzy">fuzzywuzzy</a> - Fuzzy String Matching.</li>
<li><a href="https://github.com/ztane/python-Levenshtein/">Levenshtein</a> - Fast computation of Levenshtein distance and string similarity.</li>
<li><a href="https://github.com/vinta/pangu.py">pangu.py</a> - Paranoid text spacing.</li>
<li><a href="https://github.com/pwaller/pyfiglet">pyfiglet</a> - An implementation of figlet written in Python.</li>
<li><a href="https://github.com/mozillazg/python-pinyin">pypinyin</a> - Convert Chinese hanzi (漢字) to pinyin (拼音).</li>
<li><a href="https://github.com/orsinium/textdistance">textdistance</a> - Compute distance between sequences with 30+ algorithms.</li>
<li><a href="https://pypi.org/project/Unidecode/">unidecode</a> - ASCII transliterations of Unicode text.</li>
</ul>
</li>
<li>Slugify
<ul>
<li><a href="https://github.com/dimka665/awesome-slugify">awesome-slugify</a> - A Python slugify library that can preserve unicode.</li>
<li><a href="https://github.com/un33k/python-slugify">python-slugify</a> - A Python slugify library that translates unicode to ASCII.</li>
<li><a href="https://github.com/mozilla/unicode-slugify">unicode-slugify</a> - A slugifier that generates unicode slugs with Django as a dependency.</li>
</ul>
</li>
<li>Unique identifiers
<ul>
<li><a href="https://github.com/davidaurelio/hashids-python">hashids</a> - Implementation of <a href="http://hashids.org">hashids</a> in Python.</li>
<li><a href="https://github.com/skorokithakis/shortuuid">shortuuid</a> - A generator library for concise, unambiguous and URL-safe UUIDs.</li>
</ul>
</li>
<li>Parser
<ul>
<li><a href="https://github.com/dabeaz/ply">ply</a> - Implementation of lex and yacc parsing tools for Python.</li>
<li><a href="http://pygments.org/">pygments</a> - A generic syntax highlighter.</li>
<li><a href="https://github.com/pyparsing/pyparsing">pyparsing</a> - A general purpose framework for generating parsers.</li>
<li><a href="https://github.com/derek73/python-nameparser">python-nameparser</a> - Parsing human names into their individual components.</li>
<li><a href="https://github.com/daviddrysdale/python-phonenumbers">python-phonenumbers</a> - Parsing, formatting, storing and validating international phone numbers.</li>
<li><a href="https://github.com/selwin/python-user-agents">python-user-agents</a> - Browser user agent parser.</li>
<li><a href="https://github.com/andialbrecht/sqlparse">sqlparse</a> - A non-validating SQL parser.</li>
</ul>
</li>
</ul>
<h2 id="third-party-apis">Third-party APIs</h2>
<p><em>Libraries for accessing third party services APIs. Also see <a href="https://github.com/realpython/list-of-python-api-wrappers">List of Python API Wrappers and Libraries</a>.</em></p>
<ul>
<li><a href="https://libcloud.apache.org/">apache-libcloud</a> - One Python library for all clouds.</li>
<li><a href="https://github.com/boto/boto3">boto3</a> - Python interface to Amazon Web Services.</li>
<li><a href="https://github.com/istrategylabs/django-wordpress">django-wordpress</a> - WordPress models and views for Django.</li>
<li><a href="https://github.com/mobolic/facebook-sdk">facebook-sdk</a> - Facebook Platform Python SDK.</li>
<li><a href="https://github.com/google/google-api-python-client">google-api-python-client</a> - Google APIs Client Library for Python.</li>
<li><a href="https://github.com/burnash/gspread">gspread</a> - Google Spreadsheets Python API.</li>
<li><a href="https://github.com/ryanmcgrath/twython">twython</a> - A Python wrapper for the Twitter API.</li>
</ul>
<h2 id="url-manipulation">URL Manipulation</h2>
<p><em>Libraries for parsing URLs.</em></p>
<ul>
<li><a href="https://github.com/gruns/furl">furl</a> - A small Python library that makes parsing and manipulating URLs easy.</li>
<li><a href="https://github.com/codeinthehole/purl">purl</a> - A simple, immutable URL class with a clean API for interrogation and manipulation.</li>
<li><a href="https://github.com/ellisonleao/pyshorteners">pyshorteners</a> - A pure Python URL shortening lib.</li>
<li><a href="https://github.com/marshmallow-code/webargs">webargs</a> - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.</li>
</ul>
<h2 id="video">Video</h2>
<p><em>Libraries for manipulating video and GIFs.</em></p>
<ul>
<li><a href="https://zulko.github.io/moviepy/">moviepy</a> - A module for script-based movie editing with many formats, including animated GIFs.</li>
<li><a href="https://github.com/aizvorski/scikit-video">scikit-video</a> - Video processing routines for SciPy.</li>
<li><a href="https://github.com/abhiTronix/vidgear">vidgear</a> - Most Powerful multi-threaded Video Processing framework.</li>
</ul>
<h2 id="web-asset-management">Web Asset Management</h2>
<p><em>Tools for managing, compressing and minifying website assets.</em></p>
<ul>
<li><a href="https://github.com/django-compressor/django-compressor">django-compressor</a> - Compresses linked and inline JavaScript or CSS into a single cached file.</li>
<li><a href="https://github.com/jazzband/django-pipeline">django-pipeline</a> - An asset packaging library for Django.</li>
<li><a href="https://github.com/jschneier/django-storages">django-storages</a> - A collection of custom storage back ends for Django.</li>
<li><a href="http://www.fanstatic.org/en/latest/">fanstatic</a> - Packages, optimizes, and serves static file dependencies as Python packages.</li>
<li><a href="http://wimleers.com/fileconveyor">fileconveyor</a> - A daemon to detect and sync files to CDNs, S3 and FTP.</li>
<li><a href="https://github.com/miracle2k/flask-assets">flask-assets</a> - Helps you integrate webassets into your Flask app.</li>
<li><a href="https://github.com/miracle2k/webassets">webassets</a> - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li>
</ul>
<h2 id="web-content-extracting">Web Content Extracting</h2>
<p><em>Libraries for extracting web contents.</em></p>
<ul>
<li><a href="https://github.com/Alir3z4/html2text">html2text</a> - Convert HTML to Markdown-formatted text.</li>
<li><a href="https://github.com/michaelhelmick/lassie">lassie</a> - Web Content Retrieval for Humans.</li>
<li><a href="https://github.com/coleifer/micawber">micawber</a> - A small library for extracting rich content from URLs.</li>
<li><a href="https://github.com/codelucas/newspaper">newspaper</a> - News extraction, article extraction and content curation in Python.</li>
<li><a href="https://github.com/buriy/python-readability">python-readability</a> - Fast Python port of arc90&rsquo;s readability tool.</li>
<li><a href="https://github.com/psf/requests-html">requests-html</a> - Pythonic HTML Parsing for Humans.</li>
<li><a href="https://github.com/miso-belica/sumy">sumy</a> - A module for automatic summarization of text documents and HTML pages.</li>
<li><a href="https://github.com/deanmalmgren/textract">textract</a> - Extract text from any document, Word, PowerPoint, PDFs, etc.</li>
<li><a href="https://github.com/gaojiuli/toapi">toapi</a> - Every web site provides APIs.</li>
</ul>
<h2 id="web-crawling">Web Crawling</h2>
<p><em>Libraries to automate web scraping.</em></p>
<ul>
<li><a href="https://github.com/chineking/cola">cola</a> - A distributed crawling framework.</li>
<li><a href="https://pythonhosted.org/feedparser/">feedparser</a> - Universal feed parser.</li>
<li><a href="https://github.com/lorien/grab">grab</a> - Site scraping framework.</li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup">MechanicalSoup</a> - A Python library for automating interaction with websites.</li>
<li><a href="https://github.com/scrapinghub/portia">portia</a> - Visual scraping for Scrapy.</li>
<li><a href="https://github.com/binux/pyspider">pyspider</a> - A powerful spider system.</li>
<li><a href="https://github.com/jmcarp/robobrowser">robobrowser</a> - A simple, Pythonic library for browsing the web without a standalone web browser.</li>
<li><a href="https://scrapy.org/">scrapy</a> - A fast high-level screen scraping and web crawling framework.</li>
</ul>
<h2 id="web-frameworks">Web Frameworks</h2>
<p><em>Traditional full stack web frameworks. Also see <a href="https://github.com/vinta/awesome-python#restful-api">RESTful API</a>.</em></p>
<ul>
<li>Synchronous
<ul>
<li><a href="https://www.djangoproject.com/">Django</a> - The most popular web framework in Python.
<ul>
<li><a href="https://github.com/shahraizali/awesome-django">awesome-django</a></li>
<li><a href="https://github.com/wsvincent/awesome-django">awesome-django</a></li>
</ul>
</li>
<li><a href="http://flask.pocoo.org/">Flask</a> - A microframework for Python.
<ul>
<li><a href="https://github.com/humiaozuzu/awesome-flask">awesome-flask</a></li>
</ul>
</li>
<li><a href="https://pylonsproject.org/">Pyramid</a> - A small, fast, down-to-earth, open source Python web framework.
<ul>
<li><a href="https://github.com/uralbash/awesome-pyramid">awesome-pyramid</a></li>
</ul>
</li>
<li><a href="https://github.com/MasoniteFramework/masonite">Masonite</a> - The modern and developer centric Python web framework.</li>
</ul>
</li>
<li>Asynchronous
<ul>
<li><a href="http://www.tornadoweb.org/en/latest/">Tornado</a> - A web framework and asynchronous networking library.</li>
</ul>
</li>
</ul>
<h2 id="websocket">WebSocket</h2>
<p><em>Libraries for working with WebSocket.</em></p>
<ul>
<li><a href="https://github.com/crossbario/autobahn-python">autobahn-python</a> - WebSocket &amp; WAMP for Python on Twisted and <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>.</li>
<li><a href="https://github.com/django/channels">channels</a> - Developer-friendly asynchrony for Django.</li>
<li><a href="https://github.com/aaugustin/websockets">websockets</a> - A library for building WebSocket servers and clients with a focus on correctness and simplicity.</li>
</ul>
<h2 id="wsgi-servers">WSGI Servers</h2>
<p><em>WSGI-compatible web servers.</em></p>
<ul>
<li><a href="https://github.com/jonashaag/bjoern">bjoern</a> - Asynchronous, very fast and written in C.</li>
<li><a href="https://github.com/benoitc/gunicorn">gunicorn</a> - Pre-forked, ported from Ruby&rsquo;s Unicorn project.</li>
<li><a href="https://uwsgi-docs.readthedocs.io/en/latest/">uWSGI</a> - A project aims at developing a full stack for building hosting services, written in C.</li>
<li><a href="https://github.com/Pylons/waitress">waitress</a> - Multi-threaded, powers Pyramid.</li>
<li><a href="https://github.com/pallets/werkzeug">werkzeug</a> - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li>
</ul>
<h1 id="resources">Resources</h1>
<p>Where to discover learning resources or new Python libraries.</p>
<h2 id="books">Books</h2>
<ul>
<li><a href="https://www.oreilly.com/library/view/fluent-python/9781491946237/">Fluent Python</a></li>
<li><a href="https://greenteapress.com/wp/think-python-2e/">Think Python</a></li>
</ul>
<h2 id="websites">Websites</h2>
<ul>
<li>Tutorials
<ul>
<li><a href="https://www.fullstackpython.com/">Full Stack Python</a></li>
<li><a href="https://www.pythoncheatsheet.org/">Python Cheatsheet</a></li>
<li><a href="https://realpython.com">Real Python</a></li>
<li><a href="https://docs.python-guide.org/">The Hitchhiker’s Guide to Python</a></li>
<li><a href="https://github.com/huangsam/ultimate-python">Ultimate Python study guide</a></li>
</ul>
</li>
<li>Libraries
<ul>
<li><a href="https://python.libhunt.com/">Awesome Python @LibHunt</a></li>
</ul>
</li>
<li>Others
<ul>
<li><a href="https://python.zeef.com/alan.richmond">Python ZEEF</a></li>
<li><a href="https://news.python.sc/">Pythonic News</a></li>
<li><a href="https://github.com/satwikkansal/wtfpython">What the f*ck Python!</a></li>
</ul>
</li>
</ul>
<h2 id="newsletters">Newsletters</h2>
<ul>
<li><a href="http://python.libhunt.com/newsletter">Awesome Python Newsletter</a></li>
<li><a href="http://pycoders.com/">Pycoder&rsquo;s Weekly</a></li>
<li><a href="https://realpython.com/python-tricks/">Python Tricks</a></li>
<li><a href="http://www.pythonweekly.com/">Python Weekly</a></li>
</ul>
<h2 id="podcasts">Podcasts</h2>
<ul>
<li><a href="https://djangochat.com/">Django Chat</a></li>
<li><a href="https://podcastinit.com/">Podcast.__init__</a></li>
<li><a href="https://pythonbytes.fm">Python Bytes</a></li>
<li><a href="https://runninginproduction.com/">Running in Production</a></li>
<li><a href="https://talkpython.fm/">Talk Python To Me</a></li>
<li><a href="https://testandcode.com/">Test and Code</a></li>
<li><a href="https://realpython.com/podcasts/rpp/">The Real Python Podcast</a></li>
</ul>
<h1 id="contributing">Contributing</h1>
<p>Your contributions are always welcome! Please take a look at the <a href="https://github.com/vinta/awesome-python/blob/master/CONTRIBUTING.md">contribution guidelines</a> first.</p>
<p>I will keep some pull requests open if I&rsquo;m not sure whether those libraries are awesome, you could <a href="https://github.com/vinta/awesome-python/pulls">vote for them</a> by adding 👍 to them. Pull requests will be merged when their votes reach <strong>20</strong>.</p>
<hr>
<p>If you have any question about this opinionated list, do not hesitate to contact me <a href="https://twitter.com/VintaChen">@VintaChen</a> on Twitter or open an issue on GitHub.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python 3 tricks</title>
      <link>https://shenlong616.github.io/posts/github/alexghergh/python-tricks/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/alexghergh/python-tricks/</guid>
      <description>Some cool Python tricks</description>
      <content:encoded><![CDATA[<p><strong><em>Disclaimer:</em></strong> This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.</p>
<h3 id="looping-over-a-range-of-numbers">Looping over a range of numbers</h3>
<p>Using <code>range()</code> is better than using a list (ex. <code>[1, 2, 3]</code>), because the list takes up memory space, whereas the <code>range()</code> function generates values on demand, thus taking a fixed amount of memory whatever the size of the elements is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>takes the same memory space as:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> This function used to create a list in python2, and <code>xrange()</code> used to do what <code>range()</code> currently does, but it got changed, so <code>range()</code> in python3 is <code>xrange()</code> in python2.</p>
<h3 id="looping-backwards">Looping backwards</h3>
<p>Use the function <code>reversed()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints rust, kotlin, c++, java, python, c</span>
</span></span></code></pre></div><h3 id="looping-over-a-collection-and-indices">Looping over a collection and indices</h3>
<p>Use the function <code>enumerate()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">lang</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">lang</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0 --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 --&gt; python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 --&gt; java</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3 --&gt; c++</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4 --&gt; kotlin</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 5 --&gt; rust</span>
</span></span></code></pre></div><h3 id="looping-over-two-collections">Looping over two collections</h3>
<p>Use the function <code>zip()</code>. It returns tuples of the elements until one of the iterables is exahusted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">number</span><span class="p">,</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">lang</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 --&gt; python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3 --&gt; java</span>
</span></span></code></pre></div><p><strong>Note:</strong> It takes any number of iterables and &ldquo;zips&rdquo; them into tuples.</p>
<p><strong>Note 2:</strong> It&rsquo;s important to note that it generates tuples on demand, so it reuses memory space (it used to create a third list in python2, and <code>izip()</code> used to do what <code>zip()</code> does now in python3).</p>
<h3 id="looping-in-sorted-order">Looping in sorted order</h3>
<p>Use the function <code>sorted()</code> or the method <code>sort()</code> of iterables.</p>
<p>By default, it sorts the iterable in ascending order:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints c c++ java kotlin python rust</span>
</span></span></code></pre></div><p>The second method sorts the iterable IN-PLACE, whilst the first returns a different iterable.</p>
<p>Both the functions can take 2 extra parameters which can specify a comparison function and if the iterable should be reversed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">langs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints kotlin python java rust c++ c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># notice that kotlin and python might be interchanged because they have the same size, same java and rust</span>
</span></span></code></pre></div><h3 id="partial-functions">Partial functions</h3>
<p>A partial function is a function who has some parameters &ldquo;frozen&rdquo;, in the sense that they are preset. The other parameters must be given when the partial function is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">z</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_func</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># assign (preset) 2 to x, 3 to y</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">#   equivalent to func(2, 3, 3)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   prints 17</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1">#   equivalent to func(2, 3, 4)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   prints 20</span>
</span></span></code></pre></div><h3 id="fastest-way-to-format-multiple-strings">Fastest way to format multiple strings</h3>
<p>Going from fastest to slowest, they are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="s1"> </span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s1">&#39;</span>  <span class="c1"># fastest</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="si">%s</span><span class="s1"> </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Template</span><span class="p">(</span><span class="s1">&#39;$s $t&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>  <span class="c1"># slowest</span>
</span></span></code></pre></div><p><strong>Note:</strong> f-strings were added in Python 3.6.</p>
<h3 id="iterating-until-a-sentinel-value">Iterating until a sentinel value</h3>
<p>This method has 2 forms:</p>
<ol>
<li><code>iter(iterable)</code> - this form simply returns an iterator from the iterable. You can call <code>next()</code> on the iterator and iterate through the iterable.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ir</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">))</span> <span class="c1"># prints c</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">))</span> <span class="c1"># prints python</span>
</span></span></code></pre></div><ol start="2">
<li><code>iter(callable, sentinel)</code> - this form executes the function <code>callable</code> until it returns <code>sentinel</code> value.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">langs</span> <span class="o">=</span> <span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="n">langs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ir</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 4</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># raise StopIteration</span>
</span></span></code></pre></div><p>Read 80 characters from file <code>f</code> into <code>line</code> and append to <code>text</code> until <code>f.read()</code> returns <code>''</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">partial</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="mi">80</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="for-else-in-python">For else in Python</h3>
<p>Search a certain value in an iterable and do something if it is not there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="n">langs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">lang</span> <span class="o">==</span> <span class="s1">&#39;scala&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;We found Scala!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Scala is not in the list...&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> Careful if you ever come back to this kind of code. Don&rsquo;t indent the <code>else</code> statement by accident!!!</p>
<h3 id="looping-over-dictionary-keys">Looping over dictionary keys</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># cannot mutate dictionary here</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># free to mutate the keys and values</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="s1">&#39;foo&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>d.keys()</code> used to make a list copy of the keys, so there was no problem iterating and mutating the original dictionary at the same time. In modern Python3, <code>d.keys()</code> returns an iterable and can no longer be used to iterate and mutate a dictionary at the same time. To go around this, just wrap the method into a list as in the example.</p>
<p><strong>Note 2:</strong> There is an &lsquo;alternative&rsquo; to this, but it has worse performance and memory usage:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t do this, performance is bad as it copies every element in a dictionary and can be really bad for really big dictionaries</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="o">!=</span> <span class="s1">&#39;foo&#39;</span><span class="p">}</span>
</span></span></code></pre></div><h3 id="looping-over-dictionary-keys-and-values">Looping over dictionary keys and values</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>The <code>items()</code> method returns and iterator, so it uses the same amount of memory no matter how big the dictionary is.</p>
<p><strong>Note:</strong> In python2, the <code>items()</code> method used to return a list of tuples, and the <code>iteritems()</code> used to do what <code>items()</code> does now in python3.</p>
<h3 id="construct-a-dictionary-from-2-iterables">Construct a dictionary from 2 iterables</h3>
<p>Use the <code>zip()</code> method to pack 2 iterables into a zip object, then use the <code>dict()</code> method to make that into a dictionary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">langs</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>    <span class="c1"># prints {&#39;c&#39;: &#39;blue&#39;, &#39;python&#39;: &#39;green&#39;, &#39;java&#39;: &#39;red&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">colors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>    <span class="c1"># prints {1: &#39;blue&#39;, 2: &#39;green&#39;, 3: &#39;red&#39;}</span>
</span></span></code></pre></div><h3 id="populating-a-dictionary-with-default-data-counting-with-dictionary">Populating a dictionary with default data (Counting with dictionary)</h3>
<p>Use the <code>defaultdict()</code> method imported from <code>collections</code>. When a key is not in the dictionary, it creates a new key that has the default value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {&#39;blue&#39;: 1, &#39;green&#39;: 2, &#39;red&#39;: 3}</span>
</span></span></code></pre></div><p><strong>Note:</strong> This is a faster approach than <code>setdefault()</code> on most cases and faster than <code>get()</code> in all cases. Also, <code>defaultdict()</code> seems to work faster on native types like <code>int</code> or <code>string</code> and slower on <code>dict</code> or <code>list</code>. That being said, there are times when you cannot use <code>defaultdict()</code> and have to use either <code>setdefault()</code> or <code>get()</code>, for example when the default value of a certain key depends on the key itself, so <code>defaultdict()</code> cannot be used from the beginning to have a default value for every new key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">color</span> <span class="o">==</span> <span class="s1">&#39;red&#39;</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>    <span class="c1"># prints {&#39;blue&#39;: 1, &#39;green&#39;: 2, &#39;red&#39;: 5}</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> A case where <code>get()</code> accomplishes nicely what <code>setdefault()</code> and <code>defaultdict()</code> would do in a more complicated manner is when you have to return a default value from a dictionary if the key is not in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2</span><span class="p">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">3</span><span class="p">:</span> <span class="s1">&#39;Carla&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s1">&#39;Hi, </span><span class="si">{</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="s2">&#34;random person&#34;</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="c1"># prints Hi, Alice</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># prints Hi, random person</span>
</span></span></code></pre></div><h3 id="creating-a-list-with-n-elements">Creating a list with n elements</h3>
<p>Say you want to create a list with 100 elements of 0. You can just do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="ternary-operator-in-python">Ternary operator in Python</h3>
<p>This:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>can be written like this in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="grouping-data-with-dictionaries">Grouping data with dictionaries</h3>
<p>Say you want to group the items in a list based on some comparison function, for example <code>len()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;julia&#39;</span><span class="p">,</span> <span class="s1">&#39;mark&#39;</span><span class="p">,</span> <span class="s1">&#39;thomas&#39;</span><span class="p">,</span> <span class="s1">&#39;rachel&#39;</span><span class="p">,</span> <span class="s1">&#39;alex&#39;</span><span class="p">,</span> <span class="s1">&#39;maria&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {5: [&#39;julia&#39;, &#39;maria&#39;], 4: [&#39;mark&#39;, &#39;alex&#39;], 6: [&#39;thomas&#39;, &#39;rachel&#39;]}</span>
</span></span></code></pre></div><p>All you have to do to group based on some other function is change the <code>key</code> to something else.</p>
<h3 id="unpacking-sequences">Unpacking sequences</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="s1">&#39;alex&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span>         <span class="c1"># same as p = (&#39;alex&#39;, &#39;blue&#39;, 20, &#39;c&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">p</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>                            <span class="c1"># prints a tuple - (&#39;alex&#39;, &#39;blue&#39;, 20, &#39;c&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>       <span class="c1"># prints alex blue 20 c</span>
</span></span></code></pre></div><p><strong>Note:</strong> In the same manner, swapping 2 variables in python might be the most elegant way out of all the languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># swap x and y</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="c1"># prints 2 1</span>
</span></span></code></pre></div><h3 id="concatenating-strings">Concatenating strings</h3>
<p>Use the <code>join()</code> method to concatenate strings from an iterable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># join the strings from langs, having &#39;, &#39; as separator</span>
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="c1"># prints c, python, java, c++, kotlin, rust</span>
</span></span></code></pre></div><h3 id="atomicity-of-builtin-data-types">Atomicity of builtin data types</h3>
<p>Most (!not all) of the builtin data types methods are implemented using C function calls, so that makes it atomic.</p>
<p>For a better explanaton check <a href="https://webcache.googleusercontent.com/search?q=cache:9ATPT7NPHg0J:effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm+&amp;cd=4&amp;hl=en&amp;ct=clnk&amp;gl=in">here</a>.</p>
<p>Also, dictionaries&rsquo; <code>popitem()</code> is atomic, while <code>pop()</code> may not, based on the key type (if the key is not a builtin data type, Python has to call that object&rsquo;s <code>__hash__()</code> implementation), so better use <code>popitem()</code> where atomicity is needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">d</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># foo --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># bar --&gt; java</span>
</span></span><span class="line"><span class="cl"><span class="c1"># baz --&gt; rust</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># d is empty at the end</span>
</span></span></code></pre></div><p><strong>Note:</strong> If unsure, don&rsquo;t hesitate to use mutexes!</p>
<h3 id="linking-and-overriding-dictionaries-with-defaults">Linking and overriding dictionaries with defaults</h3>
<p>When you have a dictionary that has some default values and you want to override it with another dictionary, use <code>ChainMap()</code>. <code>ChainMap()</code> has the advantage that it doesn&rsquo;t copy anything, it just &ldquo;links&rdquo; the dictionaries, using the initial memory (this also means that any change in the initial dictionary will be reflected in the <code>ChainMap()</code> as well).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">ChainMap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">overwritten</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;barn&#39;</span><span class="p">:</span> <span class="s1">&#39;c++&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">ChainMap</span><span class="p">(</span><span class="n">overwritten</span><span class="p">,</span> <span class="n">defaults</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {&#39;foo&#39;: &#39;rust&#39;, &#39;barn&#39;: &#39;c++&#39;, &#39;bar&#39;: &#39;c&#39;}</span>
</span></span></code></pre></div><p><strong>Note:</strong> Don&rsquo;t use <code>copy()</code> and then <code>update()</code>, it is really bad performance-wise and can be replaced in 99% of the cases by a <code>ChainMap()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d1</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d2</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;barn&#39;</span><span class="p">:</span> <span class="s1">&#39;c++&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t do this!!</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> For a better example when this is useful, see <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap">this</a>.</p>
<h3 id="ordered-dictionary">Ordered dictionary</h3>
<p>A dictionary is not guaranteed to preserve the order of insertion. It actually optimizes keys for faster lookup. However there is one way to have a dictionary preserve insertion order, using <code>OrderedDict()</code> from <code>collections</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;bar&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;baz&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>  <span class="c1"># prints {&#39;bar&#39;: &#39;c&#39;, &#39;foo&#39;: &#39;java&#39;, &#39;baz&#39;: &#39;rust&#39;}</span>
</span></span></code></pre></div><p><strong>Note:</strong> Since Python 3.7, regular <code>dict</code>s have guaranteed ordering. More <a href="https://docs.python.org/3/library/stdtypes.html#dict">here</a>. Note however that they don&rsquo;t <strong><em>completely</em></strong> replace <code>OrderedDict</code>s, since they have extra features:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>   <span class="c1"># returns True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="p">)</span>   <span class="c1"># returns False since OrderedDicts are order-sensitive, and regular dicts are not</span>
</span></span></code></pre></div><p>Also, <code>OrderedDict</code>s have methods to change order of elements, while regular <code>dict</code>s don&rsquo;t.</p>
<h3 id="using-deque-instead-of-a-list-when-updating">Using deque instead of a list when updating</h3>
<p>Deques (double ended queues) are really fast in python3. They are implemented using doubly-linked lists, so inserting and removing at the end or at the beginning is O(1) complexity. Lists are implemented as normal arrays, so they have to sometimes <code>realloc()</code> to accomodate for the number of elements (only sometimes because by default it <code>realloc()</code>s more memory at the time than necessary&rsquo;), so that makes them have O(n) complexity when inserting or removing at the beginning because they have to copy the rest of the elements.</p>
<p>Generally, updating a sequence is MUCH faster when using a <code>deque()</code> as opposed to using a <code>list()</code> (though keep in mind that accessing a random element in a <code>deque()</code> is expensive, whereas accessing a random element in a <code>list()</code> is O(1)).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Wrong!</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;scala&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Right!</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">popleft</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;scala&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="temporary-contexts">Temporary contexts</h3>
<p>Usually there is the case that code like this is written in other languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">getcontext</span><span class="p">,</span> <span class="n">setcontext</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">old_context</span> <span class="o">=</span> <span class="n">getcontext</span><span class="p">()</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">getcontext</span><span class="p">()</span><span class="o">.</span><span class="n">prec</span> <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="mi">355</span><span class="p">)</span> <span class="o">/</span> <span class="n">Decimal</span><span class="p">(</span><span class="mi">113</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">setcontext</span><span class="p">(</span><span class="n">old_context</span><span class="p">)</span>
</span></span></code></pre></div><p>This can easily be replaced with contexts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">localcontext</span><span class="p">,</span> <span class="n">Context</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">localcontext</span><span class="p">(</span><span class="n">Context</span><span class="p">(</span><span class="n">prec</span><span class="o">=</span><span class="mi">50</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="mi">355</span><span class="p">)</span> <span class="o">/</span> <span class="n">Decimal</span><span class="p">(</span><span class="mi">113</span><span class="p">))</span>
</span></span></code></pre></div><p>Other examples:</p>
<ol>
<li>Writing or reading from file</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something with data</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something with data</span>
</span></span></code></pre></div><ol start="2">
<li>Deleting a file (getting rid of the try-except-pass idiom):</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;sometempfile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">suppress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">suppress</span><span class="p">(</span><span class="ne">FileNotFoundError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;sometempfile.tmp&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>suppress()</code> is a reentrant context manager. More info <a href="https://docs.python.org/3/library/contextlib.html#reentrant-context-managers">here</a>.</p>
<ol start="3">
<li>Using a lock</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># critical section</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># critical section</span>
</span></span></code></pre></div><p><strong>Note:</strong> For reentrant lock context manager, see <a href="https://docs.python.org/3/library/threading.html#threading.RLock">threading.RLock</a>.</p>
<ol start="4">
<li>Redirecting output from stdout to file</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">sldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>redirect_stdout()</code> is also a reentrant context manager.</p>
<p>More on context managers <a href="https://docs.python.org/3/library/contextlib.html">here</a>.</p>
<h3 id="using-the-cache-for-optimized-function-calls">Using the cache for optimized function calls</h3>
<p>For example, looking up a webpage numerous times is expensive, and usually the result is the same. So use the <code>lru_cache()</code> decorator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@lru_cache</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></div><p>More can be found <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">here</a>.</p>
<h3 id="test-a-sequence-or-generator-for-truthness">Test a sequence or generator for truthness</h3>
<p>Using the <code>any()</code> function, you can check if at least one value in the iterable is <code>True</code>. It applies the <code>bool()</code> function to every element.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">false_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="p">[],</span> <span class="p">{},</span> <span class="kc">None</span><span class="p">]</span>   <span class="c1"># all of these return False when using bool() on them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">false_lst</span><span class="p">))</span>   <span class="c1"># prints False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">true_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">}]</span>  <span class="c1"># all of these return True when using bool() on them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">true_lst</span><span class="p">))</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">falst_lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>    <span class="c1"># any integer different from 0 is considered True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">false_lst</span><span class="p">))</span>   <span class="c1"># prints True</span>
</span></span></code></pre></div><p><strong>Note:</strong> This function shortcircuits, meaning the first time it finds <code>True</code> it returns; it does <strong>NOT</strong> check for the rest of the values to be <code>True</code>.</p>
<p><strong>Note 2:</strong> It is really useful with generators:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">))</span>   <span class="c1"># prints True after 2 values evaluated, as range() is a generator</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">([</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)]))</span>   <span class="c1"># prints True after the whole list of 1000000 elements has been initialized, as range() has to populate the list first</span>
</span></span></code></pre></div><p>There is another function, <code>all()</code>, that does what it says: it tests for all the elements in the sequence to be <code>True</code>, and works much in the same way as <code>any()</code>.</p>
<h3 id="use-namedtuples-instead-of-tuples">Use namedtuples instead of tuples</h3>
<p>Aside from the fact that <code>namedtuple()</code>s are more verbose, they also offer better usage, as they can be treated as regular tuples, classes or even dictionaries.</p>
<p>For example, having a point:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pt1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">pt1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>   <span class="c1"># prints 2 3</span>
</span></span></code></pre></div><p>can be replaced with the better alternative <code>namedtuple()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Point</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Point&#39;</span><span class="p">,</span> <span class="s1">&#39;x y&#39;</span><span class="p">)</span>  <span class="c1"># a tuple named &#39;Point&#39; with attributes &#39;x&#39; and &#39;y&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># alternatively this means the exact same thing</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Point = namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pt1</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">)</span>                  <span class="c1"># prints Point(x=2, y=3)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">pt1</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>         <span class="c1"># prints 2 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">pt1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>       <span class="c1"># prints 2 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">_asdict</span><span class="p">()))</span>  <span class="c1"># prints {&#39;x&#39;: 2, &#39;y&#39;: 3}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">50</span><span class="p">))</span>   <span class="c1"># prints Point(x=50, y=3)</span>
</span></span><span class="line"><span class="cl">                            <span class="c1"># Note however that _replace() returns a modified copy. The original is still a tuple, so it cannot be modified</span>
</span></span></code></pre></div><p>Another common example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="s1">&#39;age color lang&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>   <span class="c1"># prints Person(age=31, color=&#39;blue&#39;, lang=&#39;c&#39;)</span>
</span></span></code></pre></div><p><strong>Note:</strong> When the values from a <code>namedtuple()</code> are invalid (e.g. having one of the fields named <code>class</code> or having the same field twice), it throws a <code>ValueError</code>. To avoid this you can possibly provide a third parameter named <code>rename</code>. If set to <code>True</code>, it will rename the field that is incorrect.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="s1">&#39;age color age&#39;</span><span class="p">,</span> <span class="n">rename</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;whatever&#39;</span><span class="p">))</span>   <span class="c1"># prints Person(age=31, color=&#39;blue&#39;, _2=&#39;whatever&#39;)</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> Since Python 3.8, <code>_asdict()</code> method returns a regular dictionary, as regular <code>dict</code>s now have guaranteed ordering based on insertion (since Python 3.7).</p>
<h3 id="profiling-code-with-cprofile">Profiling code with cProfile</h3>
<p>Since Python 3.8, cProfile can be used as a context manager, making it extremely easy to profile code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cProfile</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">cProfile</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span> <span class="k">as</span> <span class="n">profiler</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># code to be profiled</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">profiler</span><span class="o">.</span><span class="n">print_stats</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="pretty-print-stuff">Pretty print stuff</h3>
<p>One way to format the output is to use the <code>pprint</code> module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s2">&#34;Here is a long string&#34;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">compact</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># { &#39;a&#39;: [ &#39;Here&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;is&#39;, &#39;a&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;long&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;string&#39;],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;b&#39;: [ 0, 1, 2, 3,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          4],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;c&#39;: []}</span>
</span></span></code></pre></div><p><strong>Note</strong>: Since Python 3.8, the parameter <code>sort_dicts</code> was added (<code>True</code> by default):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s2">&#34;Here is a long string&#34;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">compact</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">sort_dicts</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># { &#39;b&#39;: [ 0, 1, 2, 3,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          4],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;c&#39;: [],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;a&#39;: [ &#39;Here&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;is&#39;, &#39;a&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;long&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;string&#39;]}</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/pprint.html#module-pprint">here</a>.</p>
<h3 id="the-is-operator-vs--operator">The &ldquo;is&rdquo; operator vs &ldquo;==&rdquo; operator</h3>
<p>The <code>is</code> operator checks if 2 objects point to the same memory address. The equality operator <code>==</code> checks if 2 objects are equal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span>    <span class="c1"># now copy and langs point to the same memory object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="o">==</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">other_copy</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># other_copy has a copy of langs, but point to different memory objects</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">other_copy</span> <span class="o">==</span> <span class="n">langs</span><span class="p">)</span>  <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">other_copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>  <span class="c1"># prints False</span>
</span></span></code></pre></div><h3 id="list-slices">List slices</h3>
<p>You can use slices to replace elements, delete elements or make a copy of a list.</p>
<ol>
<li>Delete items:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints [&#39;c++&#39;, &#39;kotlin&#39;, &#39;rust&#39;]</span>
</span></span></code></pre></div><ol start="2">
<li>Replace elements of a list without creating a new list object</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">43</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span><span class="p">)</span>             <span class="c1"># prints [41, 42, 43]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints False, langs points to new list (new memory object)</span>
</span></span></code></pre></div><ol start="3">
<li>Make a (shallow) copy of a list</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">],</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">copy</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;some other lang&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints [&#39;c&#39;, [&#39;some other lang&#39;, &#39;java&#39;], &#39;c++&#39;, &#39;kotlin&#39;, &#39;rust&#39;]</span>
</span></span></code></pre></div><p><strong>Note:</strong> If you need a deep copy consider using the function <code>deepcopy()</code> from the module <code>copy</code>.</p>
<h3 id="deep-and-shallow-copies">Deep and shallow copies</h3>
<p>There are 2 types of copies in Python. One is the shallow copy, that works very similar to how assigning to pointers works in C (they only reference the object they point to, changing one also changes the other), and the other is the deep copy, which makes a perfect copy of the object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">copy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list2</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list2</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># shallow copy, list2 holds references to objects in list1, changing one also changes the other</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>    <span class="c1"># prints [1, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>    <span class="c1"># prints [7, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list3</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list3</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># deep copy, list3 is a perfect copy of list1 with no references to it, changing one doesn&#39;t change the other</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>    <span class="c1"># prints [1, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span>    <span class="c1"># prints [9, 2, [3, 8], 5]</span>
</span></span></code></pre></div><p>More about deep and shallow copies <a href="https://www.geeksforgeeks.org/copy-python-deep-copy-shallow-copy/">here</a>.</p>
<h3 id="pythons-built-in-http-server">Python&rsquo;s built-in http server</h3>
<p>Python has a built-in http server; it can be super useful if you want to preview a website without going the hurdle of starting an apache or nginx server.</p>
<p>This serves the website in the current directory at address <code>localhost:8000</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 -m http.server
</span></span></code></pre></div><h3 id="type-annotations">Type annotations</h3>
<p>Python 3.5 supports type annotations, which can ensure better readability. <strong>Note however that they are only there for the programmer to acknowledge, Python does not care and won&rsquo;t change anything based on them</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">s1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">42</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">s2</span>
</span></span></code></pre></div><p>They can be changed to anything you want:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func2</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="s1">&#39;web page&#39;</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span> <span class="s1">&#39;web request&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;web response&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return response</span>
</span></span></code></pre></div><p><strong>Note:</strong> Passing 2 strings to <code>func()</code> is perfectly valid, as Python does <strong><em>NOT</em></strong> care at all about these annotations (in this case the function would return the 2 strings concatenated).</p>
<p><strong>Note 2:</strong> You can use stuff like <a href="http://mypy-lang.org">Mypy</a> to enforce this kind of behaviour, so Python becomes statically-typed!</p>
<p>More info about type annotations can be found in <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>.</p>
<p><strong>Note 3:</strong> Since Python 3.6, <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526</a>, more support for type annotations was added. Again, <strong>Python will always be a dynamically-typed language</strong>, but tools can be used to ensure static typing.</p>
<h3 id="counter-for-iterables">Counter for iterables</h3>
<p>This is an easy method to find the most common elements in an iterable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">collections</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">count</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="s1">&#39;some random string&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;s&#39;, 2), (&#39;o&#39;, 2), (&#39;m&#39;, 2), (&#39; &#39;, 2), (&#39;r&#39;, 2), (&#39;n&#39;, 2), (&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;d&#39;, 1), (&#39;t&#39;, 1), (&#39;i&#39;, 1), (&#39;g&#39;, 1)]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;s&#39;, 2), (&#39;o&#39;, 2), (&#39;m&#39;, 2)]</span>
</span></span></code></pre></div><p>More info can be found <a href="https://docs.python.org/3/library/collections.html#collections.Counter">in the Python docs for the Counter class</a>.</p>
<h3 id="permutations-of-an-iterable">Permutations of an iterable</h3>
<p>Get permutations of an iterable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">itertools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;)]</span>
</span></span></code></pre></div><p>The function takes an iterable and another optional argument specifying the length of one permutation.</p>
<h3 id="getting-the-representation-of-an-object-as-a-string">Getting the representation of an object as a string</h3>
<p>Python has 2 methods to transform an object into a string (similar to other languages <code>toString()</code> methods); those are <code>str()</code> and <code>repr()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">now</span><span class="p">))</span>     <span class="c1"># prints &#39;2020-02-12&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">now</span><span class="p">))</span>    <span class="c1"># prints &#39;datetime.date(2020, 2, 12)&#39;</span>
</span></span></code></pre></div><p>The function <code>str()</code> is made for clarity, while the function <code>repr()</code> is made to be unambiguos about what the object represents.</p>
<p>The python console uses <code>repr()</code>.</p>
<h3 id="python-disassembler">Python disassembler</h3>
<p>Python has a built-in disassembler. It is very rudimentary, but it can help debug some code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dis</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;This is some text </span><span class="se">\&#39;</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\&#39;</span><span class="s1">.&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  4           0 LOAD_CONST               1 (&#34;This is some text &#39;&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              2 LOAD_GLOBAL              0 (str)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              4 LOAD_FAST                0 (text)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              6 CALL_FUNCTION            1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              8 BINARY_ADD</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             10 LOAD_CONST               2 (&#34;&#39;.&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             12 BINARY_ADD</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             14 RETURN_VALUE</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/dis.html">in the docs</a>.</p>
<h3 id="lambda-functions">Lambda functions</h3>
<p>Lambda functions, as in other functional programming languages, are anonymous functions that don&rsquo;t have a name. They are useful for small code that doesn&rsquo;t require more than a line or two, and they are generally passed as arguments to other functions.</p>
<p>One such example that applies to all functional programming languages is the <code>map()</code> function. It takes a callable as the first argument (read function, lambda function, something that can be called), and an iterable as the second argument, and applies the function to each of the elements of the iterable, returning a new iterable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">string</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="p">[</span><span class="s1">&#39;StRiNg&#39;</span><span class="p">,</span> <span class="s1">&#39;ANOTHER string&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [&#39;string&#39;, &#39;another string&#39;]</span>
</span></span></code></pre></div><p>This code does the exact same thing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stringlower</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;StRiNg&#39;</span><span class="p">,</span> <span class="s1">&#39;ANOTHER string&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">obj</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stringlower</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [&#39;string&#39;, &#39;another string&#39;]</span>
</span></span></code></pre></div><p>Another example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">power_func</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">power_func</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># prints 8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">)(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>   <span class="c1"># prints 1</span>
</span></span></code></pre></div><h3 id="ip-addresses-in-python">Ip addresses in Python</h3>
<p>Python has an interesting module to work with Ip addresses:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ipaddress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">address</span> <span class="o">=</span> <span class="n">ipaddress</span><span class="o">.</span><span class="n">ip_address</span><span class="p">(</span><span class="s1">&#39;192.168.100.14&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints IPv4Address(&#39;192.168.100.14&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you can even have arithmetic operations done on this address</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">address</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints 192.168.100.17</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/ipaddress.html">here</a>.</p>
<h3 id="subclasses-and-subinstances">Subclasses and subinstances</h3>
<p>In Python, you can check if a class is a subclass of some other class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">))</span>  <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="nb">object</span><span class="p">))</span>     <span class="c1"># prints True</span>
</span></span></code></pre></div><p>You can also check if some instance is an instance of the specified class or another sublass of that class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">SubClass</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">))</span>   <span class="c1"># prints True</span>
</span></span></code></pre></div><h3 id="asterisk--and-slash--in-function-definition-positional--and-keyword-only-function-parameters">Asterisk (*) and slash (\) in function definition (positional- and keyword-only function parameters)</h3>
<p>In Python 3, you can add an asterisk and a slash to a function definition with special meaning. Asterisk marks keyword-only parameters (that means parameters that can be given to the function just by keyword, not by position), while slash marks positional-only parameters (meaning parameters cannot be given by keyword, but by position only).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">positional_only_argument</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">positional_and_keyword_argument</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keyword_only_argument</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">positional_only_argument</span> <span class="o">+</span> <span class="n">positional_and_keyword_argument</span> <span class="o">+</span> <span class="n">keyword_only_argument</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Type error, third parameter should be keyword</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">positional_only_argument</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Type error, first parameter is positional only</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">keyword_only_argument</span> <span class="o">=</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># fine, prints 6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">positional_and_keyword_argument</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">keyword_only_argument</span> <span class="o">=</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># fine, prints 6</span>
</span></span></code></pre></div><p>Info and rationale about these 2 types of parameters can be found in <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102 - keyword-only parameters</a> and in <a href="https://www.python.org/dev/peps/pep-0570/">PEP 570 - positional-only parameters</a>.</p>
<p><strong>Note:</strong> Until Python 3.8, positional-only arguments could only be used in library functions. Starting from Python 3.8, they can be used in programmer constructions too.</p>
<h3 id="python-interactive-shell">Python interactive shell</h3>
<p>Say you wrote some Python code like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="k">else</span> <span class="n">b</span>
</span></span></code></pre></div><p>You can launch it in an interactive shell with <code>python -i main.py</code>, which is similar to calling only <code>python</code> in the command line, with the key difference that the python shell contains your function in the global scope as well. Go ahead, try it!</p>
<h3 id="python-debugger">Python debugger</h3>
<p>Python has a debugger, similar to gdb. One way to use it is to simply add <code>import pdb; pdb.set_trace()</code> in your program wherever u want the debugger to stop program execution.</p>
<p>In Python 3.7, the debugger can also be called on a script like this: <code>python -m pdb script.py</code>, and it stops when the module loads, just before executing the first line of the script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pdb</span>
</span></span><span class="line"><span class="cl"><span class="n">pdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># code execution will stop here, and the program will enter the debugger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></div><p>For more information on how to operate the python debugger, visit <a href="https://docs.python.org/3/library/pdb.html#debugger-commands">this</a>.</p>
<p><strong>Note:</strong> Since Python 3.7, instead of <code>import pdb; pdb.set_trace()</code>, you can simply add a <code>breakpoint()</code> function call whenever you want the program to stop execution.</p>
<h3 id="the-walrus-operator-">The walrus operator (:=)</h3>
<p>Python 3.8 introduced assignment expressions through the use of a new operator, called the walrus operator (if you look sideways, the operator looks like a walrus).</p>
<p>Assignment expressions allow you to assign and return a value in the same expression, similar to how things work in a language like C.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;What is your age?&#34;</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You are a grown-up!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You are a kid!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>It can be useful, for example in list comprehensions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s1">&#39;abcd&#39;</span> <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># instead of having to compute f(x) twice</span>
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s1">&#39;abcd&#39;</span> <span class="k">if</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">]</span>
</span></span></code></pre></div><p>Arguably, the operator is a little confusing, and most of the times not needed and can be replaced with more expressive syntax. There are good arguments to why this operator is not needed in Python <a href="https://www.reddit.com/r/Python/comments/8ex72p/pep_572_assignment_expressions/">here</a>.</p>
<p>Nonetheless, Python 3.8 adopted assignment expressions through the use of the walrus operator :=.</p>
<p>For more info on the walrus operator and assignment expressions, see <a href="https://www.python.org/dev/peps/pep-0572/">PEP 572</a>.</p>
<h3 id="formatted-strings-f-strings">Formatted strings (f-strings)</h3>
<p>Formatted string literals (or f-strings) are a construct added in Python 3.6 and have since become very popular due to the speed (see tip 7) and simplicity.</p>
<p>Some examples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">number</span> <span class="o">=</span> <span class="mf">3.1415</span>
</span></span><span class="line"><span class="cl"><span class="n">width</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">precision</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;This is </span><span class="si">{</span><span class="n">number</span><span class="si">:{</span><span class="n">width</span><span class="si">}</span><span class="s1">.</span><span class="si">{</span><span class="n">precision</span><span class="si">}}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is       3.14</span>
</span></span></code></pre></div><p>There are three conversion fields; <code>r</code>, <code>s</code> and <code>a</code>. What they do is call the functions <code>repr()</code>, <code>str()</code> and <code>ascii()</code> respectively on the formatted parameter.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;My name is </span><span class="si">{</span><span class="n">name</span><span class="si">!r}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># My name is &#39;Alex&#39;</span>
</span></span></code></pre></div><p>Since Python 3.8, there is a new specifier (=), that expands to the representation of the expression, making it useful for debugging and self-documenting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">name</span><span class="si">=}</span><span class="s1">&#39;</span><span class="p">)</span>               <span class="c1"># prints name=&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">now</span><span class="si">=}</span><span class="s1">&#39;</span><span class="p">)</span>                <span class="c1"># prints now=datetime.date(2020, 2, 14)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># f-string specifiers still work</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">now</span><span class="si">=!s}</span><span class="s1">&#39;</span><span class="p">)</span>              <span class="c1"># prints now=2020-02-14</span>
</span></span><span class="line"><span class="cl"><span class="n">number</span> <span class="o">=</span> <span class="mf">3.1415</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Careful when adding format specifiers</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="si">=:</span><span class="s1">10.2f</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>   <span class="c1"># prints number + 1=      4.14</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="si">=:</span><span class="s1">10.2</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>    <span class="c1"># prints number + 1=       4.1</span>
</span></span></code></pre></div><p>More info about f-strings <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">in the docs</a>.</p>
<p><strong>Note:</strong> Formatted strings have a &lsquo;formatting&rsquo; option similar to how <code>printf()</code> works in other languages. Python&rsquo;s implementation of formatted print is <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language">a little more advanced though</a>.</p>
<h3 id="decorators-and-the-functoolswraps-helper-function">Decorators and the functools.wraps helper function</h3>
<p>Say you have a function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span></code></pre></div><p>But now we want to log this function call. Of course, adding this code in the implementation of the function is bad, since we&rsquo;re polluting the function code. Even more so, what if we want to log another 10 function calls?</p>
<p>For this purpose, we can easily use a decorator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Wrapper function.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do some logging</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wrapper</span>
</span></span></code></pre></div><p>Now it is easy to use the decorator on whatever function we want to log.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@log</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1"># this function call will be logged</span>
</span></span></code></pre></div><p>However, one problem arises when decorating a function like this. If we now try to get the doc or the function name, we notice that we get the information of the wrapper function, rather than that of our initial function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>      <span class="c1"># prints &#34;Wrapper function&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>     <span class="c1"># prints &#34;wrapper&#34;</span>
</span></span></code></pre></div><p>This is not ideal, considering that debuggers and other introspection tools use this. To fix this, we can use functools.wraps.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">functools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Wrapper function.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do some logging</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wrapper</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@log</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>      <span class="c1"># prints &#34;This function adds 2 numbers and returns the result.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>     <span class="c1"># prints &#34;sum&#34;</span>
</span></span></code></pre></div><h3 id="static-function-variables">Static function variables</h3>
<p>Python does not have a built-in method to have a static variable in a function like C or other languages do through the use of the <code>static</code> keyword.</p>
<p>Instead, we can use the fact that functions are first-class objects in Python and we can assign variables to them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">func</span><span class="o">.</span><span class="n">number_of_times_called</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">func</span><span class="o">.</span><span class="n">number_of_times_called</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># some really interesting code</span>
</span></span></code></pre></div><p>This is better than having a global variable pollute the global namespace, and is better than having a decorator that does that (because the decorator runs when the python module is loaded even if the function might never be called, so the decorator will still do some work and initialize some value; instead here the code runs only when the function is called, if ever).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>🐍 PyTricks.py</title>
      <link>https://shenlong616.github.io/posts/github/wcarhart/pytricks-py/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/wcarhart/pytricks-py/</guid>
      <description>List of Python tricks from Dan Bader&amp;#39;s (realpython.com) newsletter</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to merge two dictionaries (3.5+)</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">z</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">x</span><span class="p">,</span> <span class="o">**</span><span class="n">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># {&#39;c&#39;: 4, &#39;a&#39;: 1, &#39;b&#39;: 3}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to test flags</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">z</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="mi">1</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># truthiness only:</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="ow">or</span> <span class="n">y</span> <span class="ow">or</span> <span class="n">z</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">any</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to sort a dictionary by value</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [(&#39;d&#39;, 1), (&#39;c&#39;, 2), (&#39;b&#39;, 3), (&#39;a&#39;, 4)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Use get() to use default values with dictionaries</span>
</span></span><span class="line"><span class="cl"><span class="n">name_for_userid</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="mi">382</span><span class="p">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">590</span><span class="p">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">951</span><span class="p">:</span> <span class="s1">&#39;Dilbert&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">greeting</span><span class="p">(</span><span class="n">userid</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="sa">f</span><span class="s2">&#34;Hi </span><span class="si">{</span><span class="n">name_for_userid</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">userid</span><span class="p">,</span> <span class="s1">&#39;there&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">greeting</span><span class="p">(</span><span class="mi">382</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;Hi Alice!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">greeting</span><span class="p">(</span><span class="mi">333333</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;Hi there!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to use namedtuples</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl"><span class="n">Car</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Car&#39;</span><span class="p">,</span> <span class="s1">&#39;color mileage&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">my_car</span> <span class="o">=</span> <span class="n">Car</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="mf">3812.4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">my_car</span><span class="o">.</span><span class="n">color</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;red&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">my_car</span><span class="o">.</span><span class="n">mileage</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3812.4</span>
</span></span><span class="line"><span class="cl"><span class="n">my_car</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Car(color=&#39;red&#39; , mileage=3812.4)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># like tuples, namedtuples are immutable</span>
</span></span><span class="line"><span class="cl"><span class="n">my_car</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># AttributeError: &#34;can&#39;t set attribute&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get the pythonic style guide, the Zen of Python (PEP 20)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">this</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">The Zen of Python, by Tim Peters
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">Beautiful is better than ugly.
</span></span></span><span class="line"><span class="cl"><span class="s2">Explicit is better than implicit.
</span></span></span><span class="line"><span class="cl"><span class="s2">Simple is better than complex.
</span></span></span><span class="line"><span class="cl"><span class="s2">Complex is better than complicated.
</span></span></span><span class="line"><span class="cl"><span class="s2">Flat is better than nested.
</span></span></span><span class="line"><span class="cl"><span class="s2">Sparse is better than dense.
</span></span></span><span class="line"><span class="cl"><span class="s2">Readability counts.
</span></span></span><span class="line"><span class="cl"><span class="s2">Special cases aren&#39;t special enough to break the rules.
</span></span></span><span class="line"><span class="cl"><span class="s2">Although practicality beats purity.
</span></span></span><span class="line"><span class="cl"><span class="s2">Errors should never pass silently.
</span></span></span><span class="line"><span class="cl"><span class="s2">Unless explicitly silenced.
</span></span></span><span class="line"><span class="cl"><span class="s2">In the face of ambiguity, refuse the temptation to guess.
</span></span></span><span class="line"><span class="cl"><span class="s2">There should be one-- and preferably only one --obvious way to do it.
</span></span></span><span class="line"><span class="cl"><span class="s2">Although that way may not be obvious at first unless you&#39;re Dutch.
</span></span></span><span class="line"><span class="cl"><span class="s2">Now is better than never.
</span></span></span><span class="line"><span class="cl"><span class="s2">Although never is often better than *right* now.
</span></span></span><span class="line"><span class="cl"><span class="s2">If the implementation is hard to explain, it&#39;s a bad idea.
</span></span></span><span class="line"><span class="cl"><span class="s2">If the implementation is easy to explain, it may be a good idea.
</span></span></span><span class="line"><span class="cl"><span class="s2">Namespaces are one honking great idea -- let&#39;s do more of those!
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to pretty print dictionaries</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">my_mapping</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">sort_keys</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">{
</span></span></span><span class="line"><span class="cl"><span class="s2">  &#34;a&#34;: 23,
</span></span></span><span class="line"><span class="cl"><span class="s2">  &#34;b&#34;: 42,
</span></span></span><span class="line"><span class="cl"><span class="s2">  &#34;c&#34;: 12648430
</span></span></span><span class="line"><span class="cl"><span class="s2">}
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Function argument unpacking</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tuple_vec</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dict_vec</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">myfunc</span><span class="p">(</span><span class="o">*</span><span class="n">tuple_vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1, 0, 1</span>
</span></span><span class="line"><span class="cl"><span class="n">myfunc</span><span class="p">(</span><span class="o">**</span><span class="n">dict_vec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1, 0, 1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to time execution of code snippets</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">timeit</span>
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s1">&#39;&#34;-&#34;.join(str(n) for n in range(100))&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0.3412662749997253</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s1">&#39;&#34;-&#34;.join([str(n) for n in range(100)])&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0.2996307989997149</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">(</span><span class="s1">&#39;&#34;-&#34;.join(map(str, range(100)))&#39;</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0.24581470699922647</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Shorthand for swapping variables (without a temp)</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">23</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="mi">42</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># classic way:</span>
</span></span><span class="line"><span class="cl"><span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># pythonic way:</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;is&#34; vs &#34;==&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;is&#34; expressions evaluate to True if two variables point to the same object</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;==&#34; evaluates to True if the objects referred to by the variables are equal</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">==</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">==</span> <span class="n">c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="ow">is</span> <span class="n">c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Functions are first-class citizens</span>
</span></span><span class="line"><span class="cl"><span class="c1"># They can be passed as arguments to other functions,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># returned as values from other functions, and</span>
</span></span><span class="line"><span class="cl"><span class="c1"># assigned to variables and stored in data structures.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="n">funcs</span> <span class="o">=</span> <span class="p">[</span><span class="n">myfunc</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">funcs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;function myfunc at 0x107012230&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">funcs</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Use functions to emulate a switch block</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dispatch_if</span><span class="p">(</span><span class="n">operator</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">operator</span> <span class="o">==</span> <span class="s1">&#39;add&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">operator</span> <span class="o">==</span> <span class="s1">&#39;sub&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">operator</span> <span class="o">==</span> <span class="s1">&#39;mul&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">operator</span> <span class="o">==</span> <span class="s1">&#39;div&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dispatch_dict</span><span class="p">(</span><span class="n">operator</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;add&#39;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;sub&#39;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;mul&#39;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;div&#39;</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">operator</span><span class="p">,</span> <span class="k">lambda</span><span class="p">:</span> <span class="kc">None</span><span class="p">)()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dispatch_if</span><span class="p">(</span><span class="s1">&#39;mul&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 16</span>
</span></span><span class="line"><span class="cl"><span class="n">dispatch_dict</span><span class="p">(</span><span class="s1">&#39;mul&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 16</span>
</span></span><span class="line"><span class="cl"><span class="n">dispatch_if</span><span class="p">(</span><span class="s1">&#39;unknown&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># None</span>
</span></span><span class="line"><span class="cl"><span class="n">dispatch_dict</span><span class="p">(</span><span class="s1">&#39;unknown&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run a simple HTTP server (3.x)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (This will serve the current directory at http://localhost:8000)</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">http</span><span class="o">.</span><span class="n">server</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># List comprehensions are awesome</span>
</span></span><span class="line"><span class="cl"><span class="n">vals</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">collection</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">condition</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># is equivalent to:</span>
</span></span><span class="line"><span class="cl"><span class="n">vals</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">collection</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">condition</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vals</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example:</span>
</span></span><span class="line"><span class="cl"><span class="n">even_squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">even_squares</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [0, 4, 16, 36, 64]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Use type annotations for hints (3.5+)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Using list slice syntax makes list manipulation easy</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You can clear all elements from a list:</span>
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">lst</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># []</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># You can replace all elements of a list without creating a new list object:</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">lst</span>
</span></span><span class="line"><span class="cl"><span class="n">lst</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [7, 8, 9]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [7, 8, 9]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span> <span class="ow">is</span> <span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># You can also create a (shallow) copy of a list:</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">lst</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [7, 8, 9]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span> <span class="ow">is</span> <span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Fun little Python easter egg (2.7+)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">antigravity</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Find most common elements in an iterable (list, dict, etc.)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">collections</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="s1">&#39;helloworld&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Counter({&#39;l&#39;: 3, &#39;o&#39;: 2, &#39;e&#39;: 1, &#39;d&#39;: 1, &#39;h&#39;: 1, &#39;r&#39;: 1, &#39;w&#39;: 1})</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [(&#39;l&#39;, 3), (&#39;o&#39;, 2), (&#39;e&#39;, 1)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get all permutations from an iterable (list, dict, etc.)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">itertools</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="s1">&#39;ABCD&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;A&#39;, &#39;B&#39;, &#39;D&#39;, &#39;C&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;A&#39;, &#39;C&#39;, &#39;B&#39;, &#39;D&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;A&#39;, &#39;C&#39;, &#39;D&#39;, &#39;B&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;A&#39;, &#39;D&#39;, &#39;B&#39;, &#39;C&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;A&#39;, &#39;D&#39;, &#39;C&#39;, &#39;B&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;B&#39;, &#39;A&#39;, &#39;C&#39;, &#39;D&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;B&#39;, &#39;A&#39;, &#39;D&#39;, &#39;C&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;B&#39;, &#39;C&#39;, &#39;A&#39;, &#39;D&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;A&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;B&#39;, &#39;D&#39;, &#39;A&#39;, &#39;C&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;B&#39;, &#39;D&#39;, &#39;C&#39;, &#39;A&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;C&#39;, &#39;A&#39;, &#39;B&#39;, &#39;D&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;C&#39;, &#39;A&#39;, &#39;D&#39;, &#39;B&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;C&#39;, &#39;B&#39;, &#39;A&#39;, &#39;D&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;C&#39;, &#39;B&#39;, &#39;D&#39;, &#39;A&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;C&#39;, &#39;D&#39;, &#39;A&#39;, &#39;B&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;C&#39;, &#39;D&#39;, &#39;B&#39;, &#39;A&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;D&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;D&#39;, &#39;A&#39;, &#39;C&#39;, &#39;B&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;D&#39;, &#39;B&#39;, &#39;A&#39;, &#39;C&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;D&#39;, &#39;B&#39;, &#39;C&#39;, &#39;A&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;D&#39;, &#39;C&#39;, &#39;A&#39;, &#39;B&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">(&#39;D&#39;, &#39;C&#39;, &#39;B&#39;, &#39;A&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># __repr__ vs. __str__</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Emulate what the std lib does:</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl"><span class="n">today</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Result of __str__ should be readable:</span>
</span></span><span class="line"><span class="cl"><span class="nb">str</span><span class="p">(</span><span class="n">today</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;2017-02-02&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Result of __repr__ should be unambiguous:</span>
</span></span><span class="line"><span class="cl"><span class="nb">repr</span><span class="p">(</span><span class="n">today</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;datetime.date(2017, 2, 2)&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Python interpreter sessions use __repr__ to inspect objects:</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">today</span>
</span></span><span class="line"><span class="cl"><span class="c1"># datetime.date(2017, 2, 2)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Disassemble functions into their Python VM bytcode</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">greet</span><span class="p">(</span><span class="s1">&#39;Dan&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;Hello, Dan!&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dis</span>
</span></span><span class="line"><span class="cl"><span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">2   0 LOAD_CONST     1 (&#39;Hello, &#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    2 LOAD_FAST      0 (name)
</span></span></span><span class="line"><span class="cl"><span class="s2">    4 BINARY_ADD
</span></span></span><span class="line"><span class="cl"><span class="s2">    6 LOAD_CONST     2 (&#39;!&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s2">    8 BINARY_ADD
</span></span></span><span class="line"><span class="cl"><span class="s2">   10 RETURN_VALUE
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># @classmethod vs @staticmethod vs &#34;plain&#34; methods</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyClass</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Instance methods need a class instance and
</span></span></span><span class="line"><span class="cl"><span class="s2">    can access the instance through `self`.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;instance method called&#39;</span><span class="p">,</span> <span class="bp">self</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@classmethod</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">classmethod</span><span class="p">(</span><span class="bp">cls</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Class methods don&#39;t need a class instance.
</span></span></span><span class="line"><span class="cl"><span class="s2">    They can&#39;t access the instance (self) but
</span></span></span><span class="line"><span class="cl"><span class="s2">    they have access to the class itself via `cls`.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;class method called&#39;</span><span class="p">,</span> <span class="bp">cls</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">staticmethod</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Static methods don&#39;t have access to `cls` or `self`.
</span></span></span><span class="line"><span class="cl"><span class="s2">    They work like regular functions but belong to
</span></span></span><span class="line"><span class="cl"><span class="s2">    the class&#39;s namespace.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;static method called&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># All methods types can be called on a class instance:</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">method</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (&#39;instance method called&#39;, &lt;MyClass instance at 0x1019381b8&gt;)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">classmethod</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (&#39;class method called&#39;, &lt;class MyClass at 0x101a2f4c8&gt;)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">staticmethod</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;static method called&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Calling instance methods fails if we only have the class object:</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">MyClass</span><span class="o">.</span><span class="n">classmethod</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (&#39;class method called&#39;, &lt;class MyClass at 0x101a2f4c8&gt;)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">MyClass</span><span class="o">.</span><span class="n">staticmethod</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;static method called&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># print(MyClass.method())</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">TypeError:
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;unbound method method() must be called with MyClass &#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;instance as first argument (got nothing instead)&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How to use lambda functions</span>
</span></span><span class="line"><span class="cl"><span class="n">add</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># You could declare the same add() function with the def keyword:</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># So what&#39;s the big fuss about? Lambdas are *function expressions*:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Lambda functions are single-expression</span>
</span></span><span class="line"><span class="cl"><span class="c1"># functions that are not necessarily bound</span>
</span></span><span class="line"><span class="cl"><span class="c1"># to a name (they can be anonymous).</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Lambda functions can&#39;t use regular</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Python statements and always include an</span>
</span></span><span class="line"><span class="cl"><span class="c1"># implicit `return` statement.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Use IP addresses</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ipaddress</span>
</span></span><span class="line"><span class="cl"><span class="n">ipaddress</span><span class="o">.</span><span class="n">ip_address</span><span class="p">(</span><span class="s1">&#39;192.168.1.2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># IPv4Address(&#39;192.168.1.2&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="n">ipaddress</span><span class="o">.</span><span class="n">ip_address</span><span class="p">(</span><span class="s1">&#39;2001:af3::&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># IPv6Address(&#39;2001:af3::&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get the name of object, class, or function at runtime</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyClass</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">myfunc</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span><span class="o">.</span><span class="vm">__class__</span><span class="o">.</span><span class="vm">__name__</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;MyClass&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">myfunc</span><span class="o">.</span><span class="vm">__name__</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;myfunc&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check for class inheritance relationships</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl"><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl"><span class="nb">issubclass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">,</span> <span class="n">SubClass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Use unicode characters in variable names</span>
</span></span><span class="line"><span class="cl"><span class="n">π</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Spin</span><span class="err">̈</span><span class="n">alTap</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="n">Spin</span><span class="err">̈</span><span class="n">alTap</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;Spin̈alTap object at 0x10e58d908&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Only letter-like characters work, however:</span>
</span></span><span class="line"><span class="cl"><span class="err">🍺</span> <span class="o">=</span> <span class="s2">&#34;beer&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">SyntaxError: &#34;invalid character in identifier&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get global and local variables</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;globals()&#34; returns a dict with all global variables in the current scope:</span>
</span></span><span class="line"><span class="cl"><span class="nb">globals</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># {...}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;locals()&#34; does the same but for all local variables in the current scope:</span>
</span></span><span class="line"><span class="cl"><span class="nb">locals</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># {...}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get traceback even when python fails (e.g. from a segmentation fault)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">faulthandler</span>
</span></span><span class="line"><span class="cl"><span class="n">faulthandler</span><span class="o">.</span><span class="n">enable</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Can also be enabled with &#34;python -X faulthandler&#34; from the command line</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># # Virtual Environments (&#34;virtualenvs&#34;) keep</span>
</span></span><span class="line"><span class="cl"><span class="c1"># your project dependencies separated.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># They help you avoid version conflicts</span>
</span></span><span class="line"><span class="cl"><span class="c1"># between packages and different versions</span>
</span></span><span class="line"><span class="cl"><span class="c1"># of the Python runtime.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Before creating &amp; activating a virtualenv:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `python` and `pip` map to the system</span>
</span></span><span class="line"><span class="cl"><span class="c1"># version of the Python interpreter</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (e.g. Python 2.7)</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">which</span> <span class="n">python</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Let&#39;s create a fresh virtualenv using</span>
</span></span><span class="line"><span class="cl"><span class="c1"># another version of Python (Python 3):</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">venv</span> <span class="o">./</span><span class="n">venv</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># A virtualenv is just a &#34;Python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># environment in a folder&#34;:</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">ls</span> <span class="o">./</span><span class="n">venv</span>
</span></span><span class="line"><span class="cl"><span class="nb">bin</span>      <span class="n">include</span>    <span class="n">lib</span>      <span class="n">pyvenv</span><span class="o">.</span><span class="n">cfg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Activating a virtualenv configures the</span>
</span></span><span class="line"><span class="cl"><span class="c1"># current shell session to use the python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (and pip) commands from the virtualenv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># folder instead of the global environment:</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">source</span> <span class="o">./</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Note how activating a virtualenv modifies</span>
</span></span><span class="line"><span class="cl"><span class="c1"># your shell prompt with a little note</span>
</span></span><span class="line"><span class="cl"><span class="c1"># showing the name of the virtualenv folder:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">venv</span><span class="p">)</span> <span class="err">$</span> <span class="n">echo</span> <span class="s2">&#34;wee!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># With an active virtualenv, the `python`</span>
</span></span><span class="line"><span class="cl"><span class="c1"># command maps to the interpreter binary</span>
</span></span><span class="line"><span class="cl"><span class="c1"># *inside the active virtualenv*:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">venv</span><span class="p">)</span> <span class="err">$</span> <span class="n">which</span> <span class="n">python</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">dan</span><span class="o">/</span><span class="n">my</span><span class="o">-</span><span class="n">project</span><span class="o">/</span><span class="n">venv</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Installing new libraries and frameworks</span>
</span></span><span class="line"><span class="cl"><span class="c1"># with `pip` now installs them *into the</span>
</span></span><span class="line"><span class="cl"><span class="c1"># virtualenv sandbox*, leaving your global</span>
</span></span><span class="line"><span class="cl"><span class="c1"># environment (and any other virtualenvs)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># completely unmodified:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">venv</span><span class="p">)</span> <span class="err">$</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">requests</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># To get back to the global Python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># environment, run the following command:</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">venv</span><span class="p">)</span> <span class="err">$</span> <span class="n">deactivate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># (See how the prompt changed back</span>
</span></span><span class="line"><span class="cl"><span class="c1"># to &#34;normal&#34; again?)</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">echo</span> <span class="s2">&#34;yay!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Deactivating the virtualenv flipped the</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `python` and `pip` commands back to</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the global environment:</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">which</span> <span class="n">python</span>
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># You can `else` statements with `for` and `while` blocks</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">contains</span><span class="p">(</span><span class="n">haystack</span><span class="p">,</span> <span class="n">needle</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">haystack</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">needle</span> <span class="o">==</span> <span class="n">haystack</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># The `else` here is a &#34;completion clause&#34; that runs only if the loop ran to completion</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># without hitting a `break` statement.</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">&#39;needle not found&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Pythonic ways of checking if all items in a list are equal;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Ordered from &#34;most Pythonic&#34; to &#34;least Pythonic&#34; and &#34;least</span>
</span></span><span class="line"><span class="cl"><span class="c1"># efficient&#34; to &#34;most efficient&#34;. The len(set()) solution is</span>
</span></span><span class="line"><span class="cl"><span class="c1"># idiomatic, but constructing a set is less efficient memory</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and speed-wise.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span> <span class="o">==</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">all</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">lst</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># In Python 3.4+ you can use</span>
</span></span><span class="line"><span class="cl"><span class="c1"># contextlib.suppress() to selectively</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ignore specific exceptions:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">contextlib</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">contextlib</span><span class="o">.</span><span class="n">suppress</span><span class="p">(</span><span class="ne">FileNotFoundError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This is equivalent to:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># contextlib.suppress docstring:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;Return a context manager that suppresses any</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  of the specified exceptions if they occur in the body</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  of a with statement and then resumes execution with</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  the first statement following the end of</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  the with statement.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># In Python 3 you can use a bare &#34;*&#34; asterisk</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in function parameter lists to force the</span>
</span></span><span class="line"><span class="cl"><span class="c1"># caller to use keyword arguments for certain</span>
</span></span><span class="line"><span class="cl"><span class="c1"># parameters:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">=</span><span class="s1">&#39;z&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s1">&#39;Hello&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># To pass the value for c, d, and e you</span>
</span></span><span class="line"><span class="cl"><span class="c1"># will need to explicitly pass it as</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;key=value&#34; named arguments:</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;v&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TypeError:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#34;f() takes 2 positional arguments but 5 were given&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="s1">&#39;q&#39;</span><span class="p">,</span><span class="n">e</span><span class="o">=</span><span class="s1">&#39;v&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># &#39;Hello&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Python 3.5+ allows passing multiple sets</span>
</span></span><span class="line"><span class="cl"><span class="c1"># of keyword arguments (&#34;kwargs&#34;) to a</span>
</span></span><span class="line"><span class="cl"><span class="c1"># function within a single call, using</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the &#34;**&#34; syntax:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">process_data</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">process_data</span><span class="p">(</span><span class="o">**</span><span class="n">x</span><span class="p">,</span> <span class="o">**</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 2 3 4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">process_data</span><span class="p">(</span><span class="o">**</span><span class="n">x</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">23</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 2 23 42</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ===================================== #</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
