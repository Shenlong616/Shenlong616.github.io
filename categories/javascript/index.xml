<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JavaScript on Shenlong616</title>
    <link>https://shenlong616.github.io/categories/javascript/</link>
    <description>Recent content in JavaScript on Shenlong616</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://shenlong616.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript: callback Function</title>
      <link>https://shenlong616.github.io/posts/javascript/callback/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/javascript/callback/</guid>
      <description>let fullText = &amp;#34;&amp;#34;; const myArray1 = [{ helloText: [&amp;#34;hello&amp;#34;] }]; const myArray2 = [&amp;#34;world&amp;#34;]; const myArray3 = [ { function(parameter) { fullText += `${parameter} `; }, }, ]; [...myArray1[0].helloText, ...myArray2, &amp;#34;1998&amp;#34;].map((value) =&amp;gt; { myArray3[0].function(value); }); console.log(`${fullText.trim()}!`); // hello world 1998! console.log(fullText.length); // 17 </description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fullText</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myArray1</span> <span class="o">=</span> <span class="p">[{</span> <span class="nx">helloText</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;hello&#34;</span><span class="p">]</span> <span class="p">}];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myArray2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;world&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myArray3</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">function</span><span class="p">(</span><span class="nx">parameter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fullText</span> <span class="o">+=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">parameter</span><span class="si">}</span><span class="sb"> `</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[...</span><span class="nx">myArray1</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">helloText</span><span class="p">,</span> <span class="p">...</span><span class="nx">myArray2</span><span class="p">,</span> <span class="s2">&#34;1998&#34;</span><span class="p">].</span><span class="nx">map</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">myArray3</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">fullText</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="si">}</span><span class="sb">!`</span><span class="p">);</span> <span class="c1">// hello world 1998!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullText</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 17
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>JavaScript: falsy values</title>
      <link>https://shenlong616.github.io/posts/javascript/falsy/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/javascript/falsy/</guid>
      <description>List of falsy values false 0 -0 0n &amp;quot;&amp;quot;, &#39;&#39;, `` — Empty string value. null undefined NaN — not a number. document.all Check a falsy value is false Boolean() method: for (const item of [false, 0, -0, 0n, &amp;#34;&amp;#34;, null, undefined, document.all]) { console.log(`${item} is ${Boolean(item)}`); } NOT (!) operator method: for (const item of [false, 0, -0, 0n, &amp;#34;&amp;#34;, null, undefined, document.all]) { if (!item) { console.log(`${item} is ${!</description>
      <content:encoded><![CDATA[<h3 id="list-of-falsy-values">List of falsy values</h3>
<ul>
<li><code>false</code></li>
<li><code>0</code></li>
<li><code>-0</code></li>
<li><code>0n</code></li>
<li><code>&quot;&quot;</code>, <code>''</code>, <code>``</code> — Empty string value.</li>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>NaN</code> — not a number.</li>
<li><code>document.all</code></li>
</ul>
<h3 id="check-a-falsy-value-is-false">Check a falsy value is <code>false</code></h3>
<ul>
<li>Boolean() method:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="p">[</span><span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="nx">n</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">all</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">item</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="nb">Boolean</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>NOT (<code>!</code>) operator method:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="p">[</span><span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="nx">n</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">all</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">item</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="o">!!</span><span class="nx">item</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>JavaScript: creates a duplicate-free version of an Array</title>
      <link>https://shenlong616.github.io/posts/javascript/creates-a-duplicate-free-version-of-an-array/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/javascript/creates-a-duplicate-free-version-of-an-array/</guid>
      <description> Set() method: console.log([...new Set([1, 2, 2, 3, 3, 3])]); // [1, 2, 3] </description>
      <content:encoded><![CDATA[<ul>
<li>Set() method:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">([...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">])]);</span> <span class="c1">// [1, 2, 3]
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>JavaScript: get a random item from an Array</title>
      <link>https://shenlong616.github.io/posts/javascript/get-a-random-item-from-an-array/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/javascript/get-a-random-item-from-an-array/</guid>
      <description>var array = [1, 2, 3]; var array2 = [4, 5, 6]; const randomArray = (arr) =&amp;gt; { return arr[Math.floor(Math.random() * arr.length)]; }; console.log(randomArray(array)); // random 1 to 3 console.log(randomArray([...array, ...array2])); // random 1 to 6 </description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">randomArray</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">arr</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">randomArray</span><span class="p">(</span><span class="nx">array</span><span class="p">));</span> <span class="c1">// random 1 to 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">randomArray</span><span class="p">([...</span><span class="nx">array</span><span class="p">,</span> <span class="p">...</span><span class="nx">array2</span><span class="p">]));</span> <span class="c1">// random 1 to 6
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
