<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GitHub on Shenlong616</title>
    <link>https://shenlong616.github.io/posts/github/</link>
    <description>Recent content in GitHub on Shenlong616</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shenlong616.github.io/posts/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>anti DDoS iptables by scriptzteam</title>
      <link>https://shenlong616.github.io/posts/github/anti-ddos-iptables-by-scriptzteam/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/anti-ddos-iptables-by-scriptzteam/</guid>
      <description>IPtables DDoS Protection: The Best Rules to Mitigate DDoS Attacks
iptables DDoS Protection
There are different ways of building your own anti-DDoS rules for iptables. We will be discussing the most effective iptables DDoS protection methods in this comprehensive tutorial. This guide will teach you how to:
Select the best iptables table and chain to stop DDoS attacksTweak your kernel settings to mitigate the effects of DDoS attacksUse iptables to block most TCP-based DDoS attacksUse iptables SYNPROXY to block SYN floodsPlease note that this article is written for professionals who deal with Linux servers on a daily basis.</description>
      <content:encoded><![CDATA[<p>IPtables DDoS Protection: The Best Rules to Mitigate DDoS Attacks</p>
<p>iptables DDoS Protection</p>
<p>There are different ways of building your own anti-DDoS rules for iptables. We will be discussing the most effective iptables DDoS protection methods in this comprehensive tutorial.
This guide will teach you how to:</p>
<pre><code>Select the best iptables table and chain to stop DDoS attacks
Tweak your kernel settings to mitigate the effects of DDoS attacks
Use iptables to block most TCP-based DDoS attacks
Use iptables SYNPROXY to block SYN floods
</code></pre>
<p>Please note that this article is written for professionals who deal with Linux servers on a daily basis. If you just want to protect your online application from DDoS attacks, you can use our remote protection, a VPS with DDoS protection or a DDoS protected bare metal server.</p>
<p>While one can do a lot with iptables to block DDoS attacks, there isn&rsquo;t a way around actual hardware firewalls (we recently reviewed RioRey DDoS mitigation hardware) to detect and stop large DDoS floods. However, it isn&rsquo;t impossible to filter most bad traffic at line rate using iptables.</p>
<p>We&rsquo;ll only cover protection from TCP-based attacks. Most UDP-based attacks are amplified reflection attacks that will exhaust the network interface card of any common server. The only mitigation approach that makes sense against these types of attacks is to block them at the edge or core network or even at the carrier already. If they are able to reach your server, there isn&rsquo;t much you can do against those multi-Gbit/s attacks except to move to a DDoS protected network.</p>
<p>anti-DDoS iptables
What Is IPtables?</p>
<p>netfilter iptables (soon to be replaced by nftables) is a user-space command line utility to configure kernel packet filtering rules developed by netfilter. It&rsquo;s the default firewall management utility on Linux systems - everyone working with Linux systems should be familiar with it or have at least heard of it.</p>
<p>iptables can be used to filter certain packets, block source or destination ports and IP addresses, forward packets via NAT and a lot of other things. Most commonly it&rsquo;s used to block destination ports and source IP addresses.
Why Your IPtables Anti-DDoS Rules Suck</p>
<p>To understand why your current iptables rules to prevent DDoS attacks suck, we first have to dig into how iptables works.</p>
<p>iptables is a command line tool used to set up and control the tables of IP packet filter rules. There are different tables for different purposes.
IPtables Tables</p>
<p>Filter: The filter table is the default and most commonly used table that rules go to if you don&rsquo;t use the -t (&ndash;table) option.</p>
<p>Nat: This table is used for Network Address Translation (NAT). If a packet creates a new connection, the nat table gets checked for rules.</p>
<p>Mangle: The mangle table is used to modify or mark packets and their header information.</p>
<p>Raw: This table&rsquo;s purpose is mainly to exclude certain packets from connection tracking using the NOTRACK target.</p>
<p>As you can see there are four different tables on an average Linux system that doesn&rsquo;t have non-standard kernel modules loaded. Each of these tables supports a different set of iptables chains.
IPtables Chains
PREROUTING: raw, nat, mangle</p>
<pre><code>Applies to packets that enter the network interface card (NIC)
</code></pre>
<p>INPUT: filter, mangle</p>
<pre><code>Applies to packets destined to a local socket
</code></pre>
<p>FORWARD: filter, mangle</p>
<pre><code>Applies to packets that are being routed through the server
</code></pre>
<p>OUTPUT: raw, filter, nat, mangle</p>
<pre><code>Applies to packets that the server sends (locally generated)
</code></pre>
<p>POSTROUTING: nat, mangle</p>
<pre><code>Applies to packets that leave the server
</code></pre>
<p>Depending on what kind of packets you want to block or modify, you select a certain iptables table and a chain that the selected table supports.</p>
<p>Of course, we&rsquo;re still missing an explanation of iptables targets (ACCEPT, DROP, REJECT, etc.), but we&rsquo;re assuming that if you&rsquo;re reading this article, you already know how to deal with iptables.</p>
<p>We&rsquo;re going to explain why your iptables rules suck to stop DDoS and not teach you how to use iptables. Let&rsquo;s get back to that.</p>
<p>If you want to block a DDoS attack with iptables, performance of the iptables rules is extremely important. Most TCP-based DDoS attack types use a high packet rate, meaning the sheer number of packets per second is what causes the server to go down. That&rsquo;s why you want to make sure that you can process and block as many packets per second as possible.</p>
<p>You&rsquo;ll find that most if not all guides on how to block DDoS attacks using iptables use the filter table and the INPUT chain for anti-DDoS rules. The issue with this approach is that the INPUT chain is only processed after the PREROUTING and FORWARD chains and therefore only applies if the packet doesn&rsquo;t match any of these two chains.</p>
<p>This causes a delay in the filtering of the packet which consumes resources. In conclusion, to make our rules as effective as possible, we need to move our anti-DDoS rules as far up the chains as possible. The first chain that can apply to a packet is the PREROUTING chain, so ideally we&rsquo;ll want to filter the bad packets in this chain already.</p>
<p>However, the filter table doesn&rsquo;t support the PREROUTING chain. To get around this problem, we can simply use the mangle table instead of the filter table for our anti-DDoS iptables rules. It supports most if not all rules that the filter table supports while also supporting all iptables chains.</p>
<p>So you want to know why your iptables DDoS protection rules suck? It&rsquo;s because you use the filter table and the INPUT chain to block the bad packets! The best solution to dramatically increase the performance of your iptables rules and therefore the amount of (TCP) DDoS attack traffic they can filter is to use the mangle table and the PREROUTING chain!
The Best Linux Kernel Settings to Mitigate DDoS</p>
<p>Another common mistake is that people don&rsquo;t use optimized kernel settings to better mitigate the effects of DDoS attacks. Note that this guide focuses on CentOS 7 as the operating system of choice. CentOS 7 includes a recent version of iptables and support of the new SYNPROXY target.</p>
<p>We won&rsquo;t cover every single kernel setting that you need to adjust in order to better mitigate DDoS with iptables. Instead, we provide a set of CentOS 7 kernel settings that we would use. Just put the below in your /etc/sysctl.conf file and apply the settings with sysctl -p.
Anti-DDoS Kernel Settings (sysctl.conf)</p>
<pre tabindex="0"><code>kernel.printk = 4 4 1 7
kernel.panic = 10
kernel.sysrq = 0
kernel.shmmax = 4294967296
kernel.shmall = 4194304
kernel.core_uses_pid = 1
kernel.msgmnb = 65536
kernel.msgmax = 65536
vm.swappiness = 20
vm.dirty_ratio = 80
vm.dirty_background_ratio = 5
fs.file-max = 2097152
net.core.netdev_max_backlog = 262144
net.core.rmem_default = 31457280
net.core.rmem_max = 67108864
net.core.wmem_default = 31457280
net.core.wmem_max = 67108864
net.core.somaxconn = 65535
net.core.optmem_max = 25165824
net.ipv4.neigh.default.gc_thresh1 = 4096
net.ipv4.neigh.default.gc_thresh2 = 8192
net.ipv4.neigh.default.gc_thresh3 = 16384
net.ipv4.neigh.default.gc_interval = 5
net.ipv4.neigh.default.gc_stale_time = 120
net.netfilter.nf_conntrack_max = 10000000
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.ip_no_pmtu_disc = 1
net.ipv4.route.flush = 1
net.ipv4.route.max_size = 8048576
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_congestion_control = htcp
net.ipv4.tcp_mem = 65536 131072 262144
net.ipv4.udp_mem = 65536 131072 262144
net.ipv4.tcp_rmem = 4096 87380 33554432
net.ipv4.udp_rmem_min = 16384
net.ipv4.tcp_wmem = 4096 87380 33554432
net.ipv4.udp_wmem_min = 16384
net.ipv4.tcp_max_tw_buckets = 1440000
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_max_orphans = 400000
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_ecn = 2
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_intvl = 60
net.ipv4.tcp_keepalive_probes = 10
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.ip_forward = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.rp_filter = 1
</code></pre><p>These sysctl.conf settings help to maximize the performance of your server under DDoS as well as the effectiveness of the iptables rules that we&rsquo;re going to provide in this guide.
The Actual IPtables Anti-DDoS Rules</p>
<p>Considering you now know that you need to use the mangle table and the PREROUTING chain as well as optimized kernel settings to mitigate the effects of DDoS attacks, we&rsquo;ll now move on to a couple of example rules to mitigate most TCP DDoS attacks.</p>
<p>DDoS attacks are complex. There are many different types of DDoS and it&rsquo;s close to impossible to maintain signature-based rules against all of them. But luckily there is something called connection tracking (nf_conntrack kernel module), which can help us to mitigate almost any TCP-based DDoS attack that doesn&rsquo;t use SYN packets that seem legitimate. This includes all types of ACK and SYN-ACK DDoS attacks as well as DDoS attacks that use bogus TCP flags.</p>
<p>We&rsquo;ll start with just five simple iptables rules that will already drop many TCP-based DDoS attacks.
Block Invalid Packets</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP
</code></pre><p>This rule blocks all packets that are not a SYN packet and don&rsquo;t belong to an established TCP connection.
Block New Packets That Are Not SYN</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
</code></pre><p>This blocks all packets that are new (don&rsquo;t belong to an established connection) and don&rsquo;t use the SYN flag. This rule is similar to the &ldquo;Block Invalid Packets&rdquo; one, but we found that it catches some packets that the other one doesn&rsquo;t.
Block Uncommon MSS Values</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
</code></pre><p>The above iptables rule blocks new packets (only SYN packets can be new packets as per the two previous rules) that use a TCP MSS value that is not common. This helps to block dumb SYN floods.
Block Packets With Bogus TCP Flags</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
</code></pre><p>The above ruleset blocks packets that use bogus TCP flags, ie. TCP flags that legitimate packets wouldn&rsquo;t use.
Block Packets From Private Subnets (Spoofing)</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP
iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP
iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
</code></pre><p>These rules block spoofed packets originating from private (local) subnets. On your public network interface you usually don&rsquo;t want to receive packets from private source IPs. These rules assume that your loopback interface uses the 127.0.0.0/8 IP space.</p>
<p>These five sets of rules alone already block many TCP-based DDoS attacks at very high packet rates. With the kernel settings and rules mentioned above, you&rsquo;ll be able to filter ACK and SYN-ACK attacks at line rate.
Additional Rules</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p icmp -j DROP
</code></pre><p>This drops all ICMP packets. ICMP is only used to ping a host to find out if it&rsquo;s still alive. Because it&rsquo;s usually not needed and only represents another vulnerability that attackers can exploit, we block all ICMP packets to mitigate Ping of Death (ping flood), ICMP flood and ICMP fragmentation flood.</p>
<pre tabindex="0"><code>iptables -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset
</code></pre><p>This iptables rule helps against connection attacks. It rejects connections from hosts that have more than 80 established connections. If you face any issues you should raise the limit as this could cause troubles with legitimate clients that establish a large number of TCP connections.</p>
<p>iptables -A INPUT -p tcp -m conntrack &ndash;ctstate NEW -m limit &ndash;limit 60/s &ndash;limit-burst 20 -j ACCEPT
iptables -A INPUT -p tcp -m conntrack &ndash;ctstate NEW -j DROP</p>
<p>Limits the new TCP connections that a client can establish per second. This can be useful against connection attacks, but not so much against SYN floods because the usually use an endless amount of different spoofed source IPs.</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -f -j DROP
</code></pre><p>This rule blocks fragmented packets. Normally you don&rsquo;t need those and blocking fragments will mitigate UDP fragmentation flood. But most of the time UDP fragmentation floods use a high amount of bandwidth that is likely to exhaust the capacity of your network card, which makes this rule optional and probably not the most useful one.</p>
<pre tabindex="0"><code>iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP
</code></pre><p>This limits incoming TCP RST packets to mitigate TCP RST floods. Effectiveness of this rule is questionable.
Mitigating SYN Floods With SYNPROXY</p>
<p>SYNPROXY is a new target of iptables that has been added in Linux kernel version 3.12 and iptables 1.4.21. CentOS 7 backported the feature and it&rsquo;s available in its 3.10 default kernel.</p>
<p>The purpose of SYNPROXY is to check whether the host that sent the SYN packet actually establishes a full TCP connection or just does nothing after it sent the SYN packet. If it does nothing, it discards the packet with minimal performance impact.</p>
<p>While the iptables rules that we provided above already block most TCP-based attacks, the attack type that can still slip through them if sophisticated enough is a SYN flood. It&rsquo;s important to note that the performance of the rules will always be better if we find a certain pattern or signature to block, such as packet length (-m length), TOS (-m tos), TTL (-m ttl) or strings and hex values (-m string and -m u32 for the more advanced users). But in some rare cases that&rsquo;s not possible or at least not easy to achieve. So in these cases, you can make use of SYNPROXY.</p>
<p>Here are iptables SYNPROXY rules that help mitigate SYN floods that bypass our other rules:</p>
<pre tabindex="0"><code>iptables -t raw -D PREROUTING -p tcp -m tcp --syn -j CT --notrack
iptables -D INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460
iptables -D INPUT -m conntrack --ctstate INVALID -j DROP
</code></pre><p>These rules apply to all ports. If you want to use SYNPROXY only on certain TCP ports that are active (recommended - also you should block all TCP ports that are not in use using the mangle table and PREROUTING chain), you can just add &ndash;dport 80 to each of the rules if you want to use SYNPROXY on port 80 only.</p>
<p>To verify that SYNPROXY is working, you can do watch -n1 cat /proc/net/stat/synproxy. If the values change when you establish a new TCP connection to the port you use SYNPROXY on, it works.
The Complete IPtables Anti-DDoS Rules</p>
<p>If you don&rsquo;t want to copy &amp; paste each single rule we discussed in this article, you can use the below ruleset for basic DDoS protection of your Linux server.</p>
<h3 id="drop-invalid-packets">Drop invalid packets</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP
</code></pre><h3 id="drop-tcp-packets-that-are-new-and-are-not-syn">Drop TCP packets that are new and are not SYN</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
</code></pre><h3 id="drop-syn-packets-with-suspicious-mss-value">Drop SYN packets with suspicious MSS value</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
</code></pre><h3 id="block-packets-with-bogus-tcp-flags">Block packets with bogus TCP flags</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
</code></pre><h3 id="block-spoofed-packets">Block spoofed packets</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
</code></pre><h3 id="drop-icmp-you-usually-dont-need-this-protocol">Drop ICMP (you usually don&rsquo;t need this protocol)</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p icmp -j DROP
</code></pre><h3 id="drop-fragments-in-all-chains">Drop fragments in all chains</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -f -j DROP
</code></pre><h3 id="limit-connections-per-source-ip">Limit connections per source IP</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset
</code></pre><h3 id="limit-rst-packets">Limit RST packets</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP
</code></pre><h3 id="limit-new-tcp-connections-per-second-per-source-ip">Limit new TCP connections per second per source IP</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP
</code></pre><h3 id="use-synproxy-on-all-ports-disables-connection-limiting-rule">Use SYNPROXY on all ports (disables connection limiting rule)</h3>
<pre tabindex="0"><code>#/sbin/iptables -t raw -D PREROUTING -p tcp -m tcp --syn -j CT --notrack
#/sbin/iptables -D INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460
#/sbin/iptables -D INPUT -m conntrack --ctstate INVALID -j DROP
</code></pre><p>Bonus Rules</p>
<p>Here are some more iptables rules that are useful to increase the overall security of a Linux server:</p>
<h3 id="ssh-brute-force-protection">SSH brute-force protection</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set
/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP
</code></pre><h3 id="protection-against-port-scanning">Protection against port scanning</h3>
<pre tabindex="0"><code>/sbin/iptables -N port-scanning
/sbin/iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
/sbin/iptables -A port-scanning -j DROP
</code></pre><h3 id="conclusion">Conclusion</h3>
<p>This tutorial demonstrates some of the most powerful and effective methods to stop DDoS attacks using iptables. We&rsquo;ve successfully mitigated DDoS attacks that peaked at multiple million packets per second using these iptables rules.</p>
<p>Every single guide on the same topic that we had researched provided inefficient methods to stop DDoS traffic or only a very limited number of iptables rules. If used correctly, iptables is an extremely powerful tool that&rsquo;s able to block different types of DDoS attacks at line-rate of 1GigE NICs and close to line-rate of 10GigE NICs. Don&rsquo;t underestimate the power of iptables!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hardened sysctl Configuration by k4yt3x</title>
      <link>https://shenlong616.github.io/posts/github/hardened-sysctl-configuration-by-k4yt3x/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/hardened-sysctl-configuration-by-k4yt3x/</guid>
      <description>This repository hosts my hardened version of sysctl.conf. This configuration file aims to provide better security for Linux systems and improves system performance whenever possible. For example, below are some of the features this configuration file provides.
Prevents kernel pointers from being read Disables Ptrace for all programs Disallows core dumping by SUID/GUID programs Disables IPv4/IPv6 routing Enables BBR TCP congestion control Enables SYN cookies to mitigate SYN flooding attacks Enables IP reverse path filtering for source validation &amp;hellip; Please review the configuration file carefully before applying it.</description>
      <content:encoded><![CDATA[<p>This repository hosts my hardened version of <code>sysctl.conf</code>. This configuration file aims to provide better security for Linux systems and improves system performance whenever possible. For example, below are some of the features this configuration file provides.</p>
<ul>
<li>Prevents kernel pointers from being read</li>
<li>Disables Ptrace for all programs</li>
<li>Disallows core dumping by SUID/GUID programs</li>
<li>Disables IPv4/IPv6 routing</li>
<li>Enables BBR TCP congestion control</li>
<li>Enables SYN cookies to mitigate SYN flooding attacks</li>
<li>Enables IP reverse path filtering for source validation</li>
<li>&hellip;</li>
</ul>
<p><strong>Please review the configuration file carefully before applying it.</strong> You are responsible for actions done to your system. If you need some guidance understanding what each of the settings is for, <a href="https://sysctl-explorer.net/">sysctl-explorer</a> might come in handy. You may also consult <a href="https://www.kernel.org/doc/Documentation/sysctl/">Linux&rsquo;s kernel documentation</a>.</p>
<h2 id="assumptions">Assumptions</h2>
<p>This configuration file is written with a few assumptions about your OS. You can still use this configuration as a template if your OS does not match these assumptions (e.g., set <code>net.ipv4.ip_forward</code> to <code>1</code> on a router). Making these assumptions helps us to develop a configuration file with the most number of optimizations enabled for common systems.</p>
<ul>
<li>Security is valued over performance and convenience</li>
<li>The OS does not act as a router</li>
<li>The OS is running on a 64-bit system</li>
<li>The OS is on a network that is relatively stable (e.g., wired vs. LTE)</li>
<li>No debugging features are required (e.g., no need for GDB/kdump)</li>
<li>ICMP echo messages are not regarded as harmful</li>
</ul>
<h2 id="configuration-deployment">Configuration Deployment</h2>
<p>Linux kernel configuration files are stored in the directory <code>/etc/sysctl.d</code>. Configurations in all files having a suffix of <code>.conf</code> will read by the <code>procps</code> (a.k.a. <code>systemd-sysctl</code>) service. Additionally, the <code>procps</code> service also loads configurations from the following directories.</p>
<ul>
<li><code>/run/sysctl.d</code></li>
<li><code>/usr/local/lib/sysctl.d</code></li>
<li><code>/usr/lib/sysctl.d</code></li>
<li><code>/lib/sysctl.d</code></li>
</ul>
<p>Files are sorted and read by their file names in lexicographic order. Variables read later will overwrite variables read earlier. For example, configurations in <code>20-something.conf</code> will be read before <code>99-sysctl.conf</code>. If a variable exists in both files, values read from <code>20-something.conf</code> will be overwritten by values read from <code>99-sysctl.conf</code>.</p>
<pre tabindex="0"><code class="language-properties" data-lang="properties"># in 20-something.conf
net.ipv4.ip_forward = 0

# in 99-sysctl.conf
net.ipv4.ip_forward = 1

# net.ipv4.ip_forward will be 1
</code></pre><h3 id="method-1-deploy-definitively">Method 1: Deploy Definitively</h3>
<p>By default, on most Linux distributions, the <code>/etc/sysctl.d/99-sysctl.conf</code> file is a link to the <code>/etc/sysctl.conf</code> file. Therefore, you may write the variables into the <code>/etc/sysctl.conf</code>. However, since configuration files with a file name that starts with an alphabetical character sort later in the list than <code>99-sysctl.conf</code>, the changes you make in the <code>/etc/sysctl.conf</code> might not be the final value loaded into the kernel. To make sure that your changes are loaded into the kernel, you would have to make sure that your configuration file&rsquo;s name is lexicographically the last file in <code>/etc/sysctl.d</code>. The filename <code>z-k4yt3x.conf</code> will be used as an example in the code snippet below.</p>
<p>This deployment method is suitable for systems that do not expect to have their sysctl configurations updated from this repository anymore. Otherwise, the configuration file&rsquo;s content has to be updated every time a new update form this repository is installed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># download the configuration file from GitHub using curl</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you may also download with wget or other methods if curl is not available</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move the configuration file into the sysctl configuration directory</span>
</span></span><span class="line"><span class="cl">sudo mv ~/sysctl.conf /etc/sysctl.d/z-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make sure the file has correct ownership and permissions</span>
</span></span><span class="line"><span class="cl">sudo chown root:root /etc/sysctl.d/z-k4yt3x.conf
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">644</span> /etc/sysctl.d/z-k4yt3x.conf
</span></span></code></pre></div><h3 id="method-2-deploy-as-template">Method 2: Deploy as Template</h3>
<p>Alternatively, you can use this configuration file as a template. If you name the configuration file something akin to <code>/etc/sysctl.d/98-k4yt3x.conf</code>, you may overwrite values in this configuration file by giving them a new definition the <code>/etc/sysctl.conf</code> file.</p>
<p>The advantage of doing this is that you would not have to change this template file&rsquo;s content every time it is updated in this repository. You can drop the template file in and make any modifications in <code>/etc/sysctl.conf</code>.</p>
<p>This method&rsquo;s disadvantage is that values from this template might be overwritten by values in other configurations unknowingly. For example, a <code>uhd-usrp2.conf</code> exists on my system, and overwrites the value of <code>net.core.rmem_max</code> and <code>net.core.wmem_max</code> set in previous configuration files. Packages managers can install new configurations as you install a new package or update your system. Therefore, you will have to be careful that other files do not overwrite your variables.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># download the configuration file from GitHub using curl</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you may also download with wget or other methods if curl is not available</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move the configuration file into the sysctl configuration directory</span>
</span></span><span class="line"><span class="cl">sudo mv ~/sysctl.conf /etc/sysctl.d/98-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make sure the file has correct ownership and permissions</span>
</span></span><span class="line"><span class="cl">sudo chown root:root /etc/sysctl.d/98-k4yt3x.conf
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">644</span> /etc/sysctl.d/98-k4yt3x.conf
</span></span></code></pre></div><h3 id="method-3-custom-order-personal-recommendation">Method 3: Custom Order (Personal Recommendation)</h3>
<p>To ensure that the configuration files are read in an order you prefer, you may also rename the files to your preference. For example, you can install this template to <code>/etc/sysctl.d/y-k4yt3x.conf</code>, then make a symbolic link from <code>/etc/sysctl.d/z-sysctl.conf</code> to <code>/etc/sysctl.conf</code>. This ensures that the two files are more likely to be read the last.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># download the configuration file from GitHub using curl</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you may also download with wget or other methods if curl is not available</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move the configuration file into the sysctl configuration directory</span>
</span></span><span class="line"><span class="cl">sudo mv ~/sysctl.conf /etc/sysctl.d/y-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make sure the file has correct ownership and permissions</span>
</span></span><span class="line"><span class="cl">sudo chown root:root /etc/sysctl.d/y-k4yt3x.conf
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">644</span> /etc/sysctl.d/y-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># point z-sysctl.conf to /etc/sysctl.conf</span>
</span></span><span class="line"><span class="cl">sudo ln -s /etc/sysctl.conf /etc/sysctl.d/z-sysctl.conf
</span></span></code></pre></div><h2 id="loading-and-verifying-the-changes">Loading and Verifying the Changes</h2>
<p>For the changes to be effective, you will have to either reboot your machine or reload the configurations using one of the following commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># instruct sysctl to load settings from the configuration file into the live kernel</span>
</span></span><span class="line"><span class="cl"><span class="c1"># this command allows you to see the variables as they are being loaded</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># alternatively, you can restart the systemd-sysctl service on a system that uses systemd</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart systemd-sysctl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># procps is an alias of systemd-sysctl</span>
</span></span><span class="line"><span class="cl"><span class="c1"># restarting either one of procps and systemd-sysctl would work</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart procps
</span></span></code></pre></div><p>Afterwards, you may verify your changes by dumping all kernel variables. Replace <code>your.config</code> in the following command with the name of the variable you would like to check.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo sysctl -a <span class="p">|</span> grep <span class="s2">&#34;your.config&#34;</span>
</span></span></code></pre></div><p>For example, the following command prints the value of <code>kernel.kptr_restrict</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo sysctl -a <span class="p">|</span> grep <span class="s2">&#34;kernel.kptr_restrict&#34;</span>
</span></span><span class="line"><span class="cl">kernel.kptr_restrict <span class="o">=</span> <span class="m">2</span>
</span></span></code></pre></div><h2 id="short-url-for-downloading-sysctlconf">Short URL for Downloading <code>sysctl.conf</code></h2>
<p>For convenience, I have pointed the URL <code>https://k4t.io/sysctl</code> to the <code>sysctl.conf</code> file. You may therefore download the <code>sysctl.conf</code> file with the following command. However, be sure to check the file&rsquo;s integrity after downloading it if you choose to download using this method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -L k4t.io/sysctl -o sysctl.conf
</span></span></code></pre></div><h2 id="backup">Backup</h2>
<ol>
<li><a href="../../files/sysctl.conf">sysctl.conf</a></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>JavaScript tips &amp; tricks by TuanNguyen2504</title>
      <link>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-tuannguyen2504/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-tuannguyen2504/</guid>
      <description>This is a collection of JavaScript tips and tricks. you can refer to it and apply it to make your code more concise. But don’t overdo it, it can make your code difficult to read and maintain. Hope everyone contributes, thanks.</description>
      <content:encoded><![CDATA[<!-- logo -->
<div align="center">
  <img  src="../../images/javascript-tips-tricks-by-tuannguyen2504.jpg" />
</div>
<!-- Tips for array -->
<h1 id="array">Array</h1>
<details >
  <summary>
    1. Generate an Array
  </summary>
<ul>
<li>
<p>Create an empty array of length <strong><code>n</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: arr = [undefined, undefined, undefined]
</span></span></span></code></pre></div></li>
<li>
<p>Create an empty array of length <strong><code>n</code></strong> &amp; fill value <strong><code>x</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">1</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">  result: arr = [1, 1, 1]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr2 = [1, 1, 1, undefined, undefined]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></li>
<li>
<p>Create an array containing <code>0...n</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="mi">5</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: arr = [0, 1, 2, 3, 4]
</span></span></span></code></pre></div></li>
<li>
<p>Create an array containing <code>1...n</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr4</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">  result: arr =  [1, 2, 3, 4]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr2 = [1, 2, 3, 4]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr3 = [0, 2, 4, 6]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr4 = [0.211, 0.5123, 0.612, 0.8921]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></li>
</ul>
</details>
<details >
  <summary>
    2. Extract Unique Values of Array
  </summary>
<br />
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">arr</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: newArr = [1, 2, 3, 5, 4]
</span></span></span></code></pre></div></details>
<details >
  <summary>
    3. Shuffle Elements from Array
  </summary>
<br />
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: newArr = [3, 1, 2, 4, 5]
</span></span></span></code></pre></div></details>
<details >
  <summary>
    4. Flatten a Multidimensional Array
  </summary>
<br />
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="mi">7</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(...</span><span class="nx">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: [1, 2, 3, 4, 5, 6, 7]
</span></span></span></code></pre></div></details>
<details >
  <summary>
    5. Resize an Array
  </summary>
<blockquote>
<p>The length array isn&rsquo;t a read only property.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">arr2</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">arr3</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  result: arr = [1, 2]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr2 = []
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr3 = [1, 2, 3, 4, 5, undefined, undefined]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></details>
<details >
  <summary>
    6. Random an Item in Array
  </summary>
<br />
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span></span></code></pre></div></details>
<details >
  <summary>
    7. Remove an Item from Array
  </summary>
<br />
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Not Recommended
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// arr = [1, undefined, 3], length = 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Recommended
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// arr = [1, 3], length = 2
</span></span></span></code></pre></div></details>
<h1 id="object">Object</h1>
<details >
  <summary>
    1. Dynamic Property Name
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">dynamic</span> <span class="o">=</span> <span class="s2">&#34;age&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">dynamicValue</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">dynamic</span><span class="p">]</span><span class="o">:</span> <span class="nx">dynamicValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: obj = { name: &#39;Dyno&#39;, age: 18 }
</span></span></span></code></pre></div></details>
<br />
<details >
  <summary>
    2. Clone an Object
  </summary>
<ul>
<li>
<p>Shallow copy <code>(Not Recommended)</code></p>
<blockquote>
<p>Use the <code>=</code> operator to copy object 1 into object 2. These 2 objects point to the same memory area <code>(reference)</code>. Therefore, if we change object 1, object 2 will also change.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nx">obj1</span><span class="p">;</span> <span class="c1">// obj2 = { a: 1, b: 2 }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// change value of a property
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// { a: 3, b: 2 }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { a: 3, b: 2 } =&gt; property a of obj2 changed 🙂❗
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj3</span><span class="p">);</span> <span class="c1">// { a: 3, b: 2 } =&gt; property a of obj2 changed 🙂❗
</span></span></span></code></pre></div></li>
<li>
<p>Deep copy</p>
<blockquote>
<p><strong>Way 1</strong>: Use Spread operator <code>{...}</code> or <code>Object.assign()</code> to fix &ldquo;Shallow copy&rdquo;. <strong><em>Issue:</em></strong> <code>Nested objects</code> still have shallow copy problem.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="p">{</span> <span class="nx">nested</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">obj1</span> <span class="p">};</span> <span class="c1">// obj2 = { a: 1, b: 2, c: { nested: 3 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">obj1</span><span class="p">);</span> <span class="c1">// obj3 = { a: 1, b: 2, c: { nested: 3 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">nested</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// { a: 1, b: 3, c: { nested: 4 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { a: 1, b: 2, c: { nested: 4 } } 🙂
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj3</span><span class="p">);</span> <span class="c1">// { a: 1, b: 2, c: { nested: 4 } } 🙂
</span></span></span></code></pre></div><blockquote>
<p><strong>Way 2 <code>(Recommended)</code></strong>: Use <code>JSON.stringify()</code> &amp; <code>JSON.parse()</code> to solve the above problems.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="p">{</span> <span class="nx">nested</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj1</span><span class="p">));</span> <span class="c1">// obj2 = { a: 1, b: 2, c: { nested: 3 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">nested</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// { a: 1, b: 3, c: { nested: 4 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { a: 1, b: 2, c: { nested: 3 } } 😉😘
</span></span></span></code></pre></div></li>
</ul>
<br />
</details>
<h1 id="destructuring-es6">Destructuring (ES6+)</h1>
<details>
  <summary>
    1. With Array
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = 3;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, c = 3
</span></span></span><span class="line"><span class="cl"><span class="c1">// ignore values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, rest = [4, 5]
</span></span></span><span class="line"><span class="cl"><span class="c1">// use &#34;rest params ES6&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = undefined;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1">// declare and set default value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">[</span><span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">],</span> <span class="nx">e</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = 3, d = 4, e = 5
</span></span></span><span class="line"><span class="cl"><span class="c1">// nested array destructuring
</span></span></span></code></pre></div></details>
<details>
  <summary>
    2. With Object
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var name = person.name, age = person.age;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Anonymous&#34;</span><span class="p">,</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">address</span> <span class="o">=</span> <span class="s2">&#34;HCM city&#34;</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var name = person.name, age = person.age, address: &#39;HCM city&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1">// declare and set default value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">personName</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="nx">personAge</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var personName =  person.name, personAge = person.age
</span></span></span><span class="line"><span class="cl"><span class="c1">// decleare and change variable name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: console.log({ name: name, age: age })
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">infor</span><span class="o">:</span> <span class="p">{</span> <span class="nx">address</span><span class="o">:</span> <span class="s2">&#34;HCM&#34;</span><span class="p">,</span> <span class="nx">phone</span><span class="o">:</span> <span class="s2">&#34;123&#34;</span> <span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">infor</span><span class="o">:</span> <span class="p">{</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">phone</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: name = person.name, age = person.agem, address = person.infor.address, phone = person.infor.phone
</span></span></span><span class="line"><span class="cl"><span class="c1">// nested object destructuring
</span></span></span></code></pre></div></details>
<h1 id="operator">Operator</h1>
<details>
  <summary>
    1. Optional chaining (?.)
  </summary>
<br/>
<blockquote>
<p>&ldquo;The optional chaining operator <code>?.</code> enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.&rdquo; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">MDN</a></p>
</blockquote>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sayHello</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ❗ Wrong way
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span> <span class="c1">// ❌ Uncaught TypeError: Cannot read property &#39;address&#39; of undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ✅ Right way (check condition)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span> <span class="c1">// Not log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ✅ Right way (use ?.)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span> <span class="c1">// undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Optional chaining with function calls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHello</span><span class="o">?</span><span class="p">.());</span> <span class="c1">// Hello
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">callPhone</span><span class="o">?</span><span class="p">.());</span> <span class="c1">// undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A chain Optional chaining
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="o">?</span><span class="p">.</span><span class="nx">province</span><span class="o">?</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// undefined
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">val</span><span class="o">?</span><span class="p">.</span><span class="nx">prop</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">val</span><span class="o">?</span><span class="p">.[</span><span class="nx">expr</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">arr</span><span class="o">?</span><span class="p">.[</span><span class="nx">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">func</span><span class="o">?</span><span class="p">.(</span><span class="nx">args</span><span class="p">);</span>
</span></span></code></pre></div></details>
<details>
  <summary>
    2. Nullish coalescing operator (??)
  </summary>
  <br/>
<blockquote>
<p>&ldquo;The nullish coalescing operator <code>??</code> is a logical operator that returns its right-hand side operand when its left-hand side operand is <code>null</code> or <code>undefined</code>, and otherwise returns its left-hand side operand.&rdquo; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">MDN</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">null</span> <span class="o">??</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = &#39;Default&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">false</span> <span class="o">??</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = false
</span></span></span></code></pre></div></details>
<details>
  <summary>
    3. Logical OR (||)
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">||</span> <span class="nx">b</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Dyno&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: Dyno
</span></span></span></code></pre></div><blockquote>
<p>The OR operator <code>||</code> is a logical operator that returns its right-hand side operand when its left-hand side operand is <code>falsy</code>, and otherwise returns its left-hand side operand.</p>
</blockquote>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">null</span> <span class="o">||</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = &#39;Default&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">false</span> <span class="o">||</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = &#39;Default&#39;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    4. Logical AND (&&)
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">b</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span> <span class="c1">// Hello (a, b = true)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Dyno&#34;</span><span class="p">);</span> <span class="c1">// not log (c = false)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// other usage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hi&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">c</span> <span class="o">&amp;&amp;</span> <span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// false
</span></span></span></code></pre></div></details>
<details>
  <summary>
    5. Double tilde operator (~~)
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mf">2.6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">~~</span><span class="nx">num</span><span class="p">);</span> <span class="c1">// 2 = Math.floor(2)
</span></span></span></code></pre></div></details>
<details>
  <summary>
    6. Logical Assignment Operator ES12  (||=, ??=) 
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">||=</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">// same a = a || b;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">a</span> <span class="o">??=</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">// same a = a ?? b;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    7. Numeric separator ES12 (_)
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">1_000_000_000</span><span class="p">;</span> <span class="c1">// same: n = 1000000000;
</span></span></span></code></pre></div></details>
<h1 id="comparison">Comparison</h1>
<details>
  <summary>
    1. Use === instead of ==
  </summary>
<br/>
<blockquote>
<p>The operator <code>== (!=)</code> will automatically cast if 2 variables are not of the same type, then compare. The <code>=== (!==)</code> operator compares the value and the type =&gt; <code>===</code> faster than <code>==</code>.</p>
</blockquote>
<br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="mi">1</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="mi">1</span> <span class="o">===</span> <span class="s1">&#39;1&#39;</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="mi">0</span> <span class="o">==</span> <span class="kc">false</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="mi">0</span> <span class="o">===</span> <span class="kc">false</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="kc">false</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="kc">false</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="p">[]</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">[]</span> <span class="o">===</span> <span class="mi">0</span> <span class="c1">// false
</span></span></span></code></pre></div></details>
<details>
  <summary>
    2. The difference between isNaN() and Number.isNaN() 
  </summary>
<br/>
<blockquote>
<p>The <code>isNaN()</code> method (is Not a Number ?) use to check if a variable is <strong>a Number</strong>. The <code>Number.isNaN()</code> (is NaN ?) method use to check if a variable is <strong>NaN</strong></p>
</blockquote>
<br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, &#39;string&#39; is not Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">([]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, [] is not Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">(</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, 0/0 is not Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// false, 1 is Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// false, &#39;string&#39; is not NaN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">([]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// false, [] is not NaN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, 0/0 is NaN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true
</span></span></span></code></pre></div></details>
<h1 id="others">Others</h1>
<details>
  <summary>
    1. Swapping use Destructuring
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: a = 2, b = 1;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    2. Create function that returns only 1 object
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">({</span> <span class="nx">obj</span><span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  same: const fn = () =&gt; {
</span></span></span><span class="line"><span class="cl"><span class="cm">    return { obj: 1 }
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></details>
<details>
  <summary>
    3. Immediately Invoked Function Expression (IIFE)
  </summary>
  <br/>
<blockquote>
<p>The function will execute automatically when you create it.</p>
</blockquote>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="c1">// Way 1:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">()(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">})();</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// result: Hello, res = true;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Way 2:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">})();</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// result: Hello, res = true;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    4. typeof vs instanceof 
  </summary>
  <br/>
<blockquote>
<p><code>typeof</code>: return a string that represents the primitive type of a variable.</p>
</blockquote>
<blockquote>
<p><code>instanceof</code>: check in all the prototypes chain the constructor it returns true if it’s found and false if not.</p>
</blockquote>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">typeof</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &#34;number&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// &#34;number&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="s2">&#34;str&#34;</span><span class="p">;</span> <span class="c1">// &#34;string&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// &#34;boolean&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="p">{};</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="p">[];</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// &#34;undefined&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="p">{};</span> <span class="c1">// &#34;function&#34;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    5. Falsy
  </summary>
  <br/>
<blockquote>
<p>A <code>Falsy value</code> is a value that is considered false when encountered in a Boolean context . <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">MDN</a></p>
</blockquote>
<blockquote>
<p>Complete list of JavaScript falsy values <code> false, 0, -0, 0n, &quot;&quot;, '', ``, NaN, null, undefined, document.all</code></p>
</blockquote>
<blockquote>
<p>Falsy value bypass the if block. Ex:</p>
</blockquote>
<br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Falsy&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="s2">&#34;Falsy&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: Falsy, a = &#34;Falsy&#34;
</span></span></span></code></pre></div><blockquote>
<p>Filter out Falsy values</p>
</blockquote>
<br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">,</span> <span class="mi">2000</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">filteredArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: filteredArr = [1, &#34;Dyno&#34;, true, 2000]
</span></span></span></code></pre></div></details>
<details>
  <summary>
    6. Template string `${}`
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hello1</span> <span class="o">=</span> <span class="s2">&#34;Hello &#34;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&#34;, how are you?&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hello2</span> <span class="o">=</span> <span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, how are you?`</span><span class="p">;</span> <span class="c1">// template string.
</span></span></span></code></pre></div></details>
<details>
  <summary>
    7. Rounding number to n decimal place
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mf">25.0420001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// &#34;number&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">num</span> <span class="o">=</span> <span class="nx">num</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// num = &#34;25.04&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// ❗ &#34;string&#34;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    8. Check variable - convert a variable to Boolean (!! operator)
  </summary>
  <br/>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!!</span><span class="kc">null</span><span class="p">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!!</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!!</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div></details>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python 3 tricks by alexghergh</title>
      <link>https://shenlong616.github.io/posts/github/python-3-tricks-by-alexghergh/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/python-3-tricks-by-alexghergh/</guid>
      <description>Disclaimer: This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.
Looping over a range of numbers Using range() is better than using a list (ex.</description>
      <content:encoded><![CDATA[<p><strong><em>Disclaimer:</em></strong> This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.</p>
<h3 id="looping-over-a-range-of-numbers">Looping over a range of numbers</h3>
<p>Using <code>range()</code> is better than using a list (ex. <code>[1, 2, 3]</code>), because the list takes up memory space, whereas the <code>range()</code> function generates values on demand, thus taking a fixed amount of memory whatever the size of the elements is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>takes the same memory space as:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> This function used to create a list in python2, and <code>xrange()</code> used to do what <code>range()</code> currently does, but it got changed, so <code>range()</code> in python3 is <code>xrange()</code> in python2.</p>
<h3 id="looping-backwards">Looping backwards</h3>
<p>Use the function <code>reversed()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints rust, kotlin, c++, java, python, c</span>
</span></span></code></pre></div><h3 id="looping-over-a-collection-and-indices">Looping over a collection and indices</h3>
<p>Use the function <code>enumerate()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">lang</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">lang</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0 --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 --&gt; python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 --&gt; java</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3 --&gt; c++</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4 --&gt; kotlin</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 5 --&gt; rust</span>
</span></span></code></pre></div><h3 id="looping-over-two-collections">Looping over two collections</h3>
<p>Use the function <code>zip()</code>. It returns tuples of the elements until one of the iterables is exahusted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">number</span><span class="p">,</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">lang</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 --&gt; python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3 --&gt; java</span>
</span></span></code></pre></div><p><strong>Note:</strong> It takes any number of iterables and &ldquo;zips&rdquo; them into tuples.</p>
<p><strong>Note 2:</strong> It&rsquo;s important to note that it generates tuples on demand, so it reuses memory space (it used to create a third list in python2, and <code>izip()</code> used to do what <code>zip()</code> does now in python3).</p>
<h3 id="looping-in-sorted-order">Looping in sorted order</h3>
<p>Use the function <code>sorted()</code> or the method <code>sort()</code> of iterables.</p>
<p>By default, it sorts the iterable in ascending order:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints c c++ java kotlin python rust</span>
</span></span></code></pre></div><p>The second method sorts the iterable IN-PLACE, whilst the first returns a different iterable.</p>
<p>Both the functions can take 2 extra parameters which can specify a comparison function and if the iterable should be reversed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">langs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints kotlin python java rust c++ c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># notice that kotlin and python might be interchanged because they have the same size, same java and rust</span>
</span></span></code></pre></div><h3 id="partial-functions">Partial functions</h3>
<p>A partial function is a function who has some parameters &ldquo;frozen&rdquo;, in the sense that they are preset. The other parameters must be given when the partial function is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">z</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_func</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># assign (preset) 2 to x, 3 to y</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">#   equivalent to func(2, 3, 3)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   prints 17</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1">#   equivalent to func(2, 3, 4)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   prints 20</span>
</span></span></code></pre></div><h3 id="fastest-way-to-format-multiple-strings">Fastest way to format multiple strings</h3>
<p>Going from fastest to slowest, they are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="s1"> </span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s1">&#39;</span>  <span class="c1"># fastest</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="si">%s</span><span class="s1"> </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Template</span><span class="p">(</span><span class="s1">&#39;$s $t&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>  <span class="c1"># slowest</span>
</span></span></code></pre></div><p><strong>Note:</strong> f-strings were added in Python 3.6.</p>
<h3 id="iterating-until-a-sentinel-value">Iterating until a sentinel value</h3>
<p>This method has 2 forms:</p>
<ol>
<li><code>iter(iterable)</code> - this form simply returns an iterator from the iterable. You can call <code>next()</code> on the iterator and iterate through the iterable.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ir</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">))</span> <span class="c1"># prints c</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">))</span> <span class="c1"># prints python</span>
</span></span></code></pre></div><ol start="2">
<li><code>iter(callable, sentinel)</code> - this form executes the function <code>callable</code> until it returns <code>sentinel</code> value.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">langs</span> <span class="o">=</span> <span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="n">langs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ir</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 4</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># raise StopIteration</span>
</span></span></code></pre></div><p>Read 80 characters from file <code>f</code> into <code>line</code> and append to <code>text</code> until <code>f.read()</code> returns <code>''</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">partial</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="mi">80</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="for-else-in-python">For else in Python</h3>
<p>Search a certain value in an iterable and do something if it is not there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="n">langs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">lang</span> <span class="o">==</span> <span class="s1">&#39;scala&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;We found Scala!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Scala is not in the list...&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> Careful if you ever come back to this kind of code. Don&rsquo;t indent the <code>else</code> statement by accident!!!</p>
<h3 id="looping-over-dictionary-keys">Looping over dictionary keys</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># cannot mutate dictionary here</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># free to mutate the keys and values</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="s1">&#39;foo&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>d.keys()</code> used to make a list copy of the keys, so there was no problem iterating and mutating the original dictionary at the same time. In modern Python3, <code>d.keys()</code> returns an iterable and can no longer be used to iterate and mutate a dictionary at the same time. To go around this, just wrap the method into a list as in the example.</p>
<p><strong>Note 2:</strong> There is an &lsquo;alternative&rsquo; to this, but it has worse performance and memory usage:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t do this, performance is bad as it copies every element in a dictionary and can be really bad for really big dictionaries</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="o">!=</span> <span class="s1">&#39;foo&#39;</span><span class="p">}</span>
</span></span></code></pre></div><h3 id="looping-over-dictionary-keys-and-values">Looping over dictionary keys and values</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>The <code>items()</code> method returns and iterator, so it uses the same amount of memory no matter how big the dictionary is.</p>
<p><strong>Note:</strong> In python2, the <code>items()</code> method used to return a list of tuples, and the <code>iteritems()</code> used to do what <code>items()</code> does now in python3.</p>
<h3 id="construct-a-dictionary-from-2-iterables">Construct a dictionary from 2 iterables</h3>
<p>Use the <code>zip()</code> method to pack 2 iterables into a zip object, then use the <code>dict()</code> method to make that into a dictionary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">langs</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>    <span class="c1"># prints {&#39;c&#39;: &#39;blue&#39;, &#39;python&#39;: &#39;green&#39;, &#39;java&#39;: &#39;red&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">colors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>    <span class="c1"># prints {1: &#39;blue&#39;, 2: &#39;green&#39;, 3: &#39;red&#39;}</span>
</span></span></code></pre></div><h3 id="populating-a-dictionary-with-default-data-counting-with-dictionary">Populating a dictionary with default data (Counting with dictionary)</h3>
<p>Use the <code>defaultdict()</code> method imported from <code>collections</code>. When a key is not in the dictionary, it creates a new key that has the default value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {&#39;blue&#39;: 1, &#39;green&#39;: 2, &#39;red&#39;: 3}</span>
</span></span></code></pre></div><p><strong>Note:</strong> This is a faster approach than <code>setdefault()</code> on most cases and faster than <code>get()</code> in all cases. Also, <code>defaultdict()</code> seems to work faster on native types like <code>int</code> or <code>string</code> and slower on <code>dict</code> or <code>list</code>. That being said, there are times when you cannot use <code>defaultdict()</code> and have to use either <code>setdefault()</code> or <code>get()</code>, for example when the default value of a certain key depends on the key itself, so <code>defaultdict()</code> cannot be used from the beginning to have a default value for every new key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">color</span> <span class="o">==</span> <span class="s1">&#39;red&#39;</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>    <span class="c1"># prints {&#39;blue&#39;: 1, &#39;green&#39;: 2, &#39;red&#39;: 5}</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> A case where <code>get()</code> accomplishes nicely what <code>setdefault()</code> and <code>defaultdict()</code> would do in a more complicated manner is when you have to return a default value from a dictionary if the key is not in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2</span><span class="p">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">3</span><span class="p">:</span> <span class="s1">&#39;Carla&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s1">&#39;Hi, </span><span class="si">{</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="s2">&#34;random person&#34;</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="c1"># prints Hi, Alice</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># prints Hi, random person</span>
</span></span></code></pre></div><h3 id="creating-a-list-with-n-elements">Creating a list with n elements</h3>
<p>Say you want to create a list with 100 elements of 0. You can just do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="ternary-operator-in-python">Ternary operator in Python</h3>
<p>This:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>can be written like this in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="grouping-data-with-dictionaries">Grouping data with dictionaries</h3>
<p>Say you want to group the items in a list based on some comparison function, for example <code>len()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;julia&#39;</span><span class="p">,</span> <span class="s1">&#39;mark&#39;</span><span class="p">,</span> <span class="s1">&#39;thomas&#39;</span><span class="p">,</span> <span class="s1">&#39;rachel&#39;</span><span class="p">,</span> <span class="s1">&#39;alex&#39;</span><span class="p">,</span> <span class="s1">&#39;maria&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {5: [&#39;julia&#39;, &#39;maria&#39;], 4: [&#39;mark&#39;, &#39;alex&#39;], 6: [&#39;thomas&#39;, &#39;rachel&#39;]}</span>
</span></span></code></pre></div><p>All you have to do to group based on some other function is change the <code>key</code> to something else.</p>
<h3 id="unpacking-sequences">Unpacking sequences</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="s1">&#39;alex&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span>         <span class="c1"># same as p = (&#39;alex&#39;, &#39;blue&#39;, 20, &#39;c&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">p</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>                            <span class="c1"># prints a tuple - (&#39;alex&#39;, &#39;blue&#39;, 20, &#39;c&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>       <span class="c1"># prints alex blue 20 c</span>
</span></span></code></pre></div><p><strong>Note:</strong> In the same manner, swapping 2 variables in python might be the most elegant way out of all the languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># swap x and y</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="c1"># prints 2 1</span>
</span></span></code></pre></div><h3 id="concatenating-strings">Concatenating strings</h3>
<p>Use the <code>join()</code> method to concatenate strings from an iterable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># join the strings from langs, having &#39;, &#39; as separator</span>
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="c1"># prints c, python, java, c++, kotlin, rust</span>
</span></span></code></pre></div><h3 id="atomicity-of-builtin-data-types">Atomicity of builtin data types</h3>
<p>Most (!not all) of the builtin data types methods are implemented using C function calls, so that makes it atomic.</p>
<p>For a better explanaton check <a href="https://webcache.googleusercontent.com/search?q=cache:9ATPT7NPHg0J:effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm+&amp;cd=4&amp;hl=en&amp;ct=clnk&amp;gl=in">here</a>.</p>
<p>Also, dictionaries&rsquo; <code>popitem()</code> is atomic, while <code>pop()</code> may not, based on the key type (if the key is not a builtin data type, Python has to call that object&rsquo;s <code>__hash__()</code> implementation), so better use <code>popitem()</code> where atomicity is needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">d</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># foo --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># bar --&gt; java</span>
</span></span><span class="line"><span class="cl"><span class="c1"># baz --&gt; rust</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># d is empty at the end</span>
</span></span></code></pre></div><p><strong>Note:</strong> If unsure, don&rsquo;t hesitate to use mutexes!</p>
<h3 id="linking-and-overriding-dictionaries-with-defaults">Linking and overriding dictionaries with defaults</h3>
<p>When you have a dictionary that has some default values and you want to override it with another dictionary, use <code>ChainMap()</code>. <code>ChainMap()</code> has the advantage that it doesn&rsquo;t copy anything, it just &ldquo;links&rdquo; the dictionaries, using the initial memory (this also means that any change in the initial dictionary will be reflected in the <code>ChainMap()</code> as well).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">ChainMap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">overwritten</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;barn&#39;</span><span class="p">:</span> <span class="s1">&#39;c++&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">ChainMap</span><span class="p">(</span><span class="n">overwritten</span><span class="p">,</span> <span class="n">defaults</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {&#39;foo&#39;: &#39;rust&#39;, &#39;barn&#39;: &#39;c++&#39;, &#39;bar&#39;: &#39;c&#39;}</span>
</span></span></code></pre></div><p><strong>Note:</strong> Don&rsquo;t use <code>copy()</code> and then <code>update()</code>, it is really bad performance-wise and can be replaced in 99% of the cases by a <code>ChainMap()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d1</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d2</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;barn&#39;</span><span class="p">:</span> <span class="s1">&#39;c++&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t do this!!</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> For a better example when this is useful, see <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap">this</a>.</p>
<h3 id="ordered-dictionary">Ordered dictionary</h3>
<p>A dictionary is not guaranteed to preserve the order of insertion. It actually optimizes keys for faster lookup. However there is one way to have a dictionary preserve insertion order, using <code>OrderedDict()</code> from <code>collections</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;bar&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;baz&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>  <span class="c1"># prints {&#39;bar&#39;: &#39;c&#39;, &#39;foo&#39;: &#39;java&#39;, &#39;baz&#39;: &#39;rust&#39;}</span>
</span></span></code></pre></div><p><strong>Note:</strong> Since Python 3.7, regular <code>dict</code>s have guaranteed ordering. More <a href="https://docs.python.org/3/library/stdtypes.html#dict">here</a>. Note however that they don&rsquo;t <strong><em>completely</em></strong> replace <code>OrderedDict</code>s, since they have extra features:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>   <span class="c1"># returns True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="p">)</span>   <span class="c1"># returns False since OrderedDicts are order-sensitive, and regular dicts are not</span>
</span></span></code></pre></div><p>Also, <code>OrderedDict</code>s have methods to change order of elements, while regular <code>dict</code>s don&rsquo;t.</p>
<h3 id="using-deque-instead-of-a-list-when-updating">Using deque instead of a list when updating</h3>
<p>Deques (double ended queues) are really fast in python3. They are implemented using doubly-linked lists, so inserting and removing at the end or at the beginning is O(1) complexity. Lists are implemented as normal arrays, so they have to sometimes <code>realloc()</code> to accomodate for the number of elements (only sometimes because by default it <code>realloc()</code>s more memory at the time than necessary&rsquo;), so that makes them have O(n) complexity when inserting or removing at the beginning because they have to copy the rest of the elements.</p>
<p>Generally, updating a sequence is MUCH faster when using a <code>deque()</code> as opposed to using a <code>list()</code> (though keep in mind that accessing a random element in a <code>deque()</code> is expensive, whereas accessing a random element in a <code>list()</code> is O(1)).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Wrong!</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;scala&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Right!</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">popleft</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;scala&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="temporary-contexts">Temporary contexts</h3>
<p>Usually there is the case that code like this is written in other languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">getcontext</span><span class="p">,</span> <span class="n">setcontext</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">old_context</span> <span class="o">=</span> <span class="n">getcontext</span><span class="p">()</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">getcontext</span><span class="p">()</span><span class="o">.</span><span class="n">prec</span> <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="mi">355</span><span class="p">)</span> <span class="o">/</span> <span class="n">Decimal</span><span class="p">(</span><span class="mi">113</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">setcontext</span><span class="p">(</span><span class="n">old_context</span><span class="p">)</span>
</span></span></code></pre></div><p>This can easily be replaced with contexts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">localcontext</span><span class="p">,</span> <span class="n">Context</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">localcontext</span><span class="p">(</span><span class="n">Context</span><span class="p">(</span><span class="n">prec</span><span class="o">=</span><span class="mi">50</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="mi">355</span><span class="p">)</span> <span class="o">/</span> <span class="n">Decimal</span><span class="p">(</span><span class="mi">113</span><span class="p">))</span>
</span></span></code></pre></div><p>Other examples:</p>
<ol>
<li>Writing or reading from file</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something with data</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something with data</span>
</span></span></code></pre></div><ol start="2">
<li>Deleting a file (getting rid of the try-except-pass idiom):</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;sometempfile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">suppress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">suppress</span><span class="p">(</span><span class="ne">FileNotFoundError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;sometempfile.tmp&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>suppress()</code> is a reentrant context manager. More info <a href="https://docs.python.org/3/library/contextlib.html#reentrant-context-managers">here</a>.</p>
<ol start="3">
<li>Using a lock</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># critical section</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># critical section</span>
</span></span></code></pre></div><p><strong>Note:</strong> For reentrant lock context manager, see <a href="https://docs.python.org/3/library/threading.html#threading.RLock">threading.RLock</a>.</p>
<ol start="4">
<li>Redirecting output from stdout to file</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">sldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>redirect_stdout()</code> is also a reentrant context manager.</p>
<p>More on context managers <a href="https://docs.python.org/3/library/contextlib.html">here</a>.</p>
<h3 id="using-the-cache-for-optimized-function-calls">Using the cache for optimized function calls</h3>
<p>For example, looking up a webpage numerous times is expensive, and usually the result is the same. So use the <code>lru_cache()</code> decorator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@lru_cache</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></div><p>More can be found <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">here</a>.</p>
<h3 id="test-a-sequence-or-generator-for-truthness">Test a sequence or generator for truthness</h3>
<p>Using the <code>any()</code> function, you can check if at least one value in the iterable is <code>True</code>. It applies the <code>bool()</code> function to every element.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">false_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="p">[],</span> <span class="p">{},</span> <span class="kc">None</span><span class="p">]</span>   <span class="c1"># all of these return False when using bool() on them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">false_lst</span><span class="p">))</span>   <span class="c1"># prints False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">true_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">}]</span>  <span class="c1"># all of these return True when using bool() on them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">true_lst</span><span class="p">))</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">falst_lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>    <span class="c1"># any integer different from 0 is considered True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">false_lst</span><span class="p">))</span>   <span class="c1"># prints True</span>
</span></span></code></pre></div><p><strong>Note:</strong> This function shortcircuits, meaning the first time it finds <code>True</code> it returns; it does <strong>NOT</strong> check for the rest of the values to be <code>True</code>.</p>
<p><strong>Note 2:</strong> It is really useful with generators:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">))</span>   <span class="c1"># prints True after 2 values evaluated, as range() is a generator</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">([</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)]))</span>   <span class="c1"># prints True after the whole list of 1000000 elements has been initialized, as range() has to populate the list first</span>
</span></span></code></pre></div><p>There is another function, <code>all()</code>, that does what it says: it tests for all the elements in the sequence to be <code>True</code>, and works much in the same way as <code>any()</code>.</p>
<h3 id="use-namedtuples-instead-of-tuples">Use namedtuples instead of tuples</h3>
<p>Aside from the fact that <code>namedtuple()</code>s are more verbose, they also offer better usage, as they can be treated as regular tuples, classes or even dictionaries.</p>
<p>For example, having a point:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pt1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">pt1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>   <span class="c1"># prints 2 3</span>
</span></span></code></pre></div><p>can be replaced with the better alternative <code>namedtuple()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Point</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Point&#39;</span><span class="p">,</span> <span class="s1">&#39;x y&#39;</span><span class="p">)</span>  <span class="c1"># a tuple named &#39;Point&#39; with attributes &#39;x&#39; and &#39;y&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># alternatively this means the exact same thing</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Point = namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pt1</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">)</span>                  <span class="c1"># prints Point(x=2, y=3)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">pt1</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>         <span class="c1"># prints 2 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">pt1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>       <span class="c1"># prints 2 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">_asdict</span><span class="p">()))</span>  <span class="c1"># prints {&#39;x&#39;: 2, &#39;y&#39;: 3}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">50</span><span class="p">))</span>   <span class="c1"># prints Point(x=50, y=3)</span>
</span></span><span class="line"><span class="cl">                            <span class="c1"># Note however that _replace() returns a modified copy. The original is still a tuple, so it cannot be modified</span>
</span></span></code></pre></div><p>Another common example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="s1">&#39;age color lang&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>   <span class="c1"># prints Person(age=31, color=&#39;blue&#39;, lang=&#39;c&#39;)</span>
</span></span></code></pre></div><p><strong>Note:</strong> When the values from a <code>namedtuple()</code> are invalid (e.g. having one of the fields named <code>class</code> or having the same field twice), it throws a <code>ValueError</code>. To avoid this you can possibly provide a third parameter named <code>rename</code>. If set to <code>True</code>, it will rename the field that is incorrect.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="s1">&#39;age color age&#39;</span><span class="p">,</span> <span class="n">rename</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;whatever&#39;</span><span class="p">))</span>   <span class="c1"># prints Person(age=31, color=&#39;blue&#39;, _2=&#39;whatever&#39;)</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> Since Python 3.8, <code>_asdict()</code> method returns a regular dictionary, as regular <code>dict</code>s now have guaranteed ordering based on insertion (since Python 3.7).</p>
<h3 id="profiling-code-with-cprofile">Profiling code with cProfile</h3>
<p>Since Python 3.8, cProfile can be used as a context manager, making it extremely easy to profile code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cProfile</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">cProfile</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span> <span class="k">as</span> <span class="n">profiler</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># code to be profiled</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">profiler</span><span class="o">.</span><span class="n">print_stats</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="pretty-print-stuff">Pretty print stuff</h3>
<p>One way to format the output is to use the <code>pprint</code> module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s2">&#34;Here is a long string&#34;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">compact</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># { &#39;a&#39;: [ &#39;Here&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;is&#39;, &#39;a&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;long&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;string&#39;],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;b&#39;: [ 0, 1, 2, 3,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          4],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;c&#39;: []}</span>
</span></span></code></pre></div><p><strong>Note</strong>: Since Python 3.8, the parameter <code>sort_dicts</code> was added (<code>True</code> by default):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s2">&#34;Here is a long string&#34;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">compact</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">sort_dicts</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># { &#39;b&#39;: [ 0, 1, 2, 3,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          4],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;c&#39;: [],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;a&#39;: [ &#39;Here&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;is&#39;, &#39;a&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;long&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;string&#39;]}</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/pprint.html#module-pprint">here</a>.</p>
<h3 id="the-is-operator-vs--operator">The &ldquo;is&rdquo; operator vs &ldquo;==&rdquo; operator</h3>
<p>The <code>is</code> operator checks if 2 objects point to the same memory address. The equality operator <code>==</code> checks if 2 objects are equal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span>    <span class="c1"># now copy and langs point to the same memory object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="o">==</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">other_copy</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># other_copy has a copy of langs, but point to different memory objects</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">other_copy</span> <span class="o">==</span> <span class="n">langs</span><span class="p">)</span>  <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">other_copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>  <span class="c1"># prints False</span>
</span></span></code></pre></div><h3 id="list-slices">List slices</h3>
<p>You can use slices to replace elements, delete elements or make a copy of a list.</p>
<ol>
<li>Delete items:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints [&#39;c++&#39;, &#39;kotlin&#39;, &#39;rust&#39;]</span>
</span></span></code></pre></div><ol start="2">
<li>Replace elements of a list without creating a new list object</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">43</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span><span class="p">)</span>             <span class="c1"># prints [41, 42, 43]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints False, langs points to new list (new memory object)</span>
</span></span></code></pre></div><ol start="3">
<li>Make a (shallow) copy of a list</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">],</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">copy</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;some other lang&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints [&#39;c&#39;, [&#39;some other lang&#39;, &#39;java&#39;], &#39;c++&#39;, &#39;kotlin&#39;, &#39;rust&#39;]</span>
</span></span></code></pre></div><p><strong>Note:</strong> If you need a deep copy consider using the function <code>deepcopy()</code> from the module <code>copy</code>.</p>
<h3 id="deep-and-shallow-copies">Deep and shallow copies</h3>
<p>There are 2 types of copies in Python. One is the shallow copy, that works very similar to how assigning to pointers works in C (they only reference the object they point to, changing one also changes the other), and the other is the deep copy, which makes a perfect copy of the object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">copy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list2</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list2</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># shallow copy, list2 holds references to objects in list1, changing one also changes the other</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>    <span class="c1"># prints [1, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>    <span class="c1"># prints [7, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list3</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list3</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># deep copy, list3 is a perfect copy of list1 with no references to it, changing one doesn&#39;t change the other</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>    <span class="c1"># prints [1, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span>    <span class="c1"># prints [9, 2, [3, 8], 5]</span>
</span></span></code></pre></div><p>More about deep and shallow copies <a href="https://www.geeksforgeeks.org/copy-python-deep-copy-shallow-copy/">here</a>.</p>
<h3 id="pythons-built-in-http-server">Python&rsquo;s built-in http server</h3>
<p>Python has a built-in http server; it can be super useful if you want to preview a website without going the hurdle of starting an apache or nginx server.</p>
<p>This serves the website in the current directory at address <code>localhost:8000</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 -m http.server
</span></span></code></pre></div><h3 id="type-annotations">Type annotations</h3>
<p>Python 3.5 supports type annotations, which can ensure better readability. <strong>Note however that they are only there for the programmer to acknowledge, Python does not care and won&rsquo;t change anything based on them</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">s1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">42</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">s2</span>
</span></span></code></pre></div><p>They can be changed to anything you want:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func2</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="s1">&#39;web page&#39;</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span> <span class="s1">&#39;web request&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;web response&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return response</span>
</span></span></code></pre></div><p><strong>Note:</strong> Passing 2 strings to <code>func()</code> is perfectly valid, as Python does <strong><em>NOT</em></strong> care at all about these annotations (in this case the function would return the 2 strings concatenated).</p>
<p><strong>Note 2:</strong> You can use stuff like <a href="http://mypy-lang.org">Mypy</a> to enforce this kind of behaviour, so Python becomes statically-typed!</p>
<p>More info about type annotations can be found in <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>.</p>
<p><strong>Note 3:</strong> Since Python 3.6, <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526</a>, more support for type annotations was added. Again, <strong>Python will always be a dynamically-typed language</strong>, but tools can be used to ensure static typing.</p>
<h3 id="counter-for-iterables">Counter for iterables</h3>
<p>This is an easy method to find the most common elements in an iterable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">collections</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">count</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="s1">&#39;some random string&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;s&#39;, 2), (&#39;o&#39;, 2), (&#39;m&#39;, 2), (&#39; &#39;, 2), (&#39;r&#39;, 2), (&#39;n&#39;, 2), (&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;d&#39;, 1), (&#39;t&#39;, 1), (&#39;i&#39;, 1), (&#39;g&#39;, 1)]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;s&#39;, 2), (&#39;o&#39;, 2), (&#39;m&#39;, 2)]</span>
</span></span></code></pre></div><p>More info can be found <a href="https://docs.python.org/3/library/collections.html#collections.Counter">in the Python docs for the Counter class</a>.</p>
<h3 id="permutations-of-an-iterable">Permutations of an iterable</h3>
<p>Get permutations of an iterable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">itertools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;)]</span>
</span></span></code></pre></div><p>The function takes an iterable and another optional argument specifying the length of one permutation.</p>
<h3 id="getting-the-representation-of-an-object-as-a-string">Getting the representation of an object as a string</h3>
<p>Python has 2 methods to transform an object into a string (similar to other languages <code>toString()</code> methods); those are <code>str()</code> and <code>repr()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">now</span><span class="p">))</span>     <span class="c1"># prints &#39;2020-02-12&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">now</span><span class="p">))</span>    <span class="c1"># prints &#39;datetime.date(2020, 2, 12)&#39;</span>
</span></span></code></pre></div><p>The function <code>str()</code> is made for clarity, while the function <code>repr()</code> is made to be unambiguos about what the object represents.</p>
<p>The python console uses <code>repr()</code>.</p>
<h3 id="python-disassembler">Python disassembler</h3>
<p>Python has a built-in disassembler. It is very rudimentary, but it can help debug some code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dis</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;This is some text </span><span class="se">\&#39;</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\&#39;</span><span class="s1">.&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  4           0 LOAD_CONST               1 (&#34;This is some text &#39;&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              2 LOAD_GLOBAL              0 (str)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              4 LOAD_FAST                0 (text)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              6 CALL_FUNCTION            1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              8 BINARY_ADD</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             10 LOAD_CONST               2 (&#34;&#39;.&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             12 BINARY_ADD</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             14 RETURN_VALUE</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/dis.html">in the docs</a>.</p>
<h3 id="lambda-functions">Lambda functions</h3>
<p>Lambda functions, as in other functional programming languages, are anonymous functions that don&rsquo;t have a name. They are useful for small code that doesn&rsquo;t require more than a line or two, and they are generally passed as arguments to other functions.</p>
<p>One such example that applies to all functional programming languages is the <code>map()</code> function. It takes a callable as the first argument (read function, lambda function, something that can be called), and an iterable as the second argument, and applies the function to each of the elements of the iterable, returning a new iterable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">string</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="p">[</span><span class="s1">&#39;StRiNg&#39;</span><span class="p">,</span> <span class="s1">&#39;ANOTHER string&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [&#39;string&#39;, &#39;another string&#39;]</span>
</span></span></code></pre></div><p>This code does the exact same thing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stringlower</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;StRiNg&#39;</span><span class="p">,</span> <span class="s1">&#39;ANOTHER string&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">obj</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stringlower</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [&#39;string&#39;, &#39;another string&#39;]</span>
</span></span></code></pre></div><p>Another example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">power_func</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">power_func</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># prints 8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">)(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>   <span class="c1"># prints 1</span>
</span></span></code></pre></div><h3 id="ip-addresses-in-python">Ip addresses in Python</h3>
<p>Python has an interesting module to work with Ip addresses:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ipaddress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">address</span> <span class="o">=</span> <span class="n">ipaddress</span><span class="o">.</span><span class="n">ip_address</span><span class="p">(</span><span class="s1">&#39;192.168.100.14&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints IPv4Address(&#39;192.168.100.14&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you can even have arithmetic operations done on this address</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">address</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints 192.168.100.17</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/ipaddress.html">here</a>.</p>
<h3 id="subclasses-and-subinstances">Subclasses and subinstances</h3>
<p>In Python, you can check if a class is a subclass of some other class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">))</span>  <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="nb">object</span><span class="p">))</span>     <span class="c1"># prints True</span>
</span></span></code></pre></div><p>You can also check if some instance is an instance of the specified class or another sublass of that class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">SubClass</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">))</span>   <span class="c1"># prints True</span>
</span></span></code></pre></div><h3 id="asterisk--and-slash--in-function-definition-positional--and-keyword-only-function-parameters">Asterisk (*) and slash (\) in function definition (positional- and keyword-only function parameters)</h3>
<p>In Python 3, you can add an asterisk and a slash to a function definition with special meaning. Asterisk marks keyword-only parameters (that means parameters that can be given to the function just by keyword, not by position), while slash marks positional-only parameters (meaning parameters cannot be given by keyword, but by position only).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">positional_only_argument</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">positional_and_keyword_argument</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keyword_only_argument</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">positional_only_argument</span> <span class="o">+</span> <span class="n">positional_and_keyword_argument</span> <span class="o">+</span> <span class="n">keyword_only_argument</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Type error, third parameter should be keyword</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">positional_only_argument</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Type error, first parameter is positional only</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">keyword_only_argument</span> <span class="o">=</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># fine, prints 6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">positional_and_keyword_argument</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">keyword_only_argument</span> <span class="o">=</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># fine, prints 6</span>
</span></span></code></pre></div><p>Info and rationale about these 2 types of parameters can be found in <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102 - keyword-only parameters</a> and in <a href="https://www.python.org/dev/peps/pep-0570/">PEP 570 - positional-only parameters</a>.</p>
<p><strong>Note:</strong> Until Python 3.8, positional-only arguments could only be used in library functions. Starting from Python 3.8, they can be used in programmer constructions too.</p>
<h3 id="python-interactive-shell">Python interactive shell</h3>
<p>Say you wrote some Python code like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="k">else</span> <span class="n">b</span>
</span></span></code></pre></div><p>You can launch it in an interactive shell with <code>python -i main.py</code>, which is similar to calling only <code>python</code> in the command line, with the key difference that the python shell contains your function in the global scope as well. Go ahead, try it!</p>
<h3 id="python-debugger">Python debugger</h3>
<p>Python has a debugger, similar to gdb. One way to use it is to simply add <code>import pdb; pdb.set_trace()</code> in your program wherever u want the debugger to stop program execution.</p>
<p>In Python 3.7, the debugger can also be called on a script like this: <code>python -m pdb script.py</code>, and it stops when the module loads, just before executing the first line of the script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pdb</span>
</span></span><span class="line"><span class="cl"><span class="n">pdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># code execution will stop here, and the program will enter the debugger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></div><p>For more information on how to operate the python debugger, visit <a href="https://docs.python.org/3/library/pdb.html#debugger-commands">this</a>.</p>
<p><strong>Note:</strong> Since Python 3.7, instead of <code>import pdb; pdb.set_trace()</code>, you can simply add a <code>breakpoint()</code> function call whenever you want the program to stop execution.</p>
<h3 id="the-walrus-operator-">The walrus operator (:=)</h3>
<p>Python 3.8 introduced assignment expressions through the use of a new operator, called the walrus operator (if you look sideways, the operator looks like a walrus).</p>
<p>Assignment expressions allow you to assign and return a value in the same expression, similar to how things work in a language like C.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;What is your age?&#34;</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You are a grown-up!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You are a kid!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>It can be useful, for example in list comprehensions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s1">&#39;abcd&#39;</span> <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># instead of having to compute f(x) twice</span>
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s1">&#39;abcd&#39;</span> <span class="k">if</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">]</span>
</span></span></code></pre></div><p>Arguably, the operator is a little confusing, and most of the times not needed and can be replaced with more expressive syntax. There are good arguments to why this operator is not needed in Python <a href="https://www.reddit.com/r/Python/comments/8ex72p/pep_572_assignment_expressions/">here</a>.</p>
<p>Nonetheless, Python 3.8 adopted assignment expressions through the use of the walrus operator :=.</p>
<p>For more info on the walrus operator and assignment expressions, see <a href="https://www.python.org/dev/peps/pep-0572/">PEP 572</a>.</p>
<h3 id="formatted-strings-f-strings">Formatted strings (f-strings)</h3>
<p>Formatted string literals (or f-strings) are a construct added in Python 3.6 and have since become very popular due to the speed (see tip 7) and simplicity.</p>
<p>Some examples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">number</span> <span class="o">=</span> <span class="mf">3.1415</span>
</span></span><span class="line"><span class="cl"><span class="n">width</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">precision</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;This is </span><span class="si">{</span><span class="n">number</span><span class="si">:{</span><span class="n">width</span><span class="si">}</span><span class="s1">.</span><span class="si">{</span><span class="n">precision</span><span class="si">}}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is       3.14</span>
</span></span></code></pre></div><p>There are three conversion fields; <code>r</code>, <code>s</code> and <code>a</code>. What they do is call the functions <code>repr()</code>, <code>str()</code> and <code>ascii()</code> respectively on the formatted parameter.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;My name is </span><span class="si">{</span><span class="n">name</span><span class="si">!r}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># My name is &#39;Alex&#39;</span>
</span></span></code></pre></div><p>Since Python 3.8, there is a new specifier (=), that expands to the representation of the expression, making it useful for debugging and self-documenting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">name</span><span class="si">=}</span><span class="s1">&#39;</span><span class="p">)</span>               <span class="c1"># prints name=&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">now</span><span class="si">=}</span><span class="s1">&#39;</span><span class="p">)</span>                <span class="c1"># prints now=datetime.date(2020, 2, 14)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># f-string specifiers still work</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">now</span><span class="si">=!s}</span><span class="s1">&#39;</span><span class="p">)</span>              <span class="c1"># prints now=2020-02-14</span>
</span></span><span class="line"><span class="cl"><span class="n">number</span> <span class="o">=</span> <span class="mf">3.1415</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Careful when adding format specifiers</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="si">=:</span><span class="s1">10.2f</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>   <span class="c1"># prints number + 1=      4.14</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="si">=:</span><span class="s1">10.2</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>    <span class="c1"># prints number + 1=       4.1</span>
</span></span></code></pre></div><p>More info about f-strings <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">in the docs</a>.</p>
<p><strong>Note:</strong> Formatted strings have a &lsquo;formatting&rsquo; option similar to how <code>printf()</code> works in other languages. Python&rsquo;s implementation of formatted print is <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language">a little more advanced though</a>.</p>
<h3 id="decorators-and-the-functoolswraps-helper-function">Decorators and the functools.wraps helper function</h3>
<p>Say you have a function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span></code></pre></div><p>But now we want to log this function call. Of course, adding this code in the implementation of the function is bad, since we&rsquo;re polluting the function code. Even more so, what if we want to log another 10 function calls?</p>
<p>For this purpose, we can easily use a decorator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Wrapper function.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do some logging</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wrapper</span>
</span></span></code></pre></div><p>Now it is easy to use the decorator on whatever function we want to log.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@log</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1"># this function call will be logged</span>
</span></span></code></pre></div><p>However, one problem arises when decorating a function like this. If we now try to get the doc or the function name, we notice that we get the information of the wrapper function, rather than that of our initial function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>      <span class="c1"># prints &#34;Wrapper function&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>     <span class="c1"># prints &#34;wrapper&#34;</span>
</span></span></code></pre></div><p>This is not ideal, considering that debuggers and other introspection tools use this. To fix this, we can use functools.wraps.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">functools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Wrapper function.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do some logging</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wrapper</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@log</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>      <span class="c1"># prints &#34;This function adds 2 numbers and returns the result.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>     <span class="c1"># prints &#34;sum&#34;</span>
</span></span></code></pre></div><h3 id="static-function-variables">Static function variables</h3>
<p>Python does not have a built-in method to have a static variable in a function like C or other languages do through the use of the <code>static</code> keyword.</p>
<p>Instead, we can use the fact that functions are first-class objects in Python and we can assign variables to them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">func</span><span class="o">.</span><span class="n">number_of_times_called</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">func</span><span class="o">.</span><span class="n">number_of_times_called</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># some really interesting code</span>
</span></span></code></pre></div><p>This is better than having a global variable pollute the global namespace, and is better than having a decorator that does that (because the decorator runs when the python module is loaded even if the function might never be called, so the decorator will still do some work and initialize some value; instead here the code runs only when the function is called, if ever).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>JAVASCRIPT TIPS &amp; TRICKS by catalinpit</title>
      <link>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-catalinpit/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-catalinpit/</guid>
      <description>A collection of JavaScript tips and tricks 🔥🚀⚡</description>
      <content:encoded><![CDATA[<p>A collection of JavaScript tips and tricks.</p>
<p>No particular order or path.</p>
<p>I add things as I discover them.</p>
<p><em>Check <a href="https://codinghub.tips/">Codinghub.tips</a>, too, for JavaScript tips. It&rsquo;s not my project but I like it.</em> 🔥</p>
<h1 id="optional-chaining">Optional chaining</h1>
<p>&ldquo;Shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">socialMedia</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">twitter</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">instagram</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">linkedin</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">experience</span><span class="o">:</span> <span class="s2">&#34;Junior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">employed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">person</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">twitter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">twitter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// The same thing with optional chaining
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">person</span><span class="o">?</span><span class="p">.</span><span class="nx">socialMedia</span><span class="o">?</span><span class="p">.</span><span class="nx">twitter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">twitter</span><span class="p">);</span> <span class="c1">// outputs @catalinmpit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="o">?</span><span class="p">.</span><span class="nx">socialMedia</span><span class="o">?</span><span class="p">.</span><span class="nx">twitter</span><span class="p">);</span>
</span></span></code></pre></div><h1 id="nullish-coalescing-operator">Nullish coalescing operator</h1>
<p>&ldquo;The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">socialMedia</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">twitter</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">instagram</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">linkedin</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">experience</span><span class="o">:</span> <span class="s2">&#34;Junior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">employed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">facebook</span> <span class="o">??</span> <span class="s2">&#34;No Facebook account found!&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;No Facebook account found!&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">instagram</span> <span class="o">??</span> <span class="s2">&#34;No Instagram account found!&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;@catalinmpit&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">/// Another example ///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">??</span> <span class="s2">&#34;No name assigned&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;No name assigned&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">??</span> <span class="s2">&#34;No name assigned&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;Catalin Pit&#39;
</span></span></span></code></pre></div><h1 id="merge-objects-together---spread-operator">Merge objects together - spread operator</h1>
<p>&ldquo;Shallow-cloning (excluding prototype) or merging of objects is now possible using a shorter syntax than Object.assign().&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;Junior Fullstack Developer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uses</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">machine</span><span class="o">:</span> <span class="s2">&#34;MacBook Pro 15 inch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">editor</span><span class="o">:</span> <span class="s2">&#34;VS Code&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">language</span><span class="o">:</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">phone</span><span class="o">:</span> <span class="s2">&#34;Samsung Note 10&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">summary</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">user</span><span class="p">,</span> <span class="p">...</span><span class="nx">uses</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">summary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Outputs //
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">summary</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;Junior Fullstack Developer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">machine</span><span class="o">:</span> <span class="s2">&#34;MacBook Pro 15 inch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">editor</span><span class="o">:</span> <span class="s2">&#34;VS Code&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">language</span><span class="o">:</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">phone</span><span class="o">:</span> <span class="s2">&#34;Samsung Note 10&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h1 id="two-ways-to-convert-a-string-to-a-character-array">Two ways to convert a string to a character array</h1>
<p>These are two quick ways to convert your string to an array of characters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Catalin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstNameArr1</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNameArr1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstNameArr2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">firstName</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNameArr2</span><span class="p">);</span>
</span></span></code></pre></div><h1 id="default-parameters">Default parameters</h1>
<p>&ldquo;Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">add</span><span class="p">();</span> <span class="c1">// Returns 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// Returns 12
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Returns 10
</span></span></span></code></pre></div><h1 id="filter-unique-values--remove-duplicate-values">Filter unique values / remove duplicate values</h1>
<p>&ldquo;Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur once; it is unique in the Set&rsquo;s collection.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Strings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Catalin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Catalin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Tom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Tom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;John&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;John&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uniqueNames</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">names</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uniqueNames</span><span class="p">);</span> <span class="c1">// Outputs [&#39;Catalin&#39;, &#39;Pit&#39;, &#39;Tom&#39;, &#39;John&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">examScores</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="mi">50</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uniqueExamScores</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">examScores</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uniqueExamScores</span><span class="p">);</span> <span class="c1">// Outputs [50, 75, 100, 99, 95, 67, 43];
</span></span></span></code></pre></div><h1 id="filter-out-falsy-values">Filter out falsy values</h1>
<p>Remove falsy values such as <code>null, undefined, 0, boolean</code> and so on, from an array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Catalin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Macbook&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Car&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Peace&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">191</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">filteredArray</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filteredArray</span><span class="p">);</span> <span class="c1">// Returns [&#34;Catalin&#34;, 1, &#34;Macbook&#34;, true, &#34;Car&#34;, &#34;Peace&#34;, 191]
</span></span></span></code></pre></div><h1 id="required-parameters">Required parameters</h1>
<p>Default parameters allows us to require an argument to be passed to the function.</p>
<p>We can create a function which throws an error and assign it as default value for required parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">required</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;You did not pass the required argument!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">greet</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">required</span><span class="p">())</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">!`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">greet</span><span class="p">();</span> <span class="c1">// Returns &#34;Uncaught TypeError: You did not pass the required argument!&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">greet</span><span class="p">(</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">);</span> <span class="c1">// Returns &#34;Hello Catalin Pit!&#34;
</span></span></span></code></pre></div><h1 id="pass-an-empty-parameter">Pass an empty parameter</h1>
<p>With the help of the spread syntax, we can now pass an empty parameter to a function.</p>
<p>&ldquo;Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">fullName</span><span class="p">,</span> <span class="nx">instagramHandle</span><span class="p">,</span> <span class="nx">twitterHandle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="sb">`Hello, my name is </span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">instagramHandle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span> <span class="o">+=</span> <span class="sb">` My Instagram handle is </span><span class="si">${</span><span class="nx">instagramHandle</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">twitterHandle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span> <span class="o">+=</span> <span class="sb">` My Twitter handle is </span><span class="si">${</span><span class="nx">twitterHandle</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">message</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit. My Instagram handle is @cpit. My Twitter handle is @catapit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span> <span class="s2">&#34;@cpit&#34;</span><span class="p">,</span> <span class="s2">&#34;@catapit&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit. My Twitter handle is @cpit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">greet</span><span class="p">(...[</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span> <span class="p">,</span> <span class="s2">&#34;@cpit&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit. My Instagram handle is @catapit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">greet</span><span class="p">(...[</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span> <span class="s2">&#34;@catapit&#34;</span><span class="p">]);</span>
</span></span></code></pre></div><h1 id="accept-any-number-of-arguments-in-a-function">Accept any number of arguments in a function</h1>
<p>We are making use of the spread operator again to accept any number of arguments in a function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">accumulator</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">acc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">val</span> <span class="k">of</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">acc</span> <span class="o">+=</span> <span class="nx">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">accumulator</span><span class="p">();</span> <span class="c1">// Outputs 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// Outputs 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Outputs 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// Outputs 17
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span> <span class="c1">// Outputs 20
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// Outputs 1020
</span></span></span></code></pre></div><h1 id="check-if-every-item-from-an-array-passes-a-test-condition">Check if every item from an array passes a test condition</h1>
<p>&ldquo;The <code>every()</code> method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">closeOffice</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">closeOffice2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">closeOffice3</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">doYouWorkFromHome</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">answer</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">closeOffice</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">doYouWorkFromHome</span><span class="p">);</span> <span class="c1">// Returns false - We don&#39;t close the office
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">closeOffice2</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">doYouWorkFromHome</span><span class="p">);</span> <span class="c1">// Returns true - We close the office
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">closeOffice3</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">doYouWorkFromHome</span><span class="p">);</span> <span class="c1">// Returns false - We don&#39;t close the office
</span></span></span></code></pre></div><h1 id="check-if-some-items-from-an-array-pass-a-test-condition">Check if some items from an array pass a test condition</h1>
<p>&ldquo;The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">devTeam</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;senior&#34;</span><span class="p">,</span> <span class="s2">&#34;senior&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">devTeam1</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">devTeam2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;senior&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">proceedWithProject</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">answer</span> <span class="o">==</span> <span class="s2">&#34;senior&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">devTeam</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">proceedWithProject</span><span class="p">);</span> <span class="c1">// Returns true - We can proceed with the project
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">devTeam1</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">proceedWithProject</span><span class="p">);</span> <span class="c1">// Returns false - We cannot proceed with the project
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">devTeam2</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">proceedWithProject</span><span class="p">);</span> <span class="c1">// Returns true - We can proceed with the project
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
