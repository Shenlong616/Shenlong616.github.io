<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GitHub on Shenlong616</title>
    <link>https://shenlong616.github.io/posts/github/</link>
    <description>Recent content in GitHub on Shenlong616</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://shenlong616.github.io/posts/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code this, not that - JavaScript by codediodeio</title>
      <link>https://shenlong616.github.io/posts/github/code-this-not-that-javascript-by-codediodeio/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/code-this-not-that-javascript-by-codediodeio/</guid>
      <description>JavaScript Pro Tips - Code This, Not That</description>
      <content:encoded><![CDATA[<h3 id="asyncawait">Async/await</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">random</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad Promise Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sumRandomAsyncNums</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">second</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">third</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">random</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">first</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">random</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">second</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">random</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">third</span> <span class="o">=</span> <span class="nx">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">first</span> <span class="o">+</span> <span class="nx">second</span> <span class="o">+</span> <span class="nx">third</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Result </span><span class="si">${</span><span class="nx">v</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Promise Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sumRandomAsyncNums</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">first</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">random</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">second</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">random</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">third</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">random</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Result </span><span class="si">${</span><span class="nx">first</span> <span class="o">+</span> <span class="nx">second</span> <span class="o">+</span> <span class="nx">third</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="kr">await</span> <span class="nx">random</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">randos</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">random</span><span class="p">(),</span> <span class="nx">random</span><span class="p">(),</span> <span class="nx">random</span><span class="p">()]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">r</span> <span class="k">of</span> <span class="kr">await</span> <span class="nx">randos</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">sumRandomAsyncNums</span><span class="p">();</span>
</span></span></code></pre></div><h3 id="consolelog">console.log()</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;tom&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="nx">nervous</span><span class="o">:</span> <span class="kc">false</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;dick&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">nervous</span><span class="o">:</span> <span class="kc">false</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">baz</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;harry&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span> <span class="nx">nervous</span><span class="o">:</span> <span class="kc">true</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">baz</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Computed Property Names
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;%c My Friends&#34;</span><span class="p">,</span> <span class="s2">&#34;color: orange; font-weight: bold;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Console.table(...)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">table</span><span class="p">([</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">baz</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// // Console.time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s2">&#34;looper&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&#34;looper&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// // Stack Trace Logs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">deleteMe</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">trace</span><span class="p">(</span><span class="s2">&#34;bye bye database&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">deleteMe</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">deleteMe</span><span class="p">();</span>
</span></span></code></pre></div><h3 id="destructuring-assignment">Destructuring assignment</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">turtle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Bob 🐢&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">legs</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">shell</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;amphibious&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">meal</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">diet</span><span class="o">:</span> <span class="s2">&#34;berries&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">feed</span><span class="p">(</span><span class="nx">animal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`Feed </span><span class="si">${</span><span class="nx">animal</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">animal</span><span class="p">.</span><span class="nx">meal</span><span class="si">}</span><span class="sb"> kilos of </span><span class="si">${</span><span class="nx">animal</span><span class="p">.</span><span class="nx">diet</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">feed</span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">meal</span><span class="p">,</span> <span class="nx">diet</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`Feed </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">meal</span><span class="si">}</span><span class="sb"> kilos of </span><span class="si">${</span><span class="nx">diet</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// OR
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">feed</span><span class="p">(</span><span class="nx">animal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">meal</span><span class="p">,</span> <span class="nx">diet</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">animal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`Feed </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">meal</span><span class="si">}</span><span class="sb"> kilos of </span><span class="si">${</span><span class="nx">diet</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">feed</span><span class="p">(</span><span class="nx">turtle</span><span class="p">));</span>
</span></span></code></pre></div><h3 id="loopsjs">loops.js</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">orders</span> <span class="o">=</span> <span class="p">[</span><span class="mi">500</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">223</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad Loop Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">withTax</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">highValue</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Reduce
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">total</span> <span class="o">+=</span> <span class="nx">orders</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">withTax</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">orders</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="mf">1.1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">orders</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">highValue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">orders</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Loop Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Reduce
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">cur</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">withTax</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">*</span> <span class="mf">1.1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">highValue</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Every
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @returns false
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">everyValueGreaterThan50</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Every
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @returns true
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">everyValueGreaterThan10</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Some
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @returns false
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">someValueGreaterThan500</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Some
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @returns true
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">someValueGreaterThan10</span> <span class="o">=</span> <span class="nx">orders</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="rest-parameters">Rest parameters</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="s2">&#34;Bad Function Code 💩&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">totalHitPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Function Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">totalHitPoints</span><span class="p">(...</span><span class="nx">hits</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">hits</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">totalHitPoints</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="spread-syntax-">Spread syntax (&hellip;)</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// Objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">pikachu</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Pikachu 🐹&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">stats</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">hp</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span> <span class="nx">attack</span><span class="o">:</span> <span class="mi">60</span><span class="p">,</span> <span class="nx">defense</span><span class="o">:</span> <span class="mi">45</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad Object Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">pikachu</span><span class="p">[</span><span class="s2">&#34;hp&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">hp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">pikachu</span><span class="p">[</span><span class="s2">&#34;attack&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">attack</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">pikachu</span><span class="p">[</span><span class="s2">&#34;defense&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">defense</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// OR
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">lvl0</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">pikachu</span><span class="p">,</span> <span class="nx">stats</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">lvl1</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">pikachu</span><span class="p">,</span> <span class="p">{</span> <span class="nx">hp</span><span class="o">:</span> <span class="mi">45</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Object Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">lvl0</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">pikachu</span><span class="p">,</span> <span class="p">...</span><span class="nx">stats</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">lvl1</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">pikachu</span><span class="p">,</span> <span class="nx">hp</span><span class="o">:</span> <span class="mi">45</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Arrays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">pokemon</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Arbok&#34;</span><span class="p">,</span> <span class="s2">&#34;Raichu&#34;</span><span class="p">,</span> <span class="s2">&#34;Sandshrew&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad Array Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">pokemon</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;Bulbasaur&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">pokemon</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;Metapod&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">pokemon</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&#34;Weedle&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good Array Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Push
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">pokemon</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">pokemon</span><span class="p">,</span> <span class="s2">&#34;Bulbasaur&#34;</span><span class="p">,</span> <span class="s2">&#34;Metapod&#34;</span><span class="p">,</span> <span class="s2">&#34;Weedle&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Shift
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">pokemon</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Bulbasaur&#34;</span><span class="p">,</span> <span class="p">...</span><span class="nx">pokemon</span><span class="p">,</span> <span class="s2">&#34;Metapod&#34;</span><span class="p">,</span> <span class="s2">&#34;Weedle&#34;</span><span class="p">];</span>
</span></span></code></pre></div><h3 id="template-literals">Template literals</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">horse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Topher 🐴&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">size</span><span class="o">:</span> <span class="s2">&#34;large&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;jousting&#34;</span><span class="p">,</span> <span class="s2">&#34;racing&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Bad String Code 💩&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">bio</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="nx">horse</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34; is a &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="nx">horse</span><span class="p">.</span><span class="nx">size</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34; horse skilled in &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="nx">horse</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &amp; &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;Good String Code ✅&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">skills</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">horse</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">bio</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb"> is a </span><span class="si">${</span><span class="nx">size</span><span class="si">}</span><span class="sb"> horse skilled in </span><span class="si">${</span><span class="nx">skills</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &amp; &#34;</span><span class="p">)</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bio</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Advanced Tag Example
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">horseAge</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">ageStr</span> <span class="o">=</span> <span class="nx">age</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">?</span> <span class="s2">&#34;old&#34;</span> <span class="o">:</span> <span class="s2">&#34;young&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}${</span><span class="nx">ageStr</span><span class="si">}</span><span class="sb"> at </span><span class="si">${</span><span class="nx">age</span><span class="si">}</span><span class="sb"> years`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">bio2</span> <span class="o">=</span> <span class="nx">horseAge</span><span class="sb">`This horse is </span><span class="si">${</span><span class="nx">horse</span><span class="p">.</span><span class="nx">age</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bio2</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="watch-the-video-on">Watch the video on</h3>
<ul>
<li>YouTube

  <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
    <iframe src="https://www.youtube-nocookie.com/embed/Mus_vwhTCq0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
  </div>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>In JS we trust by yeungon</title>
      <link>https://shenlong616.github.io/posts/github/in-js-we-trust-by-yeungon/</link>
      <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/in-js-we-trust-by-yeungon/</guid>
      <description>Embrace JavaScript naturally and confidently with coding challenges crafted not for beginners, but JavaScript lovers no matter what.</description>
      <content:encoded><![CDATA[<p>In JS we trust - The best way to learn is by building/coding and teaching. I create the challenges to help my friends learn JavaScript and in return it helps me embrace the language in much deeper level. Feel free to clone, fork and pull.</p>
<hr>
<h3 id="1-whats-the-output">1. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">(</span><span class="mi">1</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">(</span><span class="mi">1</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">(</span><span class="mi">1</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">a</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">x</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">x</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">x</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: <code>1, 2, 3</code> and <code>1, 2, 3</code></li>
<li>B: <code>3, 3, 3</code> and <code>3, 4, 5</code></li>
<li>C: <code>3, 3, 3</code> and <code>1, 2, 3</code></li>
<li>D: <code>1, 2, 3</code> and <code>3, 3, 3</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b">Answer: B</h4>
<p>This question revisits closure - one of the most confusing concepts in JavaScript. Closure allows us to create a <code>stateful function</code> and such a function can access to the variable outside of its scope. In a nutshell, a closure can have access to the <code>global</code> variable (scope), <code>father function</code> scope and <code>its</code> own scope.</p>
<p>We have here, the only one correct answer, 3, 3, 3 and 3, 4, 5 because first we simply call the function <code>a()</code>. It works like a normal function and we have not seen anything so-called <code>stateful</code> yet. In the following code, we declare a variable <code>x</code> and it stores the value of function <code>a(1)</code>, that is why we get 3. 4. 5 rather than 3, 3, 3.</p>
<p>This kind of gotcha gives me the feeling of <code>static</code> variable in PHP world.</p>
</p>
</details>
<hr>
<h3 id="2-whats-the-output">2. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">Name</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">Name</span><span class="p">(</span><span class="s2">&#34;Vuong&#34;</span><span class="p">,</span> <span class="s2">&#34;Nguyen&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nb">window</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: <code>undefined</code></li>
<li>B: <code>NaN</code></li>
<li>C: <code>true</code></li>
<li>D: <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c">Answer: C</h4>
<p>We get true in the console. The tricky part is when we create an object from the constructor function Name but we DO NOT USE <code>new</code> keywork. That makes the variable <code>a</code> global one and get the value &ldquo;Vuong&rdquo;. Remember that it is actually a property of the global object <code>window</code> (in the browser) or <code>global</code> in the nodejs.</p>
<p>We then get <code>a.length</code> ~ 5 and <code>window.a.length</code> ~ 5 which return 0. !0 returns true.</p>
<p>Imagine what would happen when we create the instance <code>me</code> with the <code>new</code> keywork. That is an interesting inquire!</p>
</p>
</details>
<hr>
<h3 id="3-whats-the-output">3. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(...</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">x</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="s2">&#34;freetut&#34;</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">z</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">y</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">k</span> <span class="o">-</span> <span class="nx">z</span><span class="p">.</span><span class="nx">y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">(</span><span class="nx">x</span><span class="p">()));</span>
</span></span></code></pre></div><ul>
<li>A: <code>true</code></li>
<li>B: 1</li>
<li>C: -1</li>
<li>D: <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a">Answer: A</h4>
<p>The spread operator <code>...x</code> might help us obtain the parameter in the function in the form of array. Yet, in Javascript the typeof array return &ldquo;object&rdquo; rather than &ldquo;array&rdquo;. It is totally odd if you are coming from PHP.</p>
<p>That is said, we now have the length of the string <code>object</code> which returns 6. z.y() simply returns the length of the string &lsquo;freetut&rsquo; (7).</p>
<p>Be aware that the function x() (in the form of <code>function express</code> or <code>anonymous function</code> (if you are coming from PHP) return -1 when being called and when converted to bool with <code>Boolean(-1)</code> return true instead of false. Noted that <code>Boolean(0)</code> return false.</p>
</p>
</details>
<hr>
<h3 id="4-whats-the-output">4. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span> <span class="nx">js</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">(</span><span class="nx">j</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">j</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">(</span><span class="nx">s</span><span class="p">()));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">s</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">j</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">j</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">x</span> <span class="o">**</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="mi">3</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: <code>undefined</code></li>
<li>B: 18</li>
<li>C: 81</li>
<li>D: 12</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-1">Answer: C</h4>
<p>The function <code>js()</code> can be automatically executed without calling it and known as IIFE (Immediately Invoked Function Expression). Noted the parameter <code>x</code> of the function <code>js</code> is actuallly passed with the value 3.</p>
<p>The value return of the function is y(s())), meaning calling three other functions <code>y()</code>, <code>s()</code> and <code>j()</code> because the function <code>s()</code> returns <code>j()</code>.</p>
<p>j() returns 3^3 = 27 so that s() returns 27.</p>
<p>y(s()) means y(27) which returns 27*3 = 81.</p>
<p>Note that we can call <code>declare function</code> BEFORE the function is actually declared but not with <code>expression function</code>.</p>
</p>
</details>
<hr>
<h3 id="5-whats-the-output">5. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">tip</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;I have $&#34;</span> <span class="o">+</span> <span class="nx">husband</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">wife</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">tip</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">husband</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">wife</span><span class="p">()</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">tip</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;I have $10&rdquo;;</li>
<li>B: &ldquo;I have $100&rdquo;;</li>
<li>C: &ldquo;I have $50&rdquo;;</li>
<li>D: &ldquo;I have $NaN&rdquo;;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d">Answer: D</h4>
<p>We have here an IIFE (Immediately Invoked Function Expression). It means we do not have to call it but it will be excuted automatically when declared. The flow is as: husband() returns wife()/2 and wife() returns tip*2.</p>
<p>We might think that tip = 100 because it is a global variable when declaring with <code>var</code> keyword. However, it is actually <code>undefined</code> because we also have <code>var tip = 10</code> INSIDE the function. As the variable <code>tip</code> is hoisted with default value <code>undefined</code>, the final result would be D. We know that <code>undefined</code> returns NaN when we try to divide to 2 or multiple with 2.</p>
<p>If we do not re-declare <code>var tip = 10;</code> at the end of the function, we will definately get B.</p>
<p>JS is fun, right?</p>
</p>
</details>
<hr>
<h3 id="6-whats-the-output">6. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">js</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">language</span><span class="o">:</span> <span class="s2">&#34;loosely type&#34;</span><span class="p">,</span> <span class="nx">label</span><span class="o">:</span> <span class="s2">&#34;difficult&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">edu</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">js</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="s2">&#34;PhD&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">newbie</span> <span class="o">=</span> <span class="nx">edu</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">delete</span> <span class="nx">edu</span><span class="p">.</span><span class="nx">language</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">newbie</span><span class="p">).</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 2;</li>
<li>B: 3;</li>
<li>C: 4;</li>
<li>D: 5;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-1">Answer: A</h4>
<p>This challenge revises the ES6&rsquo;s feature regarding <code>spread operator ...</code> Spread operator is quite useful for retrieving parameter in function, to <code>unite</code> or <code>combine</code> object and array in JavaScript. PHP also has this feature.</p>
<p>In the variable <code>edu</code>, we use <code>...js</code> (spread operator here) to combine both objects into one. It works in the same way with array.</p>
<p>Then we declare another variable named <code>newbie</code>. IMPORTANT note: By declaring the variable like that, both variables point to the SAME POSITION in the memory. We may have known something like <code>$a = &amp;$b</code> in PHP, which let both varibles work in the same way. We might have known about <code>pass by reference</code> in the case.</p>
<p>Then we have 2 as <code>edu.language</code> is deleted. Both objects now have only two elements.</p>
<p>Now is time to think about coping an object in JS either shallow or deep one.</p>
</p>
</details>
<hr>
<h3 id="7-whats-the-output">7. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">candidate</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Vuong&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">job</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">frontend</span><span class="o">:</span> <span class="s2">&#34;Vuejs or Reactjs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">backend</span><span class="o">:</span> <span class="s2">&#34;PHP and Laravel&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">city</span><span class="o">:</span> <span class="s2">&#34;Auckland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Combine</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">get</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">candidate</span><span class="p">,</span> <span class="nx">job</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">count</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">()).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Combine</span><span class="p">.</span><span class="nx">count</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: 5;</li>
<li>B: 6;</li>
<li>C: 7;</li>
<li>D: 8;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-2">Answer: A</h4>
<p>The buit-in method <code>Object.assign(candidate, job)</code> merges the two objects <code>candidate</code> and <code>job</code> into one object. Then the method <code>Object.keys</code> counts the number of <code>key</code> in the object.</p>
<p>Note that two methods <code>get()</code> and <code>count()</code> are defined as <code>static</code>, so they need to be called statically using <code>Class.staticmethod()</code> syntax. Then the final object get 5 elements.</p>
</p>
</details>
<hr>
<h3 id="8-whats-the-output">8. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">++</span><span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span><span class="line"><span class="cl"><span class="p">((</span><span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">+=</span> <span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">%</span> <span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">x</span><span class="p">))();</span>
</span></span><span class="line"><span class="cl"><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="nx">x</span> <span class="o">*=</span> <span class="nx">x</span><span class="p">))();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 4;</li>
<li>B: 50;</li>
<li>C: 2;</li>
<li>D: 10;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-3">Answer: A</h4>
<p>Initially <code>x</code> is declared with the value 1. In the first IIFE function, there are two operations. First <code>x</code> becomes 2 and then 3.</p>
<p>In the second IIFE function, <code>x = x + y</code> then the current value is 5. In the second operation, it returns only 1 as it undergoes <code>5%2</code>.</p>
<p>In the third and fouth IIFE functions, we get 2 <code>x = x + x</code> and then 4 <code>x = x * x</code>. It is more than simple.</p>
</p>
</details>
<hr>
<h3 id="9-whats-the-output">9. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nv">$var</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$f</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nv">$let</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$var</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">++</span><span class="nv">$let</span> <span class="o">+</span> <span class="nv">$var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$var</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="nv">$f</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">(</span><span class="nx">l</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="o">++</span><span class="nx">l</span> <span class="o">+</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">x</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 26 and 26;</li>
<li>B: 21 and 21;</li>
<li>C: 21 and 26;</li>
<li>D: 26 and 21;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-2">Answer: C</h4>
<p>This question illustrates the diffences between PHP and JavaScript when handling closure. In the first snippet, we declare a closure with the keyword <code>use</code>. Closure in PHP is simply an anonymous function and the data is passed to the function using the keyword <code>use</code>. Otherwise, it is called as <code>lambda</code> when we do not use the keyword <code>use</code>. You can check the result of the snippet here <a href="https://3v4l.org/PSeMY">https://3v4l.org/PSeMY</a>. PHP <code>closure</code> only accepts the value of the variable BEFORE the closure is defined, no matter where it is called. As such, <code>$var</code> is 10 rather than 15.</p>
<p>On the contrary, JavaScript treats the variable a bit different when it is passed to anonymous function. We do not have to use the keyword <code>use</code> here to pass variable to the closure. The variable <code>x</code> in the second snippet is updated before the closure is called, then we get 26.</p>
<p>Note that in PHP 7.4, we have arrow function and we then do not have to use the keyword <code>use</code> to pass the variable to function. Another way to call a <code>global</code> ariable inside a function in PHP is to use the keyword <code>global</code> or employ the built-in GLOBAL variable $GLOBALS.</p>
</p>
</details>
<hr>
<h3 id="10-whats-the-output">10. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="nx">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="nx">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">z</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: true true true true;</li>
<li>B: false false false false;</li>
<li>C: true true false false;</li>
<li>D: false false true true;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-1">Answer: D</h4>
<p>Technically, <code>x</code> and <code>y</code> have the same value. Both are empty objects. However, we do not use the value to compare objects.</p>
<p><code>z</code> is <code>x</code> are two objects referring to the same memory position. In JavaScript, array and object are passed by <code>reference</code>. <code>x</code> and <code>z</code> therefore return true when being compared.</p>
</p>
</details>
<hr>
<h3 id="11-whats-the-output">11. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;world&#34;</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;hi&#34;</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;hello&rdquo; -&gt; &ldquo;world&rdquo; -&gt; &ldquo;hi&rdquo;</li>
<li>B: &ldquo;hello&rdquo; -&gt; &ldquo;hi&rdquo; -&gt; &ldquo;world&rdquo;</li>
<li>C: &ldquo;hi&rdquo; -&gt; &ldquo;world&rdquo; -&gt; &ldquo;hello&rdquo;</li>
<li>D: &ldquo;hi&rdquo; -&gt; &ldquo;hello&rdquo; -&gt; &ldquo;world&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-1">Answer: B</h4>
<p>Given that the function setTimeout() will be kept in the <code>task queue</code> before jumping back to <code>stack,</code> &ldquo;hello&rdquo; and &ldquo;hi&rdquo; will be printed first, then A is incorrect. That is also the case of the answers C and D.</p>
<p>No matter how many seconds you set to the <code>setTimeout()</code> function, it will run after synchronous code. So we will get &ldquo;hello&rdquo; first as it is put into the call stack first. Though the <code>setTimeout()</code> is then being put into the call stack, it will subsequently offload to web API (or Node API) and then being called when other synchronous codes are cleared. It means we then get &ldquo;hi&rdquo; and finally &ldquo;world&rdquo;.</p>
<p>So B is the correct answer.</p>
<p>Credit: @kaitoubg (voz) for your suggestion regarding the <code> timeout throttled</code> by which I have decided to alter the question slightly. It will ensure that readers will not get confused as the previous code might bring out different results when tested on other browsers or environments. The main point of the question is about the discrepancy between the synchronous code and asynchronous code when using <code>setTimeout.</code>.</p>
</p>
</details>
<hr>
<h3 id="12-whats-the-output">12. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lengthy</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Vuong&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">delete</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">x</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">lengthy</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;Vuong&rdquo;;</li>
<li>B: &ldquo;hello&rdquo;;</li>
<li>C: &ldquo;undefined&rdquo;</li>
<li>D: &ldquo;ReferenceError&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-2">Answer: B</h4>
<p><code>String.prototype.someThing = function () {}</code> is the common way to define a new built-in method for <code>String</code>. We can do the same thing with <code>Array</code>, <code>Object</code> or <code>FunctionName</code> where FunctionName is the function designed by ourself.</p>
<p>That is not challenging to realise that <code>&quot;string&quot;.lengthy()</code> always returns <code>hello</code>. Yet, the tricky part lies in the <code>delete object</code> where we might think that this expression will entirely delete the object. That is not the case as <code>delete</code> is used to delete the property of the object only. It does not delete the object. Then we get <code>hello</code> rather than <code>ReferenceError</code>.</p>
<p>Note that if we declare object without <code>let, const</code> or <code>var</code>, we then have a global object. <code>delete objectName</code> then return <code>true</code>. Otherwise, it always returns <code>false</code>.</p>
</p>
</details>
<hr>
<h3 id="13-whats-the-output">13. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">x</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">hi</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hi</span> <span class="o">=</span> <span class="o">++</span><span class="nx">x</span><span class="p">.</span><span class="nx">hi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">hi</span> <span class="o">+</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">x</span><span class="p">).</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 10</li>
<li>B: 11</li>
<li>C: 12</li>
<li>D: NaN</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-3">Answer: C</h4>
<p>First we have an empty object <code>x</code>, then we add another property <code>hi</code> for x with <code>x.__proto__.hi</code>. Note this is equivalent to <code>Object.prototype.hi = 10</code> and we are adding to the <code>father</code> object <code>Object</code> the property <code>hi</code>. It means every single object will inherit this propety. The property <code>hi</code> becomes a shared one. Say now we declare a new object such as <code>let y = {}</code>, <code>y</code> now has a propery <code>hi</code> inherited from the <code>father</code> <code>Object</code>. Put it simply <code>x.__proto__ === Object.prototype</code> returns <code>true</code>.</p>
<p>Then we overwrite the property <code>hi</code> with a new value 11. Last we have 11 + 1 = 12. <code>x</code> has one property and <code>x.hi</code> returns 11.</p>
<p>Updated (July 27th 2021). If you write <code>Object.prototype.hi = 11;</code> instead of <code>Object.prototype.hi = ++x.hi;</code> as written in the code above, then <code>Object.keys(x)</code> will return an empty array as <code>Object.keys(object)</code> only returns the property of the object itself, not the inherited ones. It means the final result will be 11 rather than 12. For some reason, the code ``Object.prototype.hi = ++x.hi;<code>will create a property for the object</code>x<code>itself and then</code>Object.keys(x)<code>gives us the array</code>[&ldquo;hi&rdquo;]`.</p>
<p>Yet, if you run <code>console.log(x.hasOwnProperty(&quot;hi&quot;))</code> it still returns <code>false</code>. By the way, when you deliberately add a property for x such as <code>x.test = &quot;testing&quot;</code>, then <code>console.log(x.hasOwnProperty(&quot;test&quot;))</code> returns <code>true</code>.</p>
</p>
</details>
<hr>
<h3 id="14-whats-the-output">14. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">delete</span> <span class="nx">a</span><span class="p">[</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">[</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">({</span> <span class="mi">1</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="o">:</span> <span class="mi">5</span> <span class="p">}));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">setPropNull</span> <span class="o">=</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">[</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">setPropNull</span><span class="p">({</span> <span class="mi">1</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="o">:</span> <span class="mi">5</span> <span class="p">}));</span>
</span></span></code></pre></div><ul>
<li>A: 333</li>
<li>B: 444</li>
<li>C: 434</li>
<li>D: 343</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-4">Answer: C</h4>
<p>This question examines how the <code>delete</code> operator works in JavaScript. In short, it does nothing when we write <code>delete someObject</code> or <code>delete someArray</code>. It nonetheless completely deletes and removes a property of an object when writing something like <code>delete someObject.someProperty</code>. In the case of array, when we write <code>delete someArray[keyNumber]</code>, it only removes the <code>value</code> of the <code>index</code>, keep the <code>index</code> intact and the new <code>value</code> is now set to <code>undefined</code>. For that reason, in the code first snippet, we get (the length) 4 elements as in the original array but only 3 properties left in the object passed when the function object() is called, as in the second snippet.</p>
<p>The third snippet gives us 4 as declaring an object&rsquo;s propery to either <code>null</code> or <code>undefined</code> does not completely remove the property. The key is intact. So the length of the object is immutable.</p>
<p>For those who are familiar with PHP, we have <code>unset($someArray[index])</code> that remove the array element, both key and value. When <code>print_r</code> the array, we might not see the key and value that have been unset. However, when we push (using <code>array_push($someArray, $someValue)</code>) a new element in that array, we might see that the previous key is still kept, but no value and not being displayed. That is something you should be aware of. Have a look at <a href="https://3v4l.org/7C3Nf">https://3v4l.org/7C3Nf</a></p>
</p>
</details>
<hr>
<h3 id="15-whats-the-output">15. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span> <span class="o">===</span> <span class="nx">d</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span> <span class="o">===</span> <span class="nx">f</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: true true true</li>
<li>B: false false true</li>
<li>C: true true false</li>
<li>D: false true false</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-2">Answer: D</h4>
<p><code>a</code> and <code>b</code> returns false because they point to different memory location even though the values are the same. If you are coming from PHP world, then it will return true obviously when we compare either value or value + type. Check it out: <a href="https://3v4l.org/IjaOs">https://3v4l.org/IjaOs</a>.</p>
<p>In JavaScript, value is passed by reference in case of <code>array</code> and <code>object</code>. Hence in the second case, <code>d</code> is the copy of <code>c</code> but they both point to the same memory position. Everything changes in <code>c</code> will result in the change in <code>d</code>. In PHP, we might have <code>$a = &amp;$b;</code>, working in the similar way.</p>
<p>The third one gives us a hint to copy an array in JavaScript using <code>slice()</code> method. Now we have <code>f</code>, which is the copy of <code>e</code> but they point to different memory locations, thus they have different &ldquo;life&rdquo;. We get <code>false</code> accordingly when they are being compared.</p>
</p>
</details>
<hr>
<h3 id="16-whats-the-output">16. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;elixir&#34;</span><span class="p">,</span> <span class="s2">&#34;golang&#34;</span><span class="p">,</span> <span class="s2">&#34;js&#34;</span><span class="p">,</span> <span class="s2">&#34;php&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;feature&#34;</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">feature</span><span class="o">:</span> <span class="s2">&#34;awesome&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">flag</span> <span class="o">=</span> <span class="nx">languages</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">languages</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="mi">4</span><span class="p">].</span><span class="nx">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">languages</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span> <span class="o">&lt;&lt;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">languages</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">languages</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span> <span class="o">&lt;&lt;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">languages</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><ul>
<li>A: 8</li>
<li>B: NaN</li>
<li>C: 64</li>
<li>D: 12</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-64">Answer: 64</h4>
<p>The code snippet is quite tricky as it has a couple of different built-in methods handling object in <code>JavaScript</code>. For example, both <code>Object.keys</code> and <code>Object.getOwnPropertyNames</code> are used even thought they are quite similar except that the latter can return non-enumerable properties. You might want to have a look at this thoroughly written reference <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames</a></p>
<p><code>Object.values</code> and <code>Object.keys</code> return the property value and property name of the object, respectively. That is nothing new. <code>object.hasOwnProperty('propertyName')</code> returns a <code>boolean</code> confirming whether a property exists or not.</p>
<p>We have <code>flag</code> true because <code>Object.values(languages)[0][4].name</code> returns <code>feature</code>, which is also the name of the property.</p>
<p>Then we have 4 &laquo; 4 in the <code>if-else</code> flow that returns the bitwise value, equivalent to <code>4*2^4</code> ~ <code>4*16</code> ~ 64.</p>
</p>
</details>
<hr>
<h3 id="17-whats-the-output">17. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Ronaldo&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">34</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getAge</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">score</span><span class="p">(</span><span class="nx">greeting</span><span class="p">,</span> <span class="nx">year</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">greeting</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="sb">`! You were born in  </span><span class="si">${</span><span class="nx">year</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">getAge</span><span class="p">()</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">score</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">player</span><span class="p">,</span> <span class="s2">&#34;Kiora&#34;</span><span class="p">,</span> <span class="mi">2019</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">score</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">player</span><span class="p">,</span> <span class="p">[</span><span class="s2">&#34;Kiora&#34;</span><span class="p">,</span> <span class="mi">2009</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">helloRonaldo</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">score</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">player</span><span class="p">,</span> <span class="s2">&#34;Kiora&#34;</span><span class="p">,</span> <span class="mi">2029</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">helloRonaldo</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;Kiora Ronaldo! You were born in 1985&rdquo;, &ldquo;Kiora Ronaldo! You were born in 1985&rdquo;, &ldquo;Kiora Ronaldo! You were born in 1985&rdquo;</li>
<li>B: &ldquo;Kiora Ronaldo! You were born in 1991&rdquo;, &ldquo;Kiora Ronaldo! You were born in 1991&rdquo;, &ldquo;Kiora Ronaldo! You were born in 1999&rdquo;</li>
<li>C: &ldquo;Kiora Ronaldo! You were born in 1991&rdquo;, NaN, &ldquo;Kiora Ronaldo! You were born in 1980&rdquo;</li>
<li>D: &ldquo;Kiora Ronaldo! You were born in 1991&rdquo;, &ldquo;Kiora Ronaldo! You were born in 1980&rdquo;, &ldquo;Kiora Ronaldo! You were born in 1999&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-3">Answer: D</h4>
<p>We can use <code>call()</code>, <code>apply()</code> and <code>bind()</code> to apply a function to any object. At first sight, it seems that three functions do the same thing. Yet there are some situations where they are differently employed to handle respective contexts or solve particular problems.</p>
<p>Of the three, only <code>bind()</code> can be executed after binding. We can create a variable to store the result as <code>helloRonaldo()</code> in the code snippet above. <code>apply()</code> and <code>call()</code> will bind and execute the function at the same time. <code>apply()</code> hints us <code>a</code> ~ array where we need to pass an array as parameter. <code>call()</code> hints us <code>c</code> or comma where we pass parameters with a comma. You might want to have a look at this post <a href="https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind">https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind</a></p>
<p>Note that <code>window.window.window.score</code> or <code>window.score</code> or simply <code>score</code> do the same thing. It points to the <code>score()</code> function in the global scope.</p>
<p>The correct anwser is D. The <code>score()</code> and <code>getAge()</code> functions are nothing special. The only tricky part is that <code>this.age</code> is incremented each time you call the funtion <code>getAge()</code>;</p>
</p>
</details>
<hr>
<h3 id="18-whats-the-output">18. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ronaldo</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">34</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">messi</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">32</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">score</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span> <span class="nx">tr</span><span class="p">,</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">tr</span> <span class="o">===</span> <span class="s2">&#34;function&#34;</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">t</span> <span class="o">===</span> <span class="s2">&#34;function&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`You score </span><span class="si">${</span><span class="nx">tr</span><span class="p">(</span><span class="nx">year</span><span class="p">,</span> <span class="nx">t</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">))</span><span class="si">}</span><span class="sb"> times`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">transform</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="o">++</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">x</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">helloRonaldo</span> <span class="o">=</span> <span class="nx">score</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">ronaldo</span><span class="p">,</span> <span class="mi">2029</span><span class="p">,</span> <span class="nx">transform</span><span class="p">,</span> <span class="nx">title</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">helloRonaldo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">helloMessi</span> <span class="o">=</span> <span class="nx">score</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">messi</span><span class="p">,</span> <span class="mi">2029</span><span class="p">,</span> <span class="nx">transform</span><span class="p">,</span> <span class="nx">title</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">helloMessi</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;You score 1989 times&rdquo; and &ldquo;You score 1963 times&rdquo;</li>
<li>B: &ldquo;You score 1959 times&rdquo; and &ldquo;You score 1989 times&rdquo;</li>
<li>C: &ldquo;You score 1989 times&rdquo; and &ldquo;You score 1953 times&rdquo;</li>
<li>D: &ldquo;You score 1959 times&rdquo; and &ldquo;You score 1963 times&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-4">Answer: D</h4>
<p><code>bind()</code> allows us to bind a function declared with any object. Here we bind <code>score()</code> and both <code>ronaldo</code> and <code>messi</code>.</p>
<p>In <code>score()</code> we pass three parameters <code>year</code>, <code>tr</code> and <code>t</code> in which both <code>tr</code> and <code>t</code> are function. They handle simple things as defined afterwards.</p>
<p>When we bind <code>score()</code> with <code>ronaldo</code> and <code>messi</code>, we pass three parameters as declared in the <code>score()</code> function wherein <code>transform</code> and <code>title</code> are functions.</p>
</p>
</details>
<hr>
<h3 id="19-whats-the-output">19. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;Vuong&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">job</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;developer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">studying</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;PhD&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">money</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;NZD&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Evaluate</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">checkFlag</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">?</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">flag</span> <span class="o">=</span> <span class="nx">Evaluate</span><span class="p">.</span><span class="nx">checkFlag</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">flag</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 1</li>
<li>B: 2</li>
<li>C: 3</li>
<li>D: 4</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-5">Answer: D</h4>
<p><code>Object.keys(obj)</code> is almost identical to <code>Object.getOwnPropertyNames(obj)</code> except the fact that the latter returns any type of object&rsquo;s property regardless of <code>enumerable</code>. By default <code>enumerable</code> is true when creating object. Using <code>Object.defineProperties</code> or <code>Object.defineProperty</code> we can manually set this option to <code>false</code>.</p>
<p>As such the object <code>person</code> will get 3 using<code>Object.keys(obj)</code>but 4 with <code>Object.getOwnPropertyNames(obj)</code>. <code>In short Object.keys(obj)</code> only returns the property setting the enumerable as <code>true</code>.</p>
</p>
</details>
<hr>
<h3 id="20-whats-the-output">20. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getID</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">id</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">id</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">getID</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: ReferenceError</li>
<li>B: 10</li>
<li>C: undefined</li>
<li>D: &lsquo;function&rsquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-6">Answer: D</h4>
<p>When declaring a function inside another function, we are working with Closure in JavaScript. Note that if a function is declared as normal (rather than function expression), it is hoisted. We might see several <code>id</code> in the code snippet above but in fact, some of them does nothing.</p>
<p>The result of the code depending on the operator <code>typeof id</code>, which is <code>function</code>. So <code>id</code> in this operation is the <code>id()</code> function.</p>
</p>
</details>
<hr>
<h3 id="21-whats-the-output">21. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">book1</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Name of the rose&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">book2</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;Harry Potter&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">bookCollection</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">book1</span><span class="p">,</span> <span class="nx">book2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">bookCollection</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: &lsquo;Harry Potter&rsquo;</li>
<li>B: &lsquo;Name of the rose&rsquo;</li>
<li>C: ReferenceError</li>
<li>D: Object object</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-4">Answer: A</h4>
<p><code>Object.create</code> allows us to create an object which is based on another object. If we do not pass the second parameter - <code>book2</code> in this case - the <code>name</code> property of the object <code>bookCollection</code> will be <code>Name of the rose</code> inherited from the <code>book1</code>. It means we can provide additional properties when declaring object with <code>Object.create</code>.</p>
<p><code>bookCollection</code> has its own property <code>name</code> and another one inherited from <code>book1</code>. In this case its own property <code>name</code> will show up as it has higher priority. That is why we get &lsquo;Harry Potter&rsquo;.</p>
</p>
</details>
<hr>
<h3 id="22-whats-the-output">22. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">f1</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&#34;toString&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">f2</span> <span class="o">=</span> <span class="s2">&#34;toString&#34;</span> <span class="k">in</span> <span class="nx">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f1</span> <span class="o">===</span> <span class="kc">false</span> <span class="o">&amp;&amp;</span> <span class="nx">f2</span> <span class="o">===</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">      <span class="o">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()).</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><ul>
<li>A: ReferenceError</li>
<li>B: undefined</li>
<li>C: 0</li>
<li>D: 6</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-7">Answer: D</h4>
<p>The two objects <code>a</code> and <code>b</code> are created using <code>Object.create()</code> operator. There is a bit of difference between them as <code>a</code> inherits from Object prototype but <code>b</code> is totally empty when we pass the <code>null</code> paramater. Yet <code>hasOwnProperty('toString')</code> always returns <code>false</code> neither <code>a</code> nor <code>b</code> given that <code>toString()</code> is not defined inside these objects. The method however is still available as it is inherited from Object prototype.</p>
<p>Both <code>f1</code> and <code>f2</code> return <code>false</code>. Note that we use <code>object.hasOwnProperty('key')</code> and <code>('key' in object)</code> to check the availability of a key in an object. There is a bit difference between the two as the latter also returns the key inherited. You might want to have a look here: <a href="https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript">https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript</a></p>
<p>Then <code>typeof a.toString()</code> returns <code>string</code>, which gives us 6 with the <code>.length</code> property.</p>
<p>If the syntax is odd to you, you might look for &lsquo;self-invoking function&rsquo; and &lsquo;arrow function&rsquo; in JavaScript.</p>
</p>
</details>
<hr>
<h3 id="23-whats-the-output">23. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">rs</span><span class="p">,</span> <span class="nx">rj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">rs</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">promise</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">rs</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rs</span> <span class="o">?</span> <span class="nx">rs</span> <span class="o">**</span> <span class="nx">rs</span> <span class="o">:</span> <span class="nx">rs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">rs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">rs</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">rs</span> <span class="o">==</span> <span class="mi">256</span> <span class="o">?</span> <span class="nx">rs</span> <span class="o">:</span> <span class="nx">rs</span> <span class="o">*</span> <span class="nx">rs</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 3, 2, 256, 256</li>
<li>B: 3, 2, 256, 16</li>
<li>C: 256, 16, 3, 2</li>
<li>D: 16, 256, 3, 2</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-3">Answer: B</h4>
<p>We first declare a promise-based code with <code>let</code> and then call it. Given that <code>setTimeout()</code> is an asynchronous action, it will run last even the time is set to 0 in <code>setTimeout(() =&gt; rs(4), 0);</code>. Although <code>Promise.resolve(console.log(3))</code> also returns a promise but it is a Microtasks, then it has a higher priority than Tasks as set by <code>setTimeout()</code>. You might want to have a look at this post <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a>.</p>
<p>In <code>.then()</code> we chain the result so that we have <code>4^4</code> in the first then() and <code>4*4</code> in the second <code>then()</code>. Note that <code>return rs</code> returns the original value.</p>
</p>
</details>
<hr>
<h3 id="24-whats-the-output">24. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;done!&#34;</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;world&#34;</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kr">await</span> <span class="nx">promise</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">f</span><span class="p">(</span><span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;kiora&#34;</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: ReferenceError</li>
<li>B: done, hello, world</li>
<li>C: hello, done, world</li>
<li>D: kiora, done, hello, world</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-8">Answer: D</h4>
<p>Though we do not declare any paramater for the function <code>f()</code>, we pass <code>setTimeout(()=&gt;console.log(&quot;kiora&quot;),0)</code> when call it. We therefore get &lsquo;kiora&rsquo; first.</p>
<p>Given that the variable <code>promise</code> returns a solved promise and it is called with the keyword <code>await</code>, JavaScript will &lsquo;pause&rsquo; at this line <code>console.log(await promise);</code> till the result is resolved. That is why we get &ldquo;done&rdquo; at the next result.</p>
<p>Why we do not get &ldquo;world&rdquo; or &ldquo;hello&rdquo; at the second ? As JavaScript &ldquo;pauses&rdquo; at the line with <code>await</code> keyword, we cannot get &ldquo;hello&rdquo; as usual (note that whenever we call setTimeout(), this function will run last because it is an asynchronous task operator), whereas <code>setTimeout(()=&gt; console.log(&quot;world&quot;), 0);</code> should always run last.</p>
<p>Here we might see a bit of difference when employing <code>await</code> keyword before asynchronous operator (in this case, we use <code>setTimeout()</code> as an example) or when call the function/operator without it.</p>
</p>
</details>
<hr>
<h3 id="25-whats-the-output">25. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;New Zealand&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">fruit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;Kiwi&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="mi">20</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kr">async</span> <span class="kd">function</span> <span class="nx">countryandfruit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">getName</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">name</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">getFruit</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fruit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Kiora: </span><span class="si">${</span><span class="nx">getName</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">getFruit</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kr">async</span> <span class="kd">function</span> <span class="nx">fruitandcountry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">[</span><span class="nx">getName</span><span class="p">,</span> <span class="nx">getFruit</span><span class="p">]</span> <span class="o">=</span> <span class="kr">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">name</span><span class="p">(),</span> <span class="nx">fruit</span><span class="p">()]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello: </span><span class="si">${</span><span class="nx">getName</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">getFruit</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><ul>
<li>A: Null</li>
<li>B: Kiora</li>
<li>C: &ldquo;Hello: New Zealand Kiwi&rdquo; -&gt; &ldquo;Kiora: New Zealand Kiwi&rdquo;</li>
<li>D: &ldquo;Kiora: New Zealand Kiwi&rdquo; -&gt; &ldquo;Hello: New Zealand Kiwi&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-5">Answer: C</h4>
<p>Both <code>countryandfruit</code> and <code>fruitandcountry</code> are self invoking functions. Both are declared with the keyword <code>async</code>, it means the code inside will run step by step. It helps us control the flow of data much more concise as compared to Promise-based operator or callback way.</p>
<p>The first function returns <code>&quot;Kiora: New Zealand Kiwi&quot;</code> and the second one ouputs <code>&quot;Hello: New Zealand Kiwi&quot;</code>. We might think that the order will be the same but actually the order of the result is reversed because the function with <code>await</code> keyword will run step by step rather than in in parallel as Promise.all. It means <code>fruitandcountry</code> will run faster than <code>countryandfruit</code>.</p>
<p>You might want to have a look at the difference between the two at <a href="https://alligator.io/js/async-functions/">https://alligator.io/js/async-functions/</a></p>
</p>
</details>
<hr>
<h3 id="26-whats-the-output">26. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">MySort</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">object</span> <span class="o">=</span> <span class="nx">object</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getSort</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="nx">sort</span><span class="p">()[</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">).</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">month</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;July&#34;</span><span class="p">,</span> <span class="s2">&#34;September&#34;</span><span class="p">,</span> <span class="s2">&#34;January&#34;</span><span class="p">,</span> <span class="s2">&#34;December&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sortMe</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MySort</span><span class="p">(</span><span class="nx">object</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sortMe</span><span class="p">.</span><span class="nx">getSort</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: July</li>
<li>B: September</li>
<li>C: January</li>
<li>D: December</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-6">Answer: C</h4>
<p><code>Object.entries</code> returns an array consisting of both key and value from an object while <code>Object.values</code> retuns an array of the values of object and <code>Object.keys</code> gives us an array of keys of the object. As such, <code>Object.entries(object)</code> in the code snippet above gives us a nested array with just one element in which the values are put in another nested array like that <code>[[&quot;month&quot;, [&quot;July&quot;, &quot;September&quot;, &quot;January&quot;, &quot;December&quot;]]]</code>.</p>
<p>For that reason, <code>Object.entries(this.object)[0][1].sort()</code> will actually sort the value array and return a new order as &ldquo;December&rdquo; -&gt; &ldquo;January&rdquo; -&gt; &ldquo;July&rdquo; -&gt; &ldquo;September&rdquo;. Hence, when we get the element with the index given by <code>[Object.values(this.object).length]</code> we get <code>January</code> because <code>[Object.values(this.object).length]</code> give us 1 (the length of the array given by Object.values);</p>
</p>
</details>
<hr>
<h3 id="27-whats-the-output">27. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">flag</span> <span class="o">=</span> <span class="p">[]</span> <span class="o">!==</span> <span class="o">!!!!!</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="k">typeof</span> <span class="nx">f</span><span class="p">()).</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: 12</li>
<li>C: 13</li>
<li>D: 14</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-7">Answer: C</h4>
<p>Comparing two arrays or two objects in JavaScript always return <code>false</code> because both are passed by reference, unlike primitive types such as string, number or boolean. That is why comparing [] and [] using either == or === returns <code>false</code>. The weird part is the <code>!==!!!!!</code> which is equivalent to <code>!==</code>, nothing special. So the <code>flag</code> is <code>true</code>.</p>
<p>In the expression function <code>f()</code>, we use arrow function here but and <code>{}</code> is a part of the function rather than an object. In case you want to return an object, you have to write as <code>let f = () =&gt; ({})</code> or simply using normal way to define function. With the keyword <code>return</code>, we can easily catch the content of the function when using normal way to define function.</p>
<p>Thus, the <code>typeof f()</code> returns <code>undefined</code> rathern <code>object</code>. We then get the length 9 and the flag (true) becomes &rsquo;true&rsquo; (a string, by using toString() function), which returns 3 with the property <code>length</code>. We finally get 13.</p>
</p>
</details>
<hr>
<h3 id="28-whats-the-output">28. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">arguments</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">c</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="o">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="nx">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 4</li>
<li>B: 5</li>
<li>C: 6</li>
<li>D: 7</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-9">Answer: D</h4>
<p>We have a self-invoking function with three parameters declared. Note that <code>arguments</code> inside a function returns an object consisting of the parameters of the function.</p>
<p>The key part here is that when we assign a value to that array (it is array-like, as mentioned above) (or any element), the function will use that value rather than the value from the parameter we pass to it when calling the function. Hence, <code>c</code> will be <code>(typeof arguments).length;</code> (6) rather than 3.</p>
<p>As <code>c</code> has a new value of 6, it is definitely less than 10, so we get the final result <code>console.log(++c)</code>, which returns 7.</p>
<p>Note that <code>arguments</code> is not available on arrow functions. See more detailed here <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments</a></p>
<p>From ES6 onwards, it is recommended to use &hellip;restParameter given that it is a true array. It means you can manipulate the parameter with native JavaScript functions such as map, reduce or filter.</p>
<p>For PHP developer, we have <code>func_get_args()</code> in PHP that does the same thing, but it will not override the value passed. Check it by yourself at <a href="https://3v4l.org/dMfhW">https://3v4l.org/dMfhW</a></p>
</p>
</details>
<hr>
<h3 id="29-whats-the-output">29. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Calculator</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">getFlag</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span> <span class="o">==</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getValue</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">Calculator</span><span class="p">.</span><span class="nx">getFlag</span><span class="p">()</span> <span class="o">?</span> <span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span> <span class="o">:</span> <span class="k">typeof</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">getValue</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: &ldquo;string&rdquo;</li>
<li>C: &ldquo;object&rdquo;</li>
<li>D: &ldquo;number&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-8">Answer: C</h4>
<p>We have a class named Calculator. When declaring a new instance of the object, we pass two parameters <code>a</code> and <code>b</code>. These two parameters have the same value but <code>new Array(this.a).length</code> is totally different from <code>new Array(this.b).toString().length</code> because the latter returns a string <code>&quot;,,,,&quot;</code> meaning the length 4 while the former returns the length of an array and we therefore get 5.</p>
<p>For that reason <code>getFlag()</code> returns <code>false</code>. In <code>getValue()</code> we get <code>typeof new Number(this.b);</code> which returns <code>object</code>. That is a bit different from <code>typeof b</code>, which returns <code>number</code>.</p>
</p>
</details>
<hr>
<h3 id="30-whats-the-output">30. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Auckland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">nz</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Kiwi&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">callMe</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">nz</span><span class="p">.</span><span class="nx">callMe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">she</span> <span class="o">=</span> <span class="nx">nz</span><span class="p">.</span><span class="nx">callMe</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">nz</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">me</span><span class="p">()</span> <span class="o">===</span> <span class="nx">nz</span><span class="p">.</span><span class="nx">callMe</span><span class="p">()</span> <span class="o">?</span> <span class="nx">she</span><span class="p">()</span> <span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="nx">me</span><span class="p">()</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">she</span><span class="p">()</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: undefined</li>
<li>B: &ldquo;Auckland&rdquo;</li>
<li>C: &ldquo;Kiwi&rdquo;</li>
<li>D: &ldquo;Auckland Kiwi&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-10">Answer: D</h4>
<p>The key point in this question involves the keyword <code>this</code> in JavaScript. We have a simple object that contains one method and one string property <code>name</code>.</p>
<p>First, it is important to write down is that <code>let me = nz.callMe;</code> and then call <code>me()</code> is totally different from directly calling <code>nz.callMe()</code>. If we assign a variable to a method delared inside an object, <code>this</code> in that method will behave differently (when we call the variable as a method and when dirrectly call that method). In particular, in the first case, <code>this</code> is the <code>window</code> object while in the second one, <code>this</code> inside the function still points to property <code>name</code> in the object <code>nz</code>. It means <code>me()</code> returns &ldquo;Auckland&rdquo; while <code>nz.callMe</code> returns &ldquo;Kiwi&rdquo;.</p>
<p>Then <code>result</code> will return <code>false</code> and we get the final output value <code>${me()} ${she()}</code>. Why <code>she()</code> is different from <code>me()</code>? You might easily guess that <code>she</code> still <code>bind</code> to the object <code>nz</code> rather than <code>window</code> object as in <code>me()</code>.</p>
</p>
</details>
<hr>
<h3 id="31-whats-the-output">31. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">club</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Juventus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">player</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;Ronaldo&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">showMePlayer</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">thename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">showMe</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kd">function</span> <span class="p">(</span><span class="nx">thename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">show</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">thename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Me</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">player</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">thename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">club</span><span class="p">.</span><span class="nx">showMePlayer</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">club</span><span class="p">.</span><span class="nx">showMe</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">club</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">club</span><span class="p">.</span><span class="nx">Me</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: 8 - 8 - 8 - 8</li>
<li>B: &ldquo;Juventus&rdquo; - &ldquo;Juventus&rdquo; - &ldquo;Juventus&rdquo; - &ldquo;Juventus&rdquo;</li>
<li>C: &ldquo;Ronaldo&rdquo; - &ldquo;Ronaldo&rdquo; - &ldquo;Ronaldo&rdquo; - &ldquo;Ronaldo&rdquo;</li>
<li>D: 8 - 8 - 8 - 0</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-11">Answer: D</h4>
<p>The code snippet above is not a big challenge for you I guess. It simply gives you an example of <code>this</code> in different contexts when we declare an anonymous function inside a method of an object. The three first methods are common ways to handle <code>this</code> using <code>this</code> as second parameter in <code>map()</code>, by using <code>bind(this)</code> in <code>forEach</code> (or map()) or by <code>that = this</code>technique (you might see people use <code>self = this</code> rather than <code>that= this</code>).</p>
<p>The last method <code>Me()</code> will cause unexpected result because <code>this.name</code> does not bind to the object <code>club</code>. Note that you might get another result when testing the code on jsbin.com. On Chrome and Firefox, we get 0.</p>
<p>For further information, kindly have a look at <a href="http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method">http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method</a></p>
</p>
</details>
<hr>
<h3 id="32-whats-the-output">32. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">((...</span><span class="nx">a</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;javascript&#34;</span><span class="p">,</span> <span class="s2">&#34;new zealand&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">a</span><span class="p">,</span> <span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">b</span><span class="p">,</span> <span class="s2">&#34;kiwi&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 5</li>
<li>B: 10</li>
<li>C: 15</li>
<li>D: 20</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-9">Answer: C</h4>
<p><code>...</code> can be used in two ways in JavaScript (and PHP) as either <code>spread operator</code> or <code>rest parameter</code>. You might have to check the following article about the two. They are the same as three dots, but the way they are employed vary considerably between the two. <a href="https://javascript.info/rest-parameters-spread-operator">https://javascript.info/rest-parameters-spread-operator</a></p>
<p>We see both <code>spread operator</code> and <code>rest parameter</code> in the code snippet above. First the parameter <code>(...a)</code> in the self-invoking function is of course a <code>rest parameter</code> while the constant <code>c</code> we see the <code>spread operator</code>. In the former case, it simply means that you can pass to the function as many parameter as you want. Note that the <code>typeof a</code> in this case is <code>object</code> even though it is a native array in JavaScript. (I means native array because you might think about array-like if we use arguments. Please have a look at the question 28 or this link <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)</a>.</p>
<p><code>Spread operator</code> as in the constant <code>c</code> allows us to combine array. So <code>...a</code> in the code above is <code>rest parameter</code> when it is used as function parameter but in this case it is the syntax of <code>spread operator</code>.</p>
<p>Finally, we get <code>c</code> with 5 elements (<code>...a</code> is a nested array, so the <code>length</code> is 1) but the first element has 10 child elements (when we pass to the function <code>new Array(10)</code>). The length of both then returns 15.</p>
</p>
</details>
<hr>
<h3 id="33-whats-the-output">33. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">Kiora</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="p">...</span><span class="nx">career</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">career</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">career</span> <span class="o">===</span> <span class="s2">&#34;object&#34;</span> <span class="o">?</span> <span class="p">{}</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">student</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Kiora</span><span class="p">(</span><span class="s2">&#34;Vuong&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">student</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;Vuong&rdquo;</li>
<li>B: undefined</li>
<li>C: ErrorReference</li>
<li>D: false</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-4">Answer: B</h4>
<p>We have a function constructor <code>Kiora</code> (written with a capital letter, but that is optional) that can be used to create object, as the <code>student</code> object in the code above. In the function, we have two parameters with the second one is actually a <code>rest parameter</code>. The typeof operator is <code>object</code> but if we check with <code>Array.isArray(array)</code> it also returns true.</p>
<p>For that reason, <code>Array.isArray(career) === true &amp;&amp; typeof career === &quot;object&quot;</code> returns true. Hence the <code>return</code> operator finally returns an object <code>{}</code>.</p>
<p>You might be surprised when <code>console.log(student.name);</code> outputs <code>undefined</code> given that the constructor function <code>Kiora</code> returns an object. Otherwise, we might simply get the value <code>name</code>.</p>
</p>
</details>
<hr>
<h3 id="34-whats-the-output">34. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Filter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">element</span> <span class="o">=</span> <span class="nx">element</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">filter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">()</span> <span class="o">===</span> <span class="s2">&#34;object&#34;</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span> <span class="o">:</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">type</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;New Zealand&#34;</span><span class="p">,</span> <span class="nx">isdeveloped</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Vietnam&#34;</span><span class="p">,</span> <span class="nx">isdeveloped</span><span class="o">:</span> <span class="kc">false</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Filter</span><span class="p">(</span><span class="nx">countries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">countries</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">!</span><span class="nx">item</span><span class="p">.</span><span class="nx">isdeveloped</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">.</span><span class="nx">filter</span><span class="p">().</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">filter</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 15</li>
<li>B: 16</li>
<li>C: 17</li>
<li>D: 18</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-12">Answer: D</h4>
<p>Apologize that the code snippet is a bit longer than usual. But actually it is not really challenging as you might think. You can easily get the correct result after spending a little of time to debug.</p>
<p>First we declare a class that has two methods. The first method <code>filter()</code> will returns the first element of the array (of the propterty <code>element</code>) or simply returns <code>hello</code> depending on the <code>type()</code> method. We know that <code>typeof of array</code> will return <code>object</code> so the <code>filter()</code> method return <code>this.element[0].name</code>.</p>
<p>Try to make you feel confused, we then call the built-in <code>filter()</code> method. This native method returns a new array depending on the condition we pass to the call-back function. Note that <code>!item.isdeveloped</code> means <code>false</code>. It means we get <code>Vietnam</code>.</p>
<p>Finally we get <code>New Zealand</code>.length and <code>Vietnam</code>.length, which in total returns 18.</p>
</p>
</details>
<hr>
<h3 id="35-whats-the-output">35. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">abc</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">abc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">queueMicrotask</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 6 - 8 - 3 - 0 - 4 - 2 - 1</li>
<li>B: 8 - 2 - 3 - 0 - 4 - 6 - 1</li>
<li>C: 6 - 8 - 2 - 0 - 4 - 3 - 1</li>
<li>D: 8 - 6 - 2 - 0 - 4 - 3 - 1</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-13">Answer: D</h4>
<p>D is correct anwser. The order of the asynchronous code&rsquo;s output depends on the MicroTask or MacroTask. MicroTask has a higher priority. Note that the synchronous code always be executed before asynchronous code. So in essense, we have the order as follows:</p>
<pre><code>  1) synchronous code
  2) microtask code (promise, queueMicrotask)
  3) macrotask code (setTimeout, setInterval)
</code></pre>
<p>Be awared that in Nodejs environment, we also have <code>process.nextTick(callback)</code> which has the highest priority but we dont have it in this code.</p>
<p>So, first callback in the <code>setTimeout()</code> will be executed last given that this is a MacroTask. That is why we got 1 last.</p>
<p>Second, the function <code>abc()</code> is called next. Then we have 8 printed out in the console first. As the next line of code inside that function is an asynchrnous code with the keyword &ldquo;await&rdquo;, we then <code>console.log(6)</code> as <code>Promise.resolve(4).then(console.log)</code> is an asynchrnous code. That is why we got 6.</p>
<p>Now is the time for <code>Promise.resolve(2)</code>, so we get 2. At this point, you might have some sort of confusion. What will happend if we do not pass the keyword &ldquo;await&rdquo; before <code>Promise.resolve(2)</code> ?</p>
<p>As we have <code>await</code>, the code will be blocked here. Then what? We get 0 and 4 not 3. <code>Promise</code> and <code>queueMicrotask</code> are both microtask and they are already to run before <code>console.log(3)</code>. The reason is that microtask queue need to be emptied before any other codes can be called in the callstack.</p>
<p>In the next step, we get 3 and the last one is 1.</p>
<p>What would happend if we do not have the <code>await</code> keyword? Then the order of the output will be 8 - 3 - 6 - 2 - 0 - 4 -1.</p>
</p>
</details>
<h3 id="36-whats-the-output">36. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">myAccount</span><span class="p">(</span><span class="nx">money</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">myMoney</span> <span class="o">=</span> <span class="nx">money</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">status</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="sb">`You have $ </span><span class="si">${</span><span class="nx">myMoney</span><span class="si">}</span><span class="sb"> in your account`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">dePoSit</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">myMoney</span> <span class="o">=</span> <span class="nx">myMoney</span> <span class="o">+</span> <span class="nx">amount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">withDraw</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">amount</span> <span class="o">&gt;</span> <span class="nx">myMoney</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sb">`You cannot withdraw money now`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">myMoney</span> <span class="o">=</span> <span class="nx">myMoney</span> <span class="o">-</span> <span class="nx">amount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">vuong</span> <span class="o">=</span> <span class="nx">myAccount</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">vuong</span><span class="p">.</span><span class="nx">withDraw</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">vuong</span><span class="p">.</span><span class="nx">withDraw</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">vuong</span><span class="p">.</span><span class="nx">dePoSit</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">vuong</span><span class="p">.</span><span class="nx">withDraw</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">vuong</span><span class="p">.</span><span class="nx">status</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;You have $ 950 in your account&rdquo;</li>
<li>B: &ldquo;You have $ 1000 in your account&rdquo;</li>
<li>C: &ldquo;You have $ 550 in your account&rdquo;</li>
<li>D: &ldquo;You have $ 350 in your account&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-14">Answer: D</h4>
<p>As the &ldquo;state&rdquo; of the data is preserved each time we call <code>dePoSit()</code> or <code>withDraw()</code>, hence we get $350 after all.</p>
<p>Noted that that is a kind of &ldquo;factory&rdquo; function with &ldquo;preload&rdquo; data. You might think about another object when pass to <code>myAccount(somedata);</code> some other data. That is a really helpful way to create multiple objects from a factory function.</p>
</p>
</details>
<h3 id="37-whats-the-output">37. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hoccoban</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">x</span><span class="o">:</span> <span class="s2">&#34;youtube.com/hoccoban&#34;</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getMe</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">inner</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">inner</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">hoccoban</span><span class="p">.</span><span class="nx">getMe</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: 20</li>
<li>B: 21</li>
<li>C: 22</li>
<li>D: 23</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-5">Answer: B</h4>
<p>We get 21. First &ldquo;youtube.com/hoccoban&rdquo; returns 20 as we are using the property length of the string. Then it is being added one more value in <code>++this.x</code>. The question here seems trivial but it is actually not. There is a crucial note we should keep in mind is that <code>console.log(++this.x)</code> will not work as <code>x</code> is undefined when it is called outside of the object.</p>
<p>We can solve the problem with <code>this</code> in this case by using arrow function in the inner so that is can become something like <code>const inner = () =&gt; {}</code> as the arrow function does not actually have <code>this</code>. It will automatically look around and call the available object when the function is executed.</p>
<p>The second solution is that we can somehow &ldquo;bypass&rdquo; the tricky <code>this</code> by using that/this solution. We just need to declare a new variable <code>const that = this</code> inside getMe() and before declaring inner function. That is a quite common practice.</p>
<p>The third solution is to take advantage of call(), bind() and apply() which are native methods of function (yes, function is also an object in JavaScript). In this case, we implement <code>bind(this)</code> to &ldquo;bind&rdquo; the function and the object so that <code>this</code> can actually point to the object when the function is executed. Note that bind() cannot be instantlly executed so that we need to add () after we bridge the function and the object. If we replace bind() with call(), then we do not need to pass () as in the above example. So <code>inner.bind(this)();</code> will become <code>inner.call(this);</code>. They are technically equal. In practice, we tend to create a new variable to get the result from the binding of the function and the object.</p>
</p>
</details>
<h3 id="38-whats-the-output">38. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span><span class="o">*</span> <span class="nx">hocCoBan</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">yield</span> <span class="s2">&#34;js.edu.vn&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">yield</span> <span class="s2">&#34;youtube.com/hoccoban&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">yield</span> <span class="s2">&#34;Vuong Nguyen&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">hocCoBan</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">((</span><span class="k">typeof</span> <span class="nx">data</span><span class="p">).</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: 10</li>
<li>C: Error</li>
<li>D: 15</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-15">Answer: D</h4>
<p>First, take a closer look at the function. It has a asterisk (*) next to the keyword &ldquo;function&rdquo;. We do not have <code>return</code> keyword inside the function itself. What is going on here?</p>
<p>It you have already known about generator, then this code snippet is not a big deal at all. We do not use generator very often, but this native JavaScript feature is the basis for async/await function, which is supported in ES7 that allows us to handle the flow of asynchronous code much easily.</p>
<p>The operator <code>typeof data</code> will return <code>object</code> rather than <code>function</code>, which is the same case with <code>typeof hocCoBan()</code>. Of course, <code>typeof hocCoBan</code> still returns <code>function</code>. But it is actually a normal function. Basically, we get 6 in the operator <code>(typeof data).length</code>.</p>
<p>Then <code>data.next()</code> calls the the built-in method <code>next()</code> which will output the value in the first <code>yield</code>, which is declared in the function. Then we get the length 9 with the string <code>js.edu.vn</code>.</p>
<p>After all, we get 15. Not that understanding generator is quite important if you really want to understand <code>async/await</code> function.</p>
</p>
</details>
<h3 id="39-whats-the-output">39. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;chó&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;chó&#34;</span><span class="p">,</span> <span class="s2">&#34;mèo&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">a</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">b</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="s2">&#34;chó&#34;</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 4</li>
<li>B: [1, 2, &ldquo;chó&rdquo;, 3, &ldquo;mèo&rdquo;]</li>
<li>C: [1, 2, &ldquo;chó&rdquo;, &ldquo;mèo&rdquo;]</li>
<li>D: [1, 2, &ldquo;chó&rdquo;]</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-16">Answer: D</h4>
<p>When using &hellip; in array, it is called spread operator in JavaScript which, technically, is similar to rest parameter (using in the context of function). It provides a more elegant way to concat (combine) or copy array. In the code above, b is a copy of a. However, as we pass a in to a <code>Set</code>, it will return the unique value only in a. It means, now we have `[1, 2, &ldquo;chó&rdquo;, 3, &ldquo;mèo&rdquo;] in b.</p>
<p>However, we then set the length for b as 3. Note that &ldquo;chó&rdquo;.length returns 3 but in PHP, strlen(&ldquo;chó&rdquo;) returns 4, just in case you are coming from PHP world.</p>
<p>As we set the length for the array b, we also cut down the array itselt. That is the reason why we get [1, 2, &ldquo;chó&rdquo;] printing out in the console.</p>
</p>
</details>
<h3 id="40-whats-the-output">40. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mot</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hai</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(...</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mot</span><span class="p">(</span><span class="mi">123</span><span class="p">),</span> <span class="nx">hai</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">!==</span> <span class="s2">&#34;object&#34;</span> <span class="o">?</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span></code></pre></div><ul>
<li>A: 1</li>
<li>B: 2</li>
<li>C: 3</li>
<li>D: 123</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-6">Answer: B</h4>
<p>First, it should be noted that <code>arguments</code> cannot be used in an arrow function, so in order to take advantage of this feature, we have to write the function in the casual form. <code>arguments</code> returns an array-like object that contains any parameter we pass into the function when executing it.</p>
<p><code>...</code> is a <code>rest operator</code>. We use this feature in function and array. Noted that in the context of array, it is called <code>spread operator</code> and it behaves differently. When declaring a function with &hellip;, we can pass as many parameters into the function itselt when executing it as we want.</p>
<p>Note that in the function <code>hai</code>, we return <code>arguments[arguments[0]]</code> which means <code>hai(1, 2, 3)</code> will return 2 rathern than 1 because <code>arguments[0]</code> return 1 and then <code>arguments[1]</code> returns 2.</p>
<p>The last thing we have to take note is that the typeof operator of an array will return <code>object</code>, here the trick seems more daunting. The final anwser is 2 as we got it in <code>a[1]</code>, or <code>hai(1, 2, 3)</code>.</p>
</p>
</details>
<h3 id="41-whats-the-output">41. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Component</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span> <span class="o">+</span> <span class="sb">`</span><span class="si">${</span><span class="k">typeof</span> <span class="nx">Coder</span><span class="si">}</span><span class="sb">`</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getAge</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Coder</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span> <span class="o">-</span> <span class="sb">`</span><span class="si">${</span><span class="k">typeof</span> <span class="nx">Coder</span><span class="si">}</span><span class="sb">`</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Coder</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getAge</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: 7</li>
<li>B: 8</li>
<li>C: 9</li>
<li>D: 10</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-10">Answer: C</h4>
<p>We have two simple classes in which Coder extends Component. Nothing fancy. As <code>typeof ClassName</code> returns <code>function</code> rather than <code>class</code>, we then get 8 in the operator <code>&quot;function&quot;.length</code>.</p>
<p>Though we implement <code>super(age)</code> in the Coder class, we actually overwrite the contructor of the parent class Component in the child class Coder. Therefore, when initiating the object <code>a</code>, the following code is automatically triggered <code>this.age = age -</code>${typeof Coder}<code>.length;</code>. The difference between the child and parent &rsquo;s constructor is minus (-) and plus (+) in the above code.</p>
<p>As such, we have 16 - 8 rather than 16 + 8, which returns 8. The function <code>getAge()</code> returns 9, so the corrent answer is C.</p>
<p>Bear in mind that JavaSCript is not a &ldquo;real&rdquo; OOP programming language even though we can now implement <code>class</code> and <code>object</code> as in other languages.</p>
</p>
</details>
<h3 id="42-whats-the-output">42. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">RemoveFalse</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">element</span> <span class="o">=</span> <span class="nx">element</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">removeFalse</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">removeFalse</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">theArray</span> <span class="o">=</span> <span class="p">[</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&#34;js.edu.vn&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RemoveFalse</span><span class="p">(</span><span class="nx">theArray</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: false</li>
<li>B: true</li>
<li>C: 2</li>
<li>D: 3</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-17">Answer: D</h4>
<p>The key message that can be taken away in the code snippet above is <code>filer(Boolean)</code> which can be taken into consideration in case you want to eliminate <code>falsy values</code> in an array. We can use <code>filter(callback)</code> or <code>filter(Boolean)</code> in particular in this case to do that. Note that we have to pass into the filter function a callback and in this case Boolean is actually a function. You can check <code>typeof Boolean</code> to see it.</p>
<p>Similar to <code>map</code> or <code>reduce</code> function, <code>filter</code> always returns a new array from the exisiting one. <code>[true, false, 1, 0, NaN, undefined, &quot;&quot;, null, &quot;js.edu.vn&quot;].filter(Boolean);</code> will return <code>[true, 1, &quot;js.edu.vn&quot;];</code>, hence calling the function <code>removeFalse()</code> gives us 3. So the correct answer is 3.</p>
</p>
</details>
<h3 id="43-whats-the-output">43. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">coderfarm</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[],</span> <span class="p">{},</span> <span class="p">[],</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">converted</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">coderfarm</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">coderfarm</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">converted</span> <span class="o">+</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: []</li>
<li>B: {}</li>
<li>C: 2</li>
<li>D: 4</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-18">Answer: D</h4>
<p>We have a simple array in the code snippet above that includes some digits, two other arrays and one object. Using the built-in function <code>Number</code>, we can convert any value passing to the function into <code>digit</code>. As <code>coderfarm instanceof Array</code> returns <code>true</code>, then <code>converted</code> get 1. Noted that you can use another way to check the type of an array is <code>Array.isArrray(arrayToBeChecked)</code> which return a <code>boolean</code> value. Suprisingly, the operator <code>typeof []</code> returns <code>object</code> rather than <code>array</code>.</p>
<p>The built-in function <code>indexOf</code> will return the index of the element that is being checked. So as <code>converted + true</code> return 2, we are going to check the index of the element with the value 2 in the array <code>coderfarm</code>.</p>
<p>We get 4 in the <code>console.log</code> and the correct answer is D.</p>
</p>
</details>
<h3 id="44-whats-the-output">44. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">converter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arrayInput</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">arrayInput</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;function&#34;</span><span class="p">,</span> <span class="s2">&#34;object&#34;</span><span class="p">,</span> <span class="s2">&#34;decorator&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">checking</span> <span class="o">=</span> <span class="nx">content</span><span class="p">[</span><span class="nb">Number</span><span class="p">(</span><span class="kc">false</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">converter</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span> <span class="o">===</span> <span class="nx">content</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">checking</span> <span class="o">?</span> <span class="p">(</span><span class="nx">result</span> <span class="o">?</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">converter</span><span class="p">).</span><span class="nx">length</span> <span class="o">:</span> <span class="kc">false</span><span class="p">)</span> <span class="o">:</span> <span class="kc">false</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 6</li>
<li>B: NaN</li>
<li>C: true</li>
<li>D: 8</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-19">Answer: D</h4>
<p>The operator <code>...</code> in JavaScript is very handy. The function <code>converter</code> is quite trivial, it takes advantege of <code>...</code> (rest operator || spread operator) to turn an array into an object.</p>
<p>First we have the constant <code>checking</code> with the value <code>function</code> given that <code>Number(false)</code> gives us 0 and that is the first index in the array <code>content</code>.</p>
<p>Second, the constant <code>result</code> gives us the value <code>true</code> as the <code>typeof converter(content)</code> is <code>function</code>, which is also the value of <code>content[1]</code>.</p>
<p>Then in the final code, we have <code>checking = true</code>, and then <code>result = true</code> as well, so the final result is <code>(typeof converter).length</code> which is equivalent to <code>&quot;function&quot;.length</code> because the <code>typeof of converter</code> is simply <code>function</code>. We get 8 after all and the correct answer is D.</p>
<p>So the key message here is that we can take advantate of the <code>spread operator</code> (or <code>...</code>) to turn an array to an object. For example: <code>const a = [&quot;hello&quot;, 2]</code>, then we can have a go with <code>const b = {...a}</code> and b is now an object with the following value: <code>{0: &quot;hello&quot;, 1: 2}</code>. The key of the object is actually the index of the original array.</p>
</p>
</details>
<h3 id="45-whats-the-output">45. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span><span class="o">*</span> <span class="nx">js</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">length</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">yield</span> <span class="nx">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">getJS</span> <span class="o">=</span> <span class="nx">js</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">js</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">getJS</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span> <span class="o">+</span> <span class="nx">getJS</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 10</li>
<li>B: 14</li>
<li>C: 15</li>
<li>D: 16</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-11">Answer: C</h4>
<p>We have a generator function in the code snippet above, which is defined with the *. Noted that we can &ldquo;store&rdquo; as many result as we want in a generator thanks to the keyword <code>yield</code>.</p>
<p>As the <code>typeof js</code> is <code>function</code>, so the length of the string <code>function</code> is 8. So when calling <code>getJS.next().value;</code>, we get 8. However, in the next calling, it returns 7, and in the following calling after that, we get 6. That is why generator can &ldquo;store&rdquo; and &ldquo;release&rdquo; (or return) as many value as we want.</p>
<p>So the answer is C, which is 8 (first execution of the generator) + 7 (second execution of the generator).</p>
</p>
</details>
<h3 id="46-whats-the-output">46. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">ages</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">currentValue</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">ages</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">currentValue</span> <span class="o">&gt;</span> <span class="nx">ages</span><span class="p">[</span><span class="nx">ages</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">index</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="nx">response</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">currentValue</span> <span class="o">+</span> <span class="nx">ages</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: [20]</li>
<li>B: [20, 25]</li>
<li>C: [25, 29]</li>
<li>D: [29]</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-20">Answer: D</h4>
<p><code>Array.prototype.some()</code> is a built-in function facilitating us to iterate the array using a callback. As in the code snippet above, there are three parameters in the callback, namely <code>currentValue</code> (the value of the current element that is being checked), <code>index</code> (the index of the element in the array that is being checked/evaluated) and <code>ages</code> (the array itself).</p>
<p>The function <code>some()</code> returns a <code>boolean</code> value. The code <code>currentValue &gt; ages[ages.length - index]</code> returns <code>true</code> only one time, which is the last element. Let &rsquo;s examine the code when it runs through each element:</p>
<ol>
<li>
<p>10 &gt; ages[4 - 0]. As ages[4] returns <code>undefined</code>, and <code>10 &gt; undefined</code> returns <code>false</code>, it stops.</p>
</li>
<li>
<p>15 &gt; ages[4 - 1]. As ages[3] returns 25, it breaks as the operator returns <code>false</code>.</p>
</li>
<li>
<p>20 &gt; ages[4 - 2]. As ages[2] returns 20, it breaks as the operator returns <code>false</code>.</p>
</li>
<li>
<p>25 &gt; ages[4 - 3]. As ages[1] returns 10, it returns <code>true</code>. Only this value is being pushed to the array <code>response</code>.</p>
</li>
</ol>
<p>So <code>response.push(currentValue + ages.length)</code> will add the value 25 + 4 to the array <code>response</code>, D is the correct answer.</p>
</p>
</details>
<h3 id="47-whats-the-output">47. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getSTring</span> <span class="o">=</span> <span class="p">(</span><span class="nx">string</span><span class="p">,</span> <span class="nx">method</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">method</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">string</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">string</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getSTring</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="o">+</span> <span class="nx">getSTring</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 6</li>
<li>B: 7</li>
<li>C: 8</li>
<li>D: 9</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-7">Answer: B</h4>
<p><code>getString()</code> is an arrow function with two parameters. As you can see that the parameter <code>method</code> has the default value <code>false</code>, then if you do not pass any value to it when executing the function, the default value will be used.</p>
<p>The key thing to take note from the code above is the difference betweet <code>slice(1, 4)</code> (which returns 3 characters) and <code>substr(1, 4)</code> (which returns 4 ones).</p>
<p>Finally <code>console.log(getSTring(&quot;hello&quot;, true) + getSTring(&quot;hello&quot;))</code> returns 7 because <code>slice</code> and <code>substr</code> are both used.</p>
</p>
</details>
<h3 id="48-whats-the-output">48. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">([...</span><span class="nx">arguments</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="s2">&#34;hello&#34;</span><span class="p">,</span> <span class="s2">&#34;world&#34;</span><span class="p">,</span> <span class="s2">&#34;new zealand&#34;</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;new&rdquo;</li>
<li>B: true</li>
<li>C: &ldquo;land&rdquo;</li>
<li>D: false</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-8">Answer: B</h4>
<p>The code above is a self-executing function. It runs when it is being declared. We have three parameters and three arguments passed are <code>&quot;hello&quot;, &quot;world&quot;</code> and <code>&quot;new zealand&quot;</code>.</p>
<p>First, <code>arguments</code> returns an object consisting of arguments passed to the function when executing it. However, using spread operator <code>...</code>, we then convert the object to an array. We can also do it by using <code>Array.from(object)</code>.</p>
<p>Second, <code>slice(2, 3)</code> extracts the element from the index 2 to the index 3, which returns <code>&quot;new zealand&quot;</code>. It is still an array. We then extract the element with the index <code>[0]</code> and we get the string <code>&quot;new zealand&quot;</code> rather than an array.</p>
<p>Third, <code>&quot;new zealand&quot;.slice(3, 4)</code> gives us an empty string (with a space between) <code>&quot; &quot;</code>. The <code>Boolean(&quot; &quot;)</code> gives us <code>true</code>. Noted that if there is no space in the empty string, we get <code>false</code> instead.</p>
<p>So the correct answer is B.</p>
</p>
</details>
<h3 id="49-whats-the-output">49. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">HocCoBan</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;hello world&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getSlice</span><span class="p">(</span><span class="nx">slice</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getName</span><span class="p">(</span><span class="nx">slice</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getName</span><span class="p">(</span><span class="nx">space</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">space</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">HocCoBan</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">split</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">argument</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSlice</span><span class="p">(</span><span class="nx">argument</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HocCoBan</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">).</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: true</li>
<li>C: 10</li>
<li>D: 11</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-12">Answer: C</h4>
<p>The code above is nothing much special. However it is written in a complicated way on purpose. First, we have a class named &ldquo;HocCoBan&rdquo; with two methods and one property. Then we add another method <code>split</code> using the tradional way (via <code>prototype</code>). Note that <code>class</code> in JavaScript is simply a syntactic sugar of <code>function</code> given that <code>typeof ClassName</code> return <code>function</code>.</p>
<p>When we call the method <code>split</code>, we pass the an empty string to it. This method then call other methods. The flow is as follows:</p>
<p><code>split(&quot;&quot;)</code> ==&gt; <code>this.getSlice(&quot;&quot;)</code> ==&gt; <code>this.getName(&quot;&quot;)</code> ==&gt; <code>this.name.split(&quot;&quot;)</code>. Here <code>split</code> is a built-in function that convert a string to an array.</p>
<p>Noted that in <code>getSlice()</code>, we also use <code>.slice(true, this.name.length)</code> to <code>slice</code> (cut) the array from the index 1 to 11. So the length is 10.</p>
<p>So the final answer is C.</p>
<p>This code might help us master the concept function <code>prototype</code> in JavaScript and the understand the difference between the built in function <code>String.prototype.split</code> and the function we declare by ourself <code>HocCoBan.prototype.split</code>.</p>
</p>
</details>
<h3 id="50-whats-the-output">50. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">javaScript</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">mot</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;I&#34;</span><span class="p">)</span> <span class="o">?</span> <span class="s2">&#34;love&#34;</span> <span class="o">:</span> <span class="s2">&#34;you&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">deno</span> <span class="o">=</span> <span class="nx">mot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">hai</span> <span class="o">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">deno</span><span class="p">,</span> <span class="s2">&#34;done&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">done</span> <span class="o">=</span> <span class="nx">hai</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">(</span><span class="nx">node</span> <span class="o">+</span> <span class="nx">deno</span> <span class="o">+</span> <span class="nx">done</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">javaScript</span><span class="p">(</span><span class="s2">&#34;I love you&#34;</span><span class="p">)()());</span>
</span></span></code></pre></div><ul>
<li>A: 18</li>
<li>B: 24</li>
<li>C: 20</li>
<li>D: 25</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-9">Answer: B</h4>
<p>Apart from learning some built-in functions to handle string such as <code>replace</code> and <code>inclues</code>, we are reviving the concept of <code>currying function</code> in JavaScript. Say you want to declare a function with three parameters, you may consider refactoring the code by declaring 3 nested functions, each with one parameter you wish to pass to. Basically, both of them work in the same way. However, noted that only the outerest (the main) function has the name as <code>javaScript</code> in the code above. Both nested (inner) functions are declared without the name. We also use three <code>return</code> keywords in the code.</p>
<p>When executing the function, you then have three <code>()</code> as in the <code>javaScript(&quot;I love you&quot;)()()</code>. We do not pass any argument into the second and third functions (both are inner/nested functions without the name) and these functions will take the default value we have alreaded declared when being executing.</p>
<p>All in all, we have the final operator <code>return (node + deno + done).length;</code> in which <code>node</code> is &ldquo;I love you&rdquo;, <code>deno</code> is &ldquo;love&rdquo; and <code>done</code> is &ldquo;I done you&rdquo;. The length of these strings is 24, which you can calculate by yourself the concatenated string <code>I love youyou I done you</code>. Be aware of the <code>empty space</code>, which is also taken into account.</p>
</p>
</details>
<h3 id="51-whats-the-output">51. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">www</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;hello&#34;</span><span class="p">,</span> <span class="s2">&#34;coranovirus&#34;</span><span class="p">,</span> <span class="s2">&#34;kiora&#34;</span><span class="p">,</span> <span class="s2">&#34;world&#34;</span><span class="p">,</span> <span class="s2">&#34;new zealand&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">found</span> <span class="o">=</span> <span class="nx">www</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">world</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">world</span> <span class="o">&gt;</span> <span class="s2">&#34;victory&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">found</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">www</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="nx">www</span><span class="p">[</span><span class="kc">false</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">www</span><span class="p">[</span><span class="kc">true</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;hello&rdquo;</li>
<li>B: &ldquo;world&rdquo;</li>
<li>C: &ldquo;victory&rdquo;</li>
<li>D: &ldquo;w&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-5">Answer: A</h4>
<p>The key information in the question above is about the method <code>Array.prototype.find()</code>. It returns the first element in the array that meets the condition declared in the callback function, which is passed to the function. The array is being iterated to check every single element. In the code above, we might easily see that the element <code>world</code> is the first element in the array that has a larger value than <code>victory</code>. Remember that &ldquo;w&rdquo; &gt; &ldquo;v&rdquo; return trues if the two letters are compared. When two words are being compared, only the first letter in each word is being utilised to compare.</p>
<p>As the result, <code>found</code> is now <code>world</code> and thus <code>found[1]</code> returns the letter <code>w</code> whereas <code>www[0][0]</code> gives us the letter <code>h</code> in the element <code>hello</code>. It means <code>found[1] &lt; www[0][0]</code> returns <code>false</code>.</p>
<p>So the final result is <code>www[true ? 0: 1]</code> or <code>www[0]</code>, which is <code>hello</code>. And the correct answer is A.</p>
</p>
</details>
<h3 id="52-whats-the-output">52. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">NaN</span> <span class="o">===</span> <span class="kc">NaN</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="nx">flag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">.</span><span class="nx">toString</span><span class="p">()[</span><span class="nb">Number</span><span class="p">(</span><span class="nx">flag</span><span class="p">)]);</span>
</span></span><span class="line"><span class="cl"><span class="p">})([]);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;f&rdquo;</li>
<li>B: &ldquo;t&rdquo;</li>
<li>C: true</li>
<li>D: false</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-10">Answer: B</h4>
<p>We have a self-executing function with the parameter/argument is an empty array. Noted that <code>NaN === NaN</code> returns <code>false</code>, then <code>age</code> gets the value <code>flag</code>, which is an empty array. However, the boolean value is <code>true</code> when we call <code>Boolean([])</code>.</p>
<p>The function <code>toString()</code> returns the string <code>true</code> and the <code>Number([])</code> returns <code>0</code>. Then we get &ldquo;t&rdquo; in the console.log. The correct answer is B.</p>
<p>Keep in mind that <code>Boolean([])</code> ==&gt; <code>true</code> but <code>Number([])</code> ==&gt; <code>0</code>. And sadly <code>NaN === NaN</code> returns <code>false</code>.</p>
</p>
</details>
<h3 id="53-whats-the-output">53. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">1</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">([]));</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">([]));</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">([])));</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">(</span><span class="nb">Number</span><span class="p">([])));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">5</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">({}));</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">({}));</span>
</span></span><span class="line"><span class="cl"><span class="mi">7</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">({})));</span>
</span></span><span class="line"><span class="cl"><span class="mi">8</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">(</span><span class="nb">Number</span><span class="p">({})));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">9</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">(</span><span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">false</span><span class="p">)));</span>
</span></span></code></pre></div><ul>
<li>A: true - 0 - 1 - false - true - 1 - 1 - false - false</li>
<li>B: true - 0 - 1 - false - false - NaN - 1 - false - true</li>
<li>C: true - 0 - 1 - false - false - false - 1 - false - false</li>
<li>D: true - 0 - 1 - false - true - NaN - 1 - false - true</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-21">Answer: D</h4>
<p>JavaScript is sometimes tedious to deal with given that it is a loosely type language. The data type of a variable can be changed depending on the value. An unexpected behaviour might unfortunately occur when you change/convert the original value to another one.</p>
<p>For example, the code 2 <code>Number([])</code> returns <code>0</code> and 6 <code>(Number({}))</code> returns <code>NaN</code>, although both <code>(Boolean([]))</code> and <code>(Boolean({}))</code> return <code>true</code>.</p>
<p>In the code 9 <code>Boolean(new Boolean(false))</code>, we get <code>true</code> even though we pass into the function constructor <code>Boolean()</code> a <code>false</code> (as the) parameter. However, if we do not use the keyword <code>new</code>, then <code>false</code> will return. It seems that in <code>Boolean(new Boolean(false))</code>, we have a valid opreration, so it is <code>true</code>. However, in the <code>Boolean(Boolean(false)))</code> where we do not use the keyword <code>new</code>, we then get <code>false</code> because now a <code>false</code> value is being evaluated rather than an operation.</p>
<p>So, the correct answer is D.</p>
<p>Credit: @tiepphan, Vietnamese Angular Facebook group.</p>
</p>
</details>
<h3 id="54-whats-the-output">54. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myYoutube</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;hoccoban&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">address</span><span class="o">:</span> <span class="s2">&#34;youtube.com/hoccoban&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getInfo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">content</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span> <span class="o">?</span> <span class="nx">myYoutube</span><span class="p">.</span><span class="nx">getInfo</span><span class="p">()</span> <span class="o">:</span> <span class="k">this</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myYoutube</span><span class="p">.</span><span class="nx">content</span><span class="p">().</span><span class="nx">name</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;hoccoban&rdquo;</li>
<li>B: window (object)</li>
<li>C: NaN</li>
<li>D: undefined</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-6">Answer: A</h4>
<p>To answer the tricky question above, you might want to have a look at the concept of <code>this</code> in JavaScript (on browser environment). By default, <code>this</code> refers to <code>window</code> object. Note that <code>Window</code> (written in capital) is the Function constructor of the <code>window</code> object. In this regard, <code>console.log(this === window)</code> return true but <code>console.log(this === Window)</code> returns false.</p>
<p>As <code>content()</code> is an arrow function, <code>this</code> declared inside this function points to <code>window</code>, so <code>myYoutube.content()</code> returns <code>myYoutube.getInfo()</code>. Noted that we have to explicitly write <code>myYoutube.getInfo()</code> to make sure the code will run correctly as <code>this</code> in this case does not work as it does not refer to the currect object. In the function <code>getInfo()</code>, however, <code>this</code> actually refers to the currect object instead of <code>window</code> object because we use a normal function here.</p>
<p>Then we have the property <code>name</code> with the value &ldquo;hoccoban&rdquo;. So the correct answer is A.</p>
<p>Credit: Thanks <a href="https://github.com/phanvigiaii">https://github.com/phanvigiaii</a> for fixing the typo. Please make a pull request when you have time bro. Cheer.</p>
</p>
</details>
<h3 id="55-whats-the-output">55. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">myArray</span><span class="p">.</span><span class="nx">someProperty</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">someOtherProperty</span> <span class="o">=</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">myArray</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">myArray</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">myArray</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 10</li>
<li>B: NaN</li>
<li>C: 9</li>
<li>D: 7</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-13">Answer: C</h4>
<p>We have a simple array that consists of 3 elements. If checking the type of the array with the operator <code>typeof</code>, we will have <code>object</code>. (Hint, you can make use of <code>Array.isArray(array))</code> or <code>array instanceof Array</code> to check its type).</p>
<p>When declaring <code>myArray.someProperty</code>, we now add a new property to that array and when declaring <code>Array.prototype.someOtherProperty = &quot;hello&quot;</code>, we add a new property to every single array.</p>
<p>As a result, the <code>for... in</code> loop will iterate through the array in question and return its key/property and the inherited property as well. However, in the second iteration, we take advantage of the method <code>hasOwnProperty(key)</code> to check whether a particular key/property actually belongs to the array in question rather than the inherited one.</p>
<p>In short, in the first iteration, we get 5 (3 original ones, 1 property that is directly added to the array, 1 inherited from the Array.prototype. In the second one, we only get 4 as the inherited property is not taken into consideration.</p>
<p>Keep in mind that, we use <code>for... of</code> to loop through an array or the traditional <code>for</code> loop. It is not a good practice to use <code>for ... in</code> to loop through an array. It is often used to loop through an object.</p>
</p>
</details>
<h3 id="56-whats-the-output">56. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">coderfarm</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">[</span><span class="nx">top</span><span class="p">,</span> <span class="p">...</span><span class="nx">bottom</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">a</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="nx">coderfarm</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">top</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">bottom</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 8</li>
<li>B: 9</li>
<li>C: 10</li>
<li>D: 11</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-7">Answer: A</h4>
<p>We are using destructure array (or object) technique to extract element of an array (or object). We also take advantage of <code>...</code> (spread parameter) here.</p>
<p>The array we are destructuring is returned from a self-executing function. First we pass the parameter <code>coderfarm</code>, which is the parameter <code>a</code> when declaring the function. Then we update this array with some additional value (an array with three <code>undefined</code> elements using <code>new Array(3)</code>) on the top of the array (using <code>unshift</code>). The array is updated now as <code>[[undefined, undefined, undefined], 1, 2, 3, 4, 5]</code>.</p>
<p>So <code>top</code> is the first element of the array or <code>[undefined, undefined, undefined]</code>, which returns 3 when we check the length.</p>
<p>The <code>bottom</code> returns the rest of the array in question, which is 5 when using <code>length</code> property.</p>
<p>The final number is 8 and thus the correct answer is A.</p>
</p>
</details>
<h3 id="57-whats-the-output">57. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">number</span><span class="o">:</span> <span class="mi">10</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getAge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">flag</span> <span class="o">?</span> <span class="k">delete</span> <span class="nx">age</span><span class="p">.</span><span class="nx">number</span> <span class="o">:</span> <span class="k">delete</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">age</span><span class="p">.</span><span class="nx">number</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getAge</span><span class="p">(</span><span class="kc">false</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">.</span><span class="nx">number</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getAge</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">.</span><span class="nx">number</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 10 - 10 - NaN - NaN</li>
<li>B: 10 - 10 - undefined - undefined</li>
<li>C: 10 - 11 - undefined - undefined</li>
<li>D: 10 - 11 - NaN - NaN</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-22">Answer: D</h4>
<p>The operator <code>delete</code> only works on the property of an object, not the object itself. In the code snippet above, we have a simple function <code>getAge</code> with the parameter <code>flag</code>. When the <code>flag</code> is <code>true</code>, we trigger <code>delete age.number</code> and if it is <code>false</code>, we will use the operator <code>delete</code> upon the whole object.</p>
<p>As this operator does not work on an object, if we can say that, it turns out that <code>delete age</code> actually does nothing. As such, <code>console.log(getAge(false))</code> returns 10 and simultanously increases the value of <code>age.number</code> to 11. The value is now being kept in the memory. As such, <code>console.log(age.number)</code> will return 11.</p>
<p>When we pass the argument <code>flag</code> as <code>true</code> in the <code>console.log(getAge(true))</code>, we will trigger <code>delete age.number</code> which removes the value and the property <code>age.number</code> itself. It means <code>age.number</code> is now <code>undefined</code>. However, because we also attempt to increase the value of this <code>undefined</code> property using <code>++</code> operator, it returns <code>NaN</code>.</p>
<p><code>console.log(age.number)</code> also returns <code>NaN</code> as well. So the correct answer is D.</p>
</p>
</details>
<h3 id="58-whats-the-output">58. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">youtube</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;hoccoban&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">copy</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">youtube</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cloneA</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">copy</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cloneB</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">youtube</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cloneA</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cloneB</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copy</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: undefined - &ldquo;hoccoban&rdquo; - &ldquo;hoccoban&rdquo;</li>
<li>B: &ldquo;hoccoban&rdquo; - &ldquo;hoccoban&rdquo; - &ldquo;hoccoban&rdquo;</li>
<li>C: &ldquo;hoccoban&rdquo; - &ldquo;hoccoban&rdquo; - &ldquo;undefined&rdquo;</li>
<li>D: undefined - &ldquo;undefined&rdquo; - &ldquo;hoccoban&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-8">Answer: A</h4>
<p>We have three outputs in the code snippet above.</p>
<p>First <code>console.log(cloneA.name);</code> will return <code>undefined</code> but why? We use <code>Object.assign</code> to clone a new object from an empty and from the object <code>copy</code>. The object <code>copy</code> itself is actually created from the original object <code>youtube</code> using <code>Object.create</code>. Noted that because we use <code>Object.create</code>, <code>copy</code> will inherit the data from the original one but it is still an empty object itself.</p>
<p>Second, both <code>console.log(cloneB.name)</code> and <code>console.log(copy.name)</code> return &ldquo;hoccoban&rdquo; because <code>cloneB.name</code> will have the actual property <code>name</code>. On the contrary, <code>copy.name</code> outputs the property <code>name</code> inherited from the <code>youtube</code>.</p>
<p>So the correct answer is A.</p>
</p>
</details>
<h3 id="59-whats-the-output">59. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">?</span> <span class="nx">x</span> <span class="o">:</span> <span class="nx">x</span><span class="p">.</span><span class="nx">entries</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">})([</span><span class="s2">&#34;hello&#34;</span><span class="p">,</span> <span class="s2">&#34;world&#34;</span><span class="p">,</span> <span class="s2">&#34;vuong&#34;</span><span class="p">]);</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: &ldquo;hello&rdquo;</li>
<li>C: &ldquo;world&rdquo;</li>
<li>D: &ldquo;vuong&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-11">Answer: B</h4>
<p>We have a self-invoking function here and we pass an array to it when the function is executed. Note that <code>Array.isArray(x)</code> return <code>true</code> but actually we use <code>!</code> before <code>Array.isArray(x)</code>. It means <code>data</code> will return <code>x.entries()</code>.</p>
<p>The method <code>array.entries()</code>, as you might have already known, returns a <code>gererator</code>. Here we will call <code>next()</code> to iterate through each element. Note that if you only call <code>next()</code> once, it will only return the first element instead of the whole iterator.</p>
<p>Then when we call <code>value</code>, it returns an array with the index and the value of the iterator. So what will we get if we call <code> console.log(data.next().value[0])</code>. Sure, it returns <code>0</code> as <code>0</code> is the index.</p>
<p>So the correct answer is B.</p>
</p>
</details>
<h3 id="60-whats-the-output">60. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span> <span class="o">===</span> <span class="nx">y</span> <span class="o">?</span> <span class="sb">`</span><span class="si">${</span><span class="k">typeof</span> <span class="nx">x</span><span class="si">}</span><span class="sb">`</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="sb">`</span><span class="si">${</span><span class="k">typeof</span> <span class="nx">x</span><span class="si">}</span><span class="sb">`</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: &ldquo;object&rdquo;</li>
<li>C: &ldquo;y&rdquo;</li>
<li>D: &ldquo;m&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-23">Answer: D</h4>
<p>As <code>x</code> and <code>y</code> are both instances of <code>symbol</code>, they are unique in our codebase; therefore, the <code>===</code> comparison will return <code>false</code> as expected. In the simple code snippet above, we get the <code>else</code> operation.</p>
<p>It should be noted that the <code>typeof x</code> operation gives us <code>symbol</code>, and since a string in JavaScript is iterable, we get <code>m</code> as we pass in the index 2.</p>
<p>So the correct answer is D.</p>
</p>
</details>
<h3 id="61-whats-the-output">61. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">frameworks</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;react&#34;</span><span class="p">,</span> <span class="s2">&#34;angular&#34;</span><span class="p">,</span> <span class="s2">&#34;vue&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">iterator</span> <span class="o">=</span> <span class="nx">frameworks</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">frameworks</span><span class="p">.</span><span class="nx">entries</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">i</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;react&rdquo; - &ldquo;angular&rdquo;</li>
<li>B: &ldquo;react&rdquo; - &ldquo;react&rdquo;</li>
<li>C: &ldquo;angular&rdquo; - &ldquo;angular&rdquo;</li>
<li>D: &ldquo;n&rdquo; - &ldquo;angular&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-24">Answer: D</h4>
<p>As <code>frameworks</code> is an array, it has a built-in method named <code>Symbol.iterator</code>. You can hence iterate through the whole array using commonly used methods such as <code>for... of</code>, normal <code>for loop</code>, <code>forEach</code> or <code>map</code>, among others. That is relatively trivial, I suppose.</p>
<p>This code challenge above is written to help us understand the concept of iteration better. First, we use the built-in method called <code>entries()</code> to create a new iteration. So does <a href="">Symbol.iterator</a>. Both seem to do the same thing.</p>
<p>Each time we call <code>next()</code> method, the iteration will output one element. We then can call <code>value()</code> to get the value. The difference between <code>iterator</code> and <code>i</code> is that the former shows the value itself while the latter outputs an array consisting of the index and the value. It means that in the code above, <code>iterator.next().value</code> returns <code>angular</code> and <code>i.next().value</code> gives us <code>[1, angular]</code>.</p>
<p>So the correct answer is D.</p>
</p>
</details>
<h3 id="62-whats-the-output">62. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">React</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">theName</span> <span class="o">=</span> <span class="s2">&#34;Not React&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Author</span> <span class="kr">extends</span> <span class="nx">React</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">theName</span> <span class="o">=</span> <span class="s2">&#34;Real React&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">theName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">theName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Author</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">render</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Author</span><span class="p">.</span><span class="nx">render</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;Not React&rdquo; - &ldquo;Real React&rdquo;</li>
<li>B: &ldquo;Not React&rdquo; - Error</li>
<li>C: Error - Error</li>
<li>D: Error - &ldquo;Real React&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-9">Answer: A</h4>
<p>We have two classes in the code snippet above. It sounds we are imitating React. The <code>React</code> class has only one property named <code>theName,</code> and no method is declared here. Providing that <code>Author</code> extends the <code>React</code> class, it inherits that property, surely. However, we have also declared another property with the same name in the <code>Author</code> classs. The difference is that the property declared in the child class is given the keyword <code>static.</code></p>
<p>The <code>Author</code> class also has two methods with the same name <code>render()</code>, one as regular methods and another with <code>static</code> keyword. Will that work in JavaScript?</p>
<p>It turns out that JavaScript is quite flexible. It supports both property and method if they are declared with the same name as long as they are either regular property (or method) or static property (or method).</p>
<p>The last thing you should be aware of is that the method <code>static render()</code> only calls the static property, here is <code>static theName = &quot;Real React&quot;;</code> So does the regular method <code>render().</code> As such, the code does not run into any issues.</p>
<p>So the correct answer is A.</p>
</p>
</details>
<h3 id="63-whats-the-output">63. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">js</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">say</span> <span class="o">=</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">js</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="s2">&#34;goodbye&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">js</span><span class="p">().</span><span class="nx">say</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">js</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">thename</span> <span class="o">=</span> <span class="s2">&#34;google&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">js</span><span class="p">().</span><span class="nx">thename</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: Error - Error</li>
<li>B: &ldquo;hello&rdquo; - &ldquo;google&rdquo;</li>
<li>C: &ldquo;goodbye&rdquo; - &ldquo;google&rdquo;</li>
<li>D: Error - &ldquo;google&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-12">Answer: B</h4>
<p><code>js</code> is a standard class declared in the code snippet above that has only one property with the name <code>say.</code> Then we again declare another property with the same name <code>say</code> for it. You might think that the property <code>say</code> has been overwritten with a new value <code>goodbye.</code></p>
<p>That is not the case as we will get <code>hello</code> when we run <code>console.log(new js().say);</code>. It is clear that the JavaScript engine prioritizes the property declared inside the class more than the property declared later using the prototype mechanism.</p>
<p>If the property has not been declared inside the class itself, we can then add a new one with the help of <code>prototype</code> as in <code>thename</code>. Without the doubt, the code <code>console.log(new js().thename);</code> gives us <code>google</code> as expected.</p>
<p>So the correct answer is B.</p>
</p>
</details>
<h3 id="64-whats-the-output">64. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">([</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">z</span><span class="p">])</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">++</span><span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">x</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">App</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">])()());</span>
</span></span></code></pre></div><ul>
<li>A: 10</li>
<li>B: 32</li>
<li>C: 21</li>
<li>D: 22</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-14">Answer: C</h4>
<p>To answer the question raised on the above code snippet, you might want to revisit two concepts, <code>currying function</code> and <code>destructing array or object.</code></p>
<p>First, <code>currying function</code> means we convert a function with multiple parameters into multiple functions with a SINGLE parameter. Then you can easily manipulate the flow of the data. Noted that <code>currying function</code> is relevant to <code>higher-order function</code>, you might want to have a look.</p>
<p><code>destructing array or object</code> means we attempt to extract a complex array or object more conveniently. For example, <code>[y, x, z] = [10, 20, 30, 40]</code> will extract y, x and z with the value 10, 20 and 30 respectively.</p>
<p>The last thing is incremental operator here <code>++x</code> returns 21 but <code>x++</code> does not as it still returns 21.</p>
<p>So the correct answer is C.</p>
</p>
</details>
<h3 id="65-whats-the-output">65. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">accumulator</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">accumulator</span> <span class="o">+</span> <span class="nx">currentValue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">theCallBack</span> <span class="o">=</span> <span class="p">(</span><span class="nx">accumulator</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">accumulator</span> <span class="o">+</span> <span class="nx">currentValue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">callback</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">theCallBack</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">theCallBack</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 54</li>
<li>B: 55</li>
<li>C: 60</li>
<li>D: 61</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-25">Answer: D</h4>
<p><code>Array.prototype.reduce()</code> is a bit perplexed built-in method that allows you to manipulate data in an array. It returns a single value from the array predefined as in the case with <code>map</code> or <code>filter</code>. The syntaxt of the function is <code>arr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue])</code>, so it accepts a callback function with four arguments including <code>accumulator</code>, <code>currentValue</code>, <code>currentIndex</code> (optional) and <code>array</code> (optional).</p>
<p>The second argument of the <code>reduce</code> method, which is optional, is called <code>initialValue</code> that will be counted as the first element with the index 0 when <code>reduce</code> is executing. If <code>initialValue</code> is not provided, then <code>reduce</code> will run with the index 1 instead. <code>reduce()</code> sounds complicated, but truly it is not. In case you want to revise the function, kindly take a look at MDN here: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></p>
<p>The above code has two callback functions named <code>callback</code> and <code>thecallback</code>, which do the same thing. The seemingly creepy code is the variable <code>sum</code>, which is returned by a couple of nested <code>reduce</code> functions. It turns out that there is only one &ldquo;real&rdquo; <code>reduce</code> function and the other ones give us <code>initialValue</code> only.</p>
<ul>
<li>The first <code>initialValue</code> is 7;</li>
<li>The first nested <code>reduce</code> function gives us 7 (initialValue) + 5 + 6 + 7 = 25.</li>
<li>The second nested <code>reduce</code> has 25 as the initialValue, which we get from the above. Then it returns 25 + 5 + 6 + 7 = 43;</li>
<li>The &ldquo;real&rdquo; <code>reduce</code> function now has 43 as the initialValue, the we get the final result: 43 + 5+ 6 + 7 = 61.</li>
</ul>
<p>So the correct answer is D.</p>
</p>
</details>
<h3 id="66-whats-the-output">66. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;hoccoban.com&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;youtube.com/hoccoban&#34;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">first</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">a</span> <span class="p">}.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">second</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">b</span> <span class="p">}.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">third</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">b</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;hello&#34;</span> <span class="p">}.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">first</span> <span class="o">+</span> <span class="nx">second</span> <span class="o">+</span> <span class="nx">third</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 12</li>
<li>B: 37</li>
<li>C: 5</li>
<li>D: 20</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-13">Answer: B</h4>
<p>The code snippet above is relatively trivial. What we can learn from it is all about the <code>spread operator</code> (three-dot &hellip;). Sometimes it is also used as a <code>rest operator</code> to extract data from an object or array.</p>
<p>We have two simple objects which both have the same key <code>name</code> but different values. The constant <code>first</code> gives us the length of the string value of the keyword <code>name</code> that is copied from <code>a</code>. So, <code>first</code> is now 12.</p>
<p>The constant <code>second</code> merges <code>a</code> and <code>b</code> into one object. However, as <code>b</code> has the same key <code>name</code> with <code>a</code>, the object created by merging two objects will have the value of <code>b</code>. It means the constant <code>second</code> gives us the length of <code>youtube.com/hoccoban</code>, which is 20.</p>
<p><code>third</code> does the same thing with <code>first</code> and <code>second</code> as it merges two objects into one. However, it also adds another key-value to the object. Coincidently, the key now is <code>name</code>, which is the same with the key attained from <code>a</code> and <code>b</code>. Hence, this key and value will take over the merged object. That means <code>third</code> is the length of the string <code>hello</code>, which is 5.</p>
<p>In total, we have 12 + 20 + 5, and the final result is 37.</p>
<p>So the correct answer is B.</p>
</p>
</details>
<h3 id="67-whats-the-output">67. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hocCoBan</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">hocCoBan</span><span class="p">,</span> <span class="s2">&#34;domain&#34;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;hoccoban.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">App</span><span class="p">({</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">age</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">year</span> <span class="o">-</span> <span class="nx">age</span> <span class="o">+</span> <span class="nx">hocCoBan</span><span class="p">.</span><span class="nx">domain</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">App</span><span class="p">({</span> <span class="nx">year</span><span class="o">:</span> <span class="mi">2021</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span> <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">r</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 2051</li>
<li>B: 2001</li>
<li>C: 30</li>
<li>D: 2003</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-26">Answer: D</h4>
<p>The code snippet above seems complicated regarding how we take advantage of <code>Object.defineProperty</code> to add key and value to the object <code>hocCoBan</code>. In fact, <code>Object.defineProperty</code> has a couple of handy features that allow us to control the behavior of the object in some situations where we want to make sure that the object created is mutable or not, whether it is iterable (using <code>for..in</code>) and so for. For example, if we set <code>configurable: false</code> when we declare an object with <code>Object.defineProperty</code>, we cannot use <code>delete</code> operator to delete the object&rsquo;s property. We cannot change the value of that property as well.</p>
<p>The second &ldquo;take away&rdquo; message when reading the code above is the unpacking object technique, or a more frequent term is the destructing object. Say you have an object with two keys called <code>year</code> and <code>age</code>, then you can get them by using the destructing object technique as follows: <code>{year, age} = theOBject;</code>. In the code above, when declaring the function <code>App</code>, we also use destructing object technique to get the key from the object and use them as the parameters.</p>
<p>If you are familiar with asynchronous code in JavaScript when using the keyword <code>async,</code> it is not a big deal to understand why we need to use <code>then</code> to get the function <code>App</code> being called. It fact, <code>async</code> always returns a promise, so we need to use <code>then</code> method to get the data we want.</p>
<p>The flow of the code is: 2021 - 30 + <code>&quot;hoccoban.com&quot;.length</code> (which is 12).</p>
<p>The final result is 2003. So the correct answer is D.</p>
</p>
</details>
<h3 id="68-whats-the-output">68. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">hoccoban</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="err">#</span><span class="nx">thisyear</span> <span class="o">=</span> <span class="mi">2021</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">covidTheFirstYear</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">covidTheFirstYear</span> <span class="o">=</span> <span class="nx">covidTheFirstYear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getThisYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="err">#</span><span class="nx">thisyear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getCovidFirstYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">covidTheFirstYear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">hoccoban</span><span class="p">(</span><span class="mi">2019</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hoccoban</span><span class="p">.</span><span class="nx">hello</span> <span class="o">??</span> <span class="nx">message</span><span class="p">.</span><span class="nx">getThisYear</span><span class="p">()</span> <span class="o">-</span> <span class="nx">message</span><span class="p">.</span><span class="nx">getCovidFirstYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: NaN</li>
<li>B: 2019</li>
<li>C: undefined</li>
<li>D: 2</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-27">Answer: D</h4>
<p>This challenge partly illustrates the newest features of JavaScript detailed in ECMAScript 2020 or ES11.</p>
<p>Now you can declare a private property in a class thanks to the symbol <code>#</code>. Like other languages, a private property in JavaScript can only be accessed from inside the class. It will trigger an error when you attempt to call it outside the class, surely.</p>
<p>The second feature you might see on the code snippet above is the <code>nullish coalescing operator</code> or <code>??</code>. When declaring some variable such as <code>let myVariable = number ?? 7</code>, if the variable <code>number</code> is either <code>undefined</code> or <code>null</code>, the variable <code>myVariable</code> will be assigned the value <code>7</code>.</p>
<p>So <code>hoccoban.hello</code> means <code>undefined</code> because we have not added any value yet. Then by using <code>nullish coalescing operator</code> with <code>??</code> the variable <code>result</code> simply returns 2 as <code>message.getThisYear()</code> gives us 2020 and <code>message.getCovidFirstYear()</code> gives us 2019. Note that we can access the private property outside of the class via a method, as in the method <code>getThisYear()</code>.</p>
<p>So the correct answer is D.</p>
</p>
</details>
<h3 id="69-whats-the-output">69. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">keyWords</span> <span class="o">=</span> <span class="s2">&#34;hello world&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">entries</span> <span class="o">=</span> <span class="nx">keyWords</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">collections</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">collections</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">entry</span><span class="p">,</span> <span class="nx">index</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">objectResult</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">fromEntries</span><span class="p">(</span><span class="nx">collections</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">world</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">objectResult</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">world</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 0</li>
<li>B: true</li>
<li>C: 1</li>
<li>D: &ldquo;hello&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-c-15">Answer: C</h4>
<p>The code snippet above is not challenging for those who have had decent experience working with ES6 I suppose. First we turn <code>keywords</code> into an array using <code>split()</code> function. Then we create a variable named <code>collection</code>, which initially is an empty array.</p>
<p>Take a closer look at the <code>forEach</code> function, which allows us to run a for loop through the whole array <code>entries</code>, you might realize that <code>push([entry, index]);</code> add an array to <code>collections</code> rather than an element.</p>
<p>The next step is by taking advantage of <code>Object.fromEntries()</code> that converts an array with at least two elements (the form of key-value) to an object. This built-in method is the reversing version of <code>Object.entries()</code>, which extracts key and value from an object to an array.</p>
<p><code>const { world } = objectResult;</code> is nothing special as we unpack the object using destructing object technique supported since ES6. As the object <code>objectResult</code> has <code>hello</code> and <code>world</code> with two respective values 0 and 1, we get 1 when printing out <code>world</code>, so the correct answer is C.</p>
</p>
</details>
<h3 id="70-whats-the-output">70. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">domainname</span><span class="o">:</span> <span class="s2">&#34;hoccoban.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">author</span><span class="o">:</span> <span class="s2">&#34;vuong&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">thetarget</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nx">receiver</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">prop</span> <span class="o">===</span> <span class="s2">&#34;domainname&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">thetarget</span><span class="p">.</span><span class="nx">author</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">thetarget</span><span class="p">.</span><span class="nx">domainname</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">proxyObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">proxyObject</span><span class="p">.</span><span class="nx">domainname</span> <span class="o">&gt;</span> <span class="nx">proxyObject</span><span class="p">.</span><span class="nx">author</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: true</li>
<li>B: false</li>
<li>C: 12</li>
<li>D: 5</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-14">Answer: B</h4>
<p>We have implemented a basic use case of <code>Proxy</code> in the code snippet above. Each <code>proxyObject</code> object has two parameters (<code>target</code> and <code>handler</code>). <code>handler</code> is also an object.</p>
<p>Apart from <code>get()</code> as you might see, <code>handler</code> also has a handful of other methods such as <code>set</code>, <code>defineProperty()</code>, <code>has()</code> and so forth. Sometimes, people may say a <code>method is a trap</code> of a proxy object.</p>
<p>Back to the code above, the <code>get</code> method allows us to modify how the proxy object will display the value of the original object. <code>thetarget</code> is the original object, and <code>prop</code> is the property of that object as you might guess. You might choose another name in the <code>get</code> function if you want when creating your handler.</p>
<p>The <code>handler</code> above calculates the length of the string value of the two properties. Based on the flow of <code>if - else</code> code, it swaps the returned value.</p>
<p>So <code>proxyObject.domainname</code> now should be understood as <code>target.author.length</code> which means 5 and <code>proxyObject.author</code> means <code>target.domainname.length</code> which gives us 12. So the output is <code>false</code>. The correct answer is B.</p>
<p>If you do the same thing with the original, it should be something like <code>console.log(target.domainname.length &gt; target.author.length)</code> which returns <code>true</code>.</p>
<p>I believe that <code>Proxy</code> is worth to have a closer look. If that is the case, no place is better than MDN. So have a go at: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
</p>
</details>
<h3 id="71-whats-the-output">71. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">),</span> <span class="mi">5000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">promise2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;world&#34;</span><span class="p">),</span> <span class="mi">4000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s2">&#34;timeleap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">p1</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">promise1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">p2</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">promise2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">p1</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">p2</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&#34;timeleap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><ul>
<li>A: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 5000 ms</li>
<li>B: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 9000 ms</li>
<li>C: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 4000 ms</li>
<li>D: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 1000 ms</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-10">Answer: A</h4>
<p>We have already had a couple of questions regarding asynchronous code in general and handling the data flow with promise in particular. If you understand how JS works, I am sure that the code challenge above is not difficult.</p>
<p>We have two promises; each takes 5 or 4 seconds to complete the code and returns &ldquo;hello&rdquo; (in <code>promise1</code>) and &ldquo;world&rdquo; (in <code>promise2</code>) in the <code>resolve</code> methods, respectively.</p>
<p>Then we take advantage of the <code>async</code> function to chain the two promises to get the result we want. As <code>async</code> function returns a <code>promise</code> so to get the returned value from <code>async</code> function, we have to use <code>then()</code> method. As we do not do that here, then we get <code>Promise { &lt;pending&gt; }</code>.</p>
<p>The question is, does <code>p2</code> have to wait and only run after <code>p1</code> complete? It turns out that it does not. Both <code>p1</code> and <code>p2</code> run simultaneously in the task queue thanks to web API or nodejs API (the environments by which JavaScript engine runs). So it will not take 9 seconds to finish the code but solely around 5. It means <code>promise1</code> takes 5 seconds to complete and at the same time, <code>promise2</code> reaches the bottom within only 4 seconds.</p>
<p>That is why A is the correct answer.</p>
<p>Updated: What happens if <code>promise2</code> takes 6 seconds instead of 4 ? Well, as <code>promise2</code> runs almost at the same time with <code>promise1</code>, it will only take 1 second after the <code>promise1</code> completes. So in total, it takes approximately 6 seconds.</p>
</p>
</details>
<h3 id="72-whats-the-output">72. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">promise1</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;hello&#34;</span><span class="p">),</span> <span class="mi">5000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">promise2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">resolve</span><span class="p">(</span><span class="s2">&#34;world&#34;</span><span class="p">),</span> <span class="mi">4000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">time</span><span class="p">(</span><span class="s2">&#34;timeleap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">p1</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">promise1</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">p2</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">promise2</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">p1</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">p2</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">timeEnd</span><span class="p">(</span><span class="s2">&#34;timeleap&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><ul>
<li>A: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 5000 ms</li>
<li>B: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 9000 ms</li>
<li>C: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 4000 ms</li>
<li>D: Promise { <pending> } - &ldquo;hello world&rdquo; - timeleap: ~ 1000 ms</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-15">Answer: B</h4>
<p>The 72nd challenge is almost identical to the 71st. Please take a closer look.</p>
<p>The difference lies in the way we declare a promise. In question 71st, we use two constants, and both return promise, but in question 72, we declare functions and each returns a promise.</p>
<p>If you run the code, you might be surprised with the result as it takes around 9 seconds to complete the code in place of 5 seconds as in the previous question.</p>
<p>It means that <code>const p1 = await promise1;</code> and <code>const p1 = await promise1();</code> are different as the latter (a function) might block the callstack and <code>const p2 = await promise2();</code> can only be called after the <code>p1</code> completes. The two do not run in parallel as the two promises in the previous question.</p>
<p>As it takes 9 seconds to finish, B is the correct answer.</p>
</p>
</details>
<h3 id="73-whats-the-output">73. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">history</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">year</span><span class="o">:</span> <span class="mi">2021</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getYear</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">year</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">history</span><span class="p">.</span><span class="nx">getYear</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">history</span><span class="p">.</span><span class="nx">getYear</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">history</span><span class="p">),</span> <span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">getYear</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">history</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">getYear</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: undefined - undefined - 2021</li>
<li>B: undefined - 2021 - 2021</li>
<li>C: 2021 - undefined - 2021</li>
<li>D: 2021 - 2021 - 2021</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-a-11">Answer: A</h4>
<p>We have three outputs on the code above. First, we have a simple object with one property and one method. Noted that the method point to the property <code>year</code> using <code>this</code> keyword. The problem now happens when we attempt to extract data from the object.</p>
<p>Be aware of the <code>setTimeout</code> method, which will create a separated context that is different from the original object&rsquo;s context. Even though in <code>setTimeout(history.getYear, 0);</code> we have explicitly called the object <code>history</code>, setTimeout will still execute the function <code>history.getYear</code> with<code>this</code> pointing to the global object. So it returns <code>undefined.</code></p>
<p><code>getYear();</code> is extracted from the object we have defined in the beginning. But as <code>this</code> is out of the original context when executing the function, it returns <code>undefined</code>. This code is called last, but the output is displayed first on the console window as it is a synchronous code.</p>
<p><code>setTimeout(history.getYear.bind(history), 10);</code> runs last and will give us 2021 as it is bound to the object <code>history</code>. Finally, we get <code>undefined - undefined - 2021,</code> and A is the correct answer.</p>
</p>
</details>
<h3 id="74-whats-the-output">74. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">handleCovid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">calculate</span><span class="p">(</span><span class="nx">someValue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">start</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">start</span> <span class="o">+</span> <span class="nx">someValue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">vaccine</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">delaying</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">getFinal</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">result</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">handleCovid</span><span class="p">(</span><span class="mi">2019</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">handleCovid</span><span class="p">.</span><span class="nx">getFinal</span><span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">vaccine</span><span class="p">().</span><span class="nx">delaying</span><span class="p">().</span><span class="nx">calculate</span><span class="p">(</span><span class="mi">2020</span><span class="p">)));</span>
</span></span></code></pre></div><ul>
<li>A: 2019</li>
<li>B: 8082</li>
<li>C: 8080</li>
<li>D: 8084</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-b-16">Answer: B</h4>
<p>The code snippet above is ugly and sounds complicated at first. Yet, you might encounter a situation when some good &ldquo;take away&rdquo; messages might be given. The flow of the code is not hard to understand, I suppose.</p>
<p>First, a function in JavaScript can accept another function as its parameter. With regard to the <code>static</code> keyword, it means we can directly call a static method in the form of <code>className.staticmethod</code> without invoking the object created by the normal way <code>new ClassName</code>.</p>
<p>Besides, you might want to have a look at how we chain more than one method together. That is possible if these methods <code>return this</code>.</p>
<p>Now let break it down:</p>
<ul>
<li><code>calculate(2020)</code> &ndash;&gt; 2019 + 2020 = 4039;</li>
<li><code>delaying().calculate(2020)</code> &ndash;&gt; 4040;</li>
<li><code>now.vaccine().delaying().calculate(2020)</code> &ndash;&gt; 4041;</li>
<li><code>handleCovid.getFinal(now.vaccine().delaying().calculate(2020)</code> &ndash;&gt; 4041 * 2 = 8082;</li>
</ul>
<p>So the correct answer is B.</p>
</p>
</details>
<h3 id="75-whats-the-output">75. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">HappyNewYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">year2021</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HappyNewYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">year2021</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&#34;happy&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">HappyNewYear</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="s2">&#34;new year&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">year2021</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">HappyNewYear</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">year2021</span><span class="p">)</span> <span class="o">===</span> <span class="nx">HappyNewYear</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">year2021</span><span class="p">)</span> <span class="o">===</span> <span class="nx">HappyNewYear</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">year2021</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">year2021</span> <span class="k">instanceof</span> <span class="nx">HappyNewYear</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">year2021</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">thisyear</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HappyNewYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">thisyear</span><span class="p">.</span><span class="nx">greeting</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">thisyear</span><span class="p">.</span><span class="nx">say</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: true - true - true - false - true - false - &ldquo;happy new year&rdquo;</li>
<li>B: true - true - true - false - false - true - &ldquo;happy new year&rdquo;</li>
<li>C: true - true - true - true - true - true - &ldquo;happy new year&rdquo;</li>
<li>D: true - true - true - false - true - true - &ldquo;happy new year&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<h4 id="answer-d-28">Answer: D</h4>
<p>The code snippet above helps us revise the concept of <code>prototype</code> in JavaScript with two essential keywords: <code>__proto__</code> and <code>FunctionName.prototype</code>. I believe that the code <code>console.log(year2021.__proto__ === HappyNewYear.prototype);</code> is the key to understand the difference between the two. So, in short, every single object in JavaScript has a built-in property <code>__proto__</code> that gives us an overview of the built-in (internal) [[Prototype]]. They are the things (property and method) the object inherits from the &ldquo;parent&rdquo; function constructor or class).</p>
<p>For example, if you declare a literal object such as <code>const a = {}</code> then <code>a.__proto__ === Object.prototype</code> returns <code>true</code> because <code>a</code> inherits the prototype from the &ldquo;parent&rdquo; <code>Object</code>. However, if an object is created using function constructor then the &ldquo;parent&rdquo; prototype is function constructor itself instead of the <code>Object</code>. So while <code>console.log(year2021.__proto__ === HappyNewYear.prototype);</code> returns <code>true</code>, <code>console.log(year2021.__proto__ === Object.prototype);</code> gives us <code>false</code>.</p>
<p>Be aware of <code>Object.getPrototypeOf (object)</code> and <code>Reflect.getPrototypeOf(object)</code>. The two are recommended to use as <code>__proto__</code> is being deprecated.</p>
<p>You might want to read more about <code>__proto__</code> at MDN <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto</a></p>
<p>The correct answer is D, and btw &ldquo;happy new year&rdquo;!</p>
</p>
</details>
<h3 id="76-whats-the-output">76. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;hoccoban.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">author</span><span class="o">:</span> <span class="s2">&#34;Vuong Nguyen&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="s2">&#34;author&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">?</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">ownKeys</span><span class="p">(</span><span class="nx">address</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="o">:</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Reflect</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="s2">&#34;language&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">totalKeys</span> <span class="o">=</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">ownKeys</span><span class="p">(</span><span class="nx">address</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="nx">key</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">language</span> <span class="o">=</span> <span class="nx">Reflect</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">address</span><span class="p">,</span> <span class="s2">&#34;language&#34;</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">totalKeys</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="nx">language</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 22</li>
<li>B: 10</li>
<li>C: 20</li>
<li>D: 25</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The correct answer is D. Why? Now let break it down:</p>
<ul>
<li>
<p><code>Reflect.has(address, 'author')</code> gives us <code>true</code> given that the object <code>address</code> has the key <code>author</code>. Simple as it is. So the value of the variable <code>key</code> is now <code>Reflect.ownKeys(address)[0]</code>, which in fact is the key <code>name</code>.</p>
</li>
<li>
<p><code>Reflect.set(address, 'language', 'JavaScript');</code> set another key-value to the object <code>address</code>.</p>
</li>
<li>
<p><code>Reflect.ownKeys(address).length;</code> gives us 3 because now it has three keys, so <code>totalKeys</code> is now 3.</p>
</li>
<li>
<p><code>Reflect.get(address, key).length;</code> gives us the length of the string <code>hoccoban.com</code> which is 12.</p>
</li>
<li>
<p><code>Reflect.get(address, 'language').length</code> is the length of the string <code>JavaScript</code>, which is 10.</p>
</li>
<li>
<p>The final answer is 3 + 12 + 10 = 25.</p>
</li>
</ul>
<h4 id="answer-d-29">Answer: D</h4>
</p>
</details>
<h3 id="77-whats-the-output">77. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myModule</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">covidYear</span> <span class="o">=</span> <span class="mi">2019</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">year</span> <span class="o">=</span> <span class="mi">2021</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">getYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">year</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">getCovidYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">covidYear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">exposeYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">getYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">function</span> <span class="nx">exposeCovidYear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">getCovidYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nothing</span><span class="o">:</span> <span class="kc">undefined</span> <span class="o">??</span> <span class="kc">null</span> <span class="o">??</span> <span class="kc">null</span> <span class="o">??</span> <span class="kc">undefined</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">exposeYear</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">exposeCovidYear</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="nx">myModule</span><span class="p">.</span><span class="nx">nothing</span> <span class="o">??</span> <span class="nx">myModule</span><span class="p">.</span><span class="nx">exposeYear</span><span class="p">()</span> <span class="o">+</span> <span class="nx">myModule</span><span class="p">.</span><span class="nx">exposeCovidYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 2021</li>
<li>B: 2019</li>
<li>C: 4040</li>
<li>D: undefined</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The challenge above will help you revise the <code>revealing pattern</code> and thanks to it you can declare a private variable in JavaScript. Note that we can now declare a <code>private</code> property in a class in modern JavaScript, so the above way of writing a private variable seems old-fashioned.</p>
<p>First, we have an IIFE function - immediately invoked function expressions. There are two variables and two functions as well. However, in the <code>return</code>, there are three key-values. We can not directly access the two variables <code>covidYear</code> and <code>year</code> except for using some already-built functions inside the IIFE.</p>
<p>If you feel the keyword <code>??</code> is odd, then you might want to have a look at the latest syntax supported in modern JavaScript called &ldquo;Nullish Coalescing Operator&rdquo;. It means, if the left element is either <code>undefined</code> or <code>null</code>, the value of the right element will be assigned.</p>
<p>In short, we have <code>myModule.exposeYear()</code> (2021) and <code>myModule.exposeCovidYear()</code> (2019). In total, the final result is 4040. So the correct answer is C.</p>
<h4 id="answer-c-16">Answer: C</h4>
</p>
</details>
<h3 id="78-whats-the-output">78. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">HocCoban</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="nx">address</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">youtube</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getAddress</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setYoutube</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">youtube</span> <span class="o">=</span> <span class="nx">channel</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">getYoutube</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">youtube</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">web</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HocCoban</span><span class="p">(</span><span class="s2">&#34;hoccoban.com&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">web</span><span class="p">.</span><span class="nx">setYoutube</span> <span class="o">=</span> <span class="s2">&#34;youtube.com/hoccoban&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">web</span><span class="p">.</span><span class="nx">getAddress</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">web</span><span class="p">.</span><span class="nx">youtube</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">web</span><span class="p">.</span><span class="nx">getYoutube</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;hoccoban.com&rdquo; - &ldquo;youtube.com/hoccoban&rdquo; - 20</li>
<li>B: &ldquo;hoccoban.com&rdquo; - function() - 20</li>
<li>C: function() - &ldquo;youtube.com/hoccoban&rdquo; - 20</li>
<li>D: function() - function() - 20</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p><code>set</code> and <code>get</code> are commonly called setter and getter. When declaring a method in a class and putting the keyword <code>set</code> or <code>get</code> before it, you can then call them without using <code>parenthesis - ()</code>. Put another way, when using <code>get</code> and <code>set</code>, you can directly get or set the value of/for the properties. Somehow it might be convenient in some cases.</p>
<p>Be aware of the methods declared with a <code>getter</code> as we just need to call the method as we call a property (without using parenthesis).</p>
<p>If you know how a traditional method works in JavaScript, then the code challenge above is not difficult, I suppose. The answer is A.</p>
<h4 id="answer-a-12">Answer: A</h4>
</p>
</details>
<h3 id="79-whats-the-output">79. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;ronaldo&#34;</span><span class="p">,</span> <span class="s2">&#34;messi&#34;</span><span class="p">,</span> <span class="s2">&#34;neymar&#34;</span><span class="p">,</span> <span class="s2">&#34;Ronaldo&#34;</span><span class="p">,</span> <span class="s2">&#34;LuKaKUUUU&#34;</span><span class="p">].</span><span class="nx">sort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: [&ldquo;LuKaKUUUU&rdquo;, &ldquo;Ronaldo&rdquo;, &ldquo;messi&rdquo;, &ldquo;neymar&rdquo;, &ldquo;ronaldo&rdquo;]</li>
<li>B: [&ldquo;LuKaKUUUU&rdquo;, &ldquo;messi&rdquo;, &ldquo;neymar&rdquo;, &ldquo;Ronaldo&rdquo;,&ldquo;ronaldo&rdquo;]</li>
<li>C: [&ldquo;LuKaKUUUU&rdquo;, &ldquo;messi&rdquo;, &ldquo;neymar&rdquo;, &ldquo;ronaldo&rdquo;, &ldquo;Ronaldo&rdquo;]</li>
<li>D: [&ldquo;messi&rdquo;, &ldquo;neymar&rdquo;, &ldquo;ronaldo&rdquo;, &ldquo;Ronaldo&rdquo;, &ldquo;LuKaKUUUU&rdquo;]</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>In JavaScript, the built-in <code>sort()</code> method sorts the elements of an array. It returns a sorted array in ascending order. Note that each element will be converted to strings and then compared according to the sequences of UTF-16 code unit values. What does it mean?</p>
<p>It means, &ldquo;banana&rdquo; &lt; &ldquo;cherry&rdquo; or 80 &lt; 9 (because &ldquo;80&rdquo; &lt; &ldquo;9&rdquo; in the Unicode order).</p>
<p>If you run the following code <code>const result = [9, 11, 89].sort();</code>, the constant <code>result</code> will be sorted as <code>[11, 8, 9]</code> rather than <code>[9, 11, 89]</code> because the engine will convert the number value to string.</p>
<p>The following codes might give you a hint about the relationship between character and number. Ultimately, as the computer can only understand 0 and 1, all characters and even decimal numbers are then converted to 1 and 0. <code>charCodeAt()</code> gives us the decimal value of any string evaluated.</p>
<p><code>console.log(&quot;LuKaKUUUU&quot;.charCodeAt(0))</code> or <code>console.log(&quot;LuKaKUUUU&quot;.charCodeAt())</code> ==&gt; 76
<code>console.log(&quot;Ronaldo&quot;.charCodeAt(0))</code> or <code>console.log(&quot;Ronaldo&quot;.charCodeAt())</code> ==&gt; 82
<code>console.log(&quot;messi&quot;.charCodeAt(0))</code> or <code>console.log(&quot;messi&quot;.charCodeAt())</code> ==&gt; 109
<code>console.log(&quot;neymar&quot;.charCodeAt(0))</code> or <code>console.log(&quot;neymar&quot;.charCodeAt())</code> ==&gt; 110
<code>console.log(&quot;ronaldo&quot;.charCodeAt(0))</code> or <code>console.log(&quot;ronaldo&quot;.charCodeAt())</code> ==&gt; 114
<code>console.log(&quot;9&quot;.charCodeAt())</code> or <code>console.log(&quot;99&quot;.charCodeAt())</code> ==&gt; 57
<code>console.log(&quot;80&quot;.charCodeAt())</code> or <code>console.log(&quot;8&quot;.charCodeAt())</code> ==&gt; 56</p>
<p>Noted that if index is not a number, it defaults to 0. The answer is A.</p>
<h4 id="answer-a-13">Answer: A</h4>
</p>
</details>
<h3 id="80-whats-the-output">80. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">anArray</span> <span class="o">=</span> <span class="k">typeof</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">aTypeOfNull</span> <span class="o">=</span> <span class="k">typeof</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">weirdFirst</span> <span class="o">=</span> <span class="kc">null</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">weirdSecond</span> <span class="o">=</span> <span class="p">[]</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">weirdThird</span> <span class="o">=</span> <span class="p">[]</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">anArray</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">aTypeOfNull</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">weirdFirst</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">weirdSecond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">weirdThird</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;array&rdquo; - &ldquo;null&rdquo; - false - true - true</li>
<li>B: &ldquo;array&rdquo; - &ldquo;object&rdquo; - false - true - true</li>
<li>C: &ldquo;object&rdquo; - &ldquo;object&rdquo; - false - false - true</li>
<li>D: &ldquo;object&rdquo; - &ldquo;object&rdquo; - false - true - true</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>In the 80th challenge question, we will review some fundamental &ldquo;issue&rdquo; or &ldquo;weird&rdquo; features in JavaScript relating to the <code>typeof</code> and <code>instance</code> operators. Given that the original version of the JavaScript language was designed in just 10 days, there are a bundle of inconsistent behaviors that cannot be fixed. They are permanent features existing in the modern language. If we fix it, a lot of websites might crash.</p>
<p>The above code shows us some of the weird features in JavaScript. For example, <code>[]</code> is an array but the <code>typeof []</code> gives us <code>object</code>. Note that you might take advantage of <code>Array.isArray([])</code> rather than <code>typeof</code> to examine whether a variable is an array or not.</p>
<p><code>typeof null;</code> is another weird operator as it returns <code>object</code>. However <code>null instanceof Object;</code> returns <code>false</code>. ~WhatTheHell~!!!</p>
<p>Man, <code>[] instanceof Object;</code> and <code>[] instanceof Array;</code> both return <code>true</code>. How inconsistent it is.</p>
<p>The answer is D.</p>
<h4 id="answer-d-30">Answer: D</h4>
</p>
</details>
<h3 id="81-whats-the-output">81. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Dog</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">say</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">say</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;hello world&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Cat</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">speak</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">say</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">say</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;kia ora&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">animal</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">animal</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span><span class="nx">animal</span><span class="p">,</span> <span class="nx">Cat</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">animal</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;hello world&rdquo; - undefined</li>
<li>B: &ldquo;kia ora&rdquo; - &ldquo;kia ora&rdquo;</li>
<li>C: &ldquo;hello world&rdquo; - &ldquo;kia ora&rdquo;</li>
<li>D: &ldquo;hello world&rdquo; - &ldquo;hello world&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The central issue/concept mentioned in the code above is the method <code>Object.setPrototypeOf(object, prototype)</code>. It is one of the features in ES6, or ECMAScript 2015. Another way to set the prototype of an object is <code>Object.prototype.__proto__</code> but the latter is controversial.</p>
<p>At first, <code>animal.speak();</code> gives us &ldquo;hello world&rdquo; which is no surprise. Yet, in the second call, we get &ldquo;kia ora&rdquo; instead of &ldquo;hello world&rdquo;. When checking the prototype with <code>Object.getPrototypeOf(animal)</code>, you might see that <code>Cat</code> is the prototype of the object <code>animal</code> rather than <code>Dog</code>.</p>
<p>The answer is C.</p>
<p>By the way, <code>kia ora</code> means <code>hello</code> in the Māori language.</p>
<h4 id="answer-c-17">Answer: C</h4>
</p>
</details>
<h3 id="82-whats-the-output">82. What&rsquo;s the output?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">js</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">mutate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">mutate</span><span class="p">(</span><span class="nx">js</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">js</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: [9, 10]</li>
<li>B: [9, 10, 1]</li>
<li>C: [1, 9, 10]</li>
<li>D: ReferenceError</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The code snippet might be pretty trivial if you have already obtained a solid understanding of the two different concepts: <code>reference</code> and <code>value.</code> In JavaScript, non-primitive type such as array and object does not store the value but the reference.</p>
<p>Also, as the arguments in function are passed by the reference, the function <code>mutate</code> will push another element into the array <code>js</code>. Finally, the initial variable &lsquo;js&rsquo; is updated with the new value <code>[9, 10, 1]</code>.</p>
<p>If the variable <code>js</code> is assigned a primitive value such as string or number, no matter how the function <code>mutate</code>, it will not mutate the initial variable &lsquo;js&rsquo;. However, if the variable is an object, then it will also be mutated, as in the case of an array in the code above.</p>
<p>B is the correct answer.</p>
<h4 id="answer-b-17">Answer: B</h4>
</p>
</details>
<h3 id="83-whats-the-output-when-running-the-code-on-a-browser">83. What&rsquo;s the output when running the code on a browser?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nx">frames</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nx">globalThis</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nx">self</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nx">global</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: true - true - true - true - &ldquo;ReferenceError&rdquo;</li>
<li>B: true - false - true - true - &ldquo;ReferenceError&rdquo;</li>
<li>C: true - true - true - true - true</li>
<li>D: true - true - &ldquo;ReferenceError&rdquo; - true - &ldquo;ReferenceError&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The code snippet above might output different results if running on other environments than the browser. For example, there is no <code>self</code>, <code>window</code>, or <code>frames</code> on Nodejs.</p>
<p><code>global</code> plays the role of the global object in Nodejs, but that is not the case in the browser environment. In contrast, <code>globalThis</code> is available in both browser and Nodejs environments.</p>
<p>The first takeaway message is that Nodejs does have <code>this</code>, <code>global</code>, and <code>globalThis</code>. Browser environment has 5 ones including <code>this</code>, <code>globalThis</code>, <code>window</code>, <code>frames</code>, and <code>self</code>.</p>
<p>The second takeaway message is that Web Worker only has <code>self</code> as the global object.</p>
<p>Ultimately, A is the correct answer.</p>
<h4 id="answer-a-14">Answer: A</h4>
</p>
</details>
<h3 id="84-whats-the-output-">84. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">StackHocCoBan</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">stack</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">push</span><span class="p">(</span><span class="nx">thing</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">thing</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">pop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">peek</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">stack</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">length</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">isEmpty</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstThing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StackHocCoBan</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">firstThing</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">firstThing</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">firstThing</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">firstThing</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="o">!</span><span class="nx">firstThing</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">()</span> <span class="o">?</span> <span class="nx">firstThing</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">firstThing</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">:</span> <span class="nx">firstThing</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">firstThing</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstThing</span><span class="p">.</span><span class="nx">peek</span><span class="p">()</span> <span class="o">+</span> <span class="nx">firstThing</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">firstThing</span><span class="p">.</span><span class="nx">pop</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: 3</li>
<li>B: 4</li>
<li>C: 5</li>
<li>D: 6</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The code challenge above is a bit lengthy, frankly. But it might practically help you to revise the concept of <code>stack</code> implemented in JavaScript. Such a concept is quite crucial when it comes to the algorithm, so to say. It appears that <code>stack</code> and <code>queue</code> are blood brothers, and as a developer, you are always advised to master these concepts along with array, linked list, tree, graphs, and so on.</p>
<p>In my opinion, both <code>stack</code> and <code>queue</code> are simply arrays, but they are exclusively built to serve some particular jobs with strict requirements. You might see <code>pop()</code> or <code>push()</code> in the code above are standard native methods we often use when working with the array.</p>
<p>So now <code>firstThing</code> is an object initiated by the class <code>StackHocCoBan</code>. As the class&rsquo;s construct initially triggers an empty array <code> this.stack = [];</code>, first the code <code>firstThing.push(firstThing.length);</code> will actually push the number 0 into the array given that <code>firstThing.length</code> returns 0 as the stack, at the beginning` is empty.</p>
<p>Then <code>firstThing.push(firstThing.length);</code> (the second one) pushes number 1 to the stack as we have already had one item (the number 0).</p>
<p><code>firstThing.isEmpty()</code> returns <code>false</code> because we have two things in the stack. Yet, be causious with &ldquo;!&rdquo; before it. As we write <code>!firstThing.isEmpty()</code>, the code with call <code>firstThing.push(firstThing.length)</code> rather than <code>firstThing.length;</code>. It is a simply short-hand of <code>if-else</code>.</p>
<p>So, the stack is pushed the number 2 because <code>firstThing.length</code> returns 2. So now the stack is as [0, 1, 2], beautiful, right?</p>
<p><code>firstThing.pop()</code> will eliminate the number 2 and the stack is now [0, 1].</p>
<p>The last line of the code above is <code>firstThing.peek()</code> (1) + <code>firstThing.length</code> (2) + <code>firstThing.pop()</code> (1).</p>
<p>So B is the correct answer.</p>
<h4 id="answer-b-18">Answer: B</h4>
</p>
</details>
<h3 id="85-whats-the-output-">85. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">QueueHocCoBan</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">queue</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">enqueue</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">dequeue</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">peek</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">length</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">isEmpty</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">items</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueueHocCoBan</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">items</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="s2">&#34;constructor&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">items</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="s2">&#34;QueueHocCoBan&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">items</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="s2">&#34;hoccoban.com&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">peek</span><span class="p">().</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 6</li>
<li>B: 7</li>
<li>C: 8</li>
<li>D: 9</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>Following up the question 85th, we now pay the attention to another important concepts - <code>queue</code> - which is a bit different from <code>stack</code>. While <code>stack</code> leverages two native array methods <code>push()</code> (for adding new item) and <code>pop()</code>(for extracting new item), <code>queue</code> utilises <code>unshift()</code> (for adding new item) and <code>pop()</code> (for extracting new item). In essense, both <code>stack</code> and <code>queue</code> are array and thus the difference between them, IMO, lays in the way <code>push()</code> and <code>unshift()</code> are implemented for adding new item. While <code>push()</code> adds a new item/element at the end/tail of the array, <code>unshift()</code> adds the new one to the top/head of the array itself.</p>
<p>First, the object <code>items</code> will add three new elements into the array (initiated by the constructor) at the top one by one, thanks to the method <code>enqueue</code>. The array will look like this [&ldquo;hoccoban.com&rdquo;, &ldquo;QueueHocCoBan&rdquo;, &ldquo;constructor&rdquo;];</p>
<p>Now <code>items.peek()</code> gives us &ldquo;constructor&rdquo; and thus <code>items.peek().length</code> returns 11. <code>items.length</code> simply returns 3 and so the final result will be 8.</p>
<p>So C is the correct answer.</p>
<p>By way of summarisation, using <code>queue</code>, we can only take out the first element (also the tail of the array) with the method <code>dequeue().</code> You might need to find another way to extract other elements of the queue.</p>
<h4 id="answer-c-18">Answer: C</h4>
</p>
</details>
<h3 id="86-whats-the-output-">86. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">domains</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">domains</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;site&#34;</span><span class="p">,</span> <span class="s2">&#34;hoccoban.com&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">domains</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;youtube&#34;</span><span class="p">,</span> <span class="s2">&#34;youtube.com/hoccoban&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nx">domains</span><span class="p">.</span><span class="nx">keys</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">domains</span><span class="p">.</span><span class="nx">values</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">domains</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&#34;hoccoban.com&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">?</span> <span class="nx">values</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span>
</span></span><span class="line"><span class="cl">  <span class="o">:</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;site&rdquo;</li>
<li>B: &ldquo;hoccoban.com&rdquo;</li>
<li>C: &ldquo;youtube&rdquo;</li>
<li>D: &ldquo;youtube.com/hoccoban&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>There are two ways hash tables are implemented in JavaScript: object and Map(). Hash tables are data structures created to store information in the form of key-value.</p>
<p>While the native object defined as {} is trivial for a JavaScript developer, a new way to design a hash table has been recently added into the language. When writing <code>const domains = new Map();</code>, we have declared an object with a couple of different features as opposed to the veteran one declared in the form of <code>{}</code> or <code>new Object</code> we all know.</p>
<p>You are advised to take advantage of the built-in methods such as <code>set()</code>, <code>get()</code>, <code>has()</code> or <code>delete()</code> among others to manipulate the map object.</p>
<p>Note that a map object can be iterated using <code>for of</code>. You might need to use <code>next().value</code> to extract the raw information written. At this point, you might want to revisit <code>function generator</code> to see why we need to do that.</p>
<p>Both <code>keys()</code> and <code>values()</code> are native methods of the class <code>Map</code>. You might see that they works on a map object as in a normal object. Back to the code snippet above, <code>let result = domains.has(&quot;hoccoban.com&quot;) ? values.next().value: keys.next().value</code> returns <code>keys.next().value</code> given that <code>domains.has(&quot;hoccoban.com&quot;)</code> returns <code>false</code>.</p>
<p>So <code>console.log(result)</code> gives us &ldquo;site&rdquo;, so A is the correct answer.</p>
<p>Note that if you want to extract &ldquo;youtube&rdquo;, you must run <code>keys.next().value</code> twice.</p>
<h4 id="answer-a-15">Answer: A</h4>
</p>
</details>
<h3 id="87-whats-the-output-">87. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">inner</span><span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hello</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">++</span><span class="nx">hello</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">--</span><span class="nx">hello</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">inner</span><span class="p">(</span><span class="nx">hello</span> <span class="o">&gt;</span> <span class="mi">11</span> <span class="o">?</span> <span class="kc">false</span> <span class="o">:</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 9</li>
<li>B: 10</li>
<li>C: 11</li>
<li>D: 12</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>As a variable in JavaScript can be declared without any functional keyword such as var, let, or const standing before the variable name, as seen on the code above, this challenge sounds a bit odd as now developers tend to use <code>const</code> or <code>let</code> everywhere. What happened when we do that? The variable will have a global scope no matter where it has been written initially. So first, the variable <code>hello</code> will be accessed anywhere outside of the function scope whenever (after to be exact) the function inner has been executed.</p>
<p>Then we redeclare the <code>hello</code> variable with a different value.</p>
<p>The code <code>inner(hello&gt;11? false: true)</code> is translated to <code>inner(false)</code>, so the variable <code>hello</code> declared inside this function is mutated to 9.</p>
<p>As <code>hello</code> is now 9 instead of 12, A is the correct answer.</p>
<h4 id="answer-a-16">Answer: A</h4>
</p>
</details>
<h3 id="88-whats-the-output-">88. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">collections</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mi">123</span><span class="p">],</span> <span class="kc">true</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">abc</span><span class="o">:</span> <span class="s2">&#34;hello world&#34;</span> <span class="p">}];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">iterator</span> <span class="o">=</span> <span class="nx">collections</span><span class="p">.</span><span class="nx">values</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">e</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">iterator</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">)[</span><span class="nb">Number</span><span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">)].</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="nx">d</span> <span class="o">+</span> <span class="nx">e</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 12</li>
<li>B: 14</li>
<li>C: 16</li>
<li>D: 18</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The code snippet above is frankly tedious as it does not solve any big problem but is still written in a very cryptic manner, honestly. I want you to pay a bit more attention to the native function to manipulate array <code>values()</code>. For your information, I also use <code>Object.values()</code> so that you can somehow make a comparison between the two by yourself.</p>
<p>In the beginning, we have a very simple array packed with different types of data such as boolean, string, array and object. The code <code>collections.values();</code> returns an iterator, so you can not simply access to each element as an usual array. You might run a <code>for of</code> loop here to render all of the elements in this iterator. By doing that, the way iterator works is likely a typical array.</p>
<p>So how do we access a single element in this iterator? We need to use <code>next().value</code>. Each time we call it, the iterator will render the value, one by one, starting with the first element.</p>
<p>It means <code>const a = iterator.next().value.length;</code> returns 1. So a is 1. So does b. C is a bit different and we have 4 here as <code>true</code>, a boolean, is converted to a string. d is 1. So</p>
<p>The code in e is not fascinating, I suppose. <code>Object.values</code> gives us an array of value defined in the object <code>{ abc: &quot;hello world&quot; }</code>. <code>[Number(a &gt; b)]</code> give us [0]. So e is simply the length of the string &ldquo;hello world&rdquo;, which is 11.</p>
<p>Finally, in the console we have 1 + 1 + 4 + 1 + 11 = 18. So D is the correct answer.</p>
<h4 id="answer-d-31">Answer: D</h4>
</p>
</details>
<h3 id="89-whats-the-output-">89. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matrix</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">matrixHandle</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">total</span> <span class="o">+=</span> <span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">total</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matrixHandle</span><span class="p">(</span><span class="nx">matrix</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 44</li>
<li>B: 45</li>
<li>C: 46</li>
<li>D: 47</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
You can easily create a two-dimensional array by nesting an array inside the parent one as the variable `matrix` above. To render all of the elements in the matrix, we implement a simple code with two for-loop functions which are nested.
<p><code>arguments[0][0][0];</code> gives us 1 because <code>arguments</code> has wrapped the variable <code>matrix</code> in an array. Note that <code>arguments</code> is a Array-like.</p>
<p>So the variable <code>total</code> at first is 1, and then the final value cumulated by looping through the matrix is 46.</p>
<p>In short, we have 1 + 1 + 2 + 3 + 4 + 5 + 6 + 7+ 8 + 9 = 46. So C is the correct answer.</p>
<h4 id="answer-c-19">Answer: C</h4>
</p>
</details>
<h3 id="90-whats-the-output-">90. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">container1</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stack</span><span class="o">:</span> <span class="s2">&#34;Docker&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getStack</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">stack</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">container1</span><span class="p">.</span><span class="nx">getStack</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">container2</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stack</span><span class="o">:</span> <span class="s2">&#34;Kubernetes&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getStack</span><span class="o">:</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">container2</span><span class="p">.</span><span class="nx">getStack</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">container3</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">architect</span><span class="o">:</span> <span class="s2">&#34;microservice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getStack</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;K8s&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">element</span><span class="si">}</span><span class="sb"> - </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">architect</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">container3</span><span class="p">.</span><span class="nx">getStack</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">container4</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">architect</span><span class="o">:</span> <span class="s2">&#34;microservice&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getStack</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;K8s&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">element</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="sb">`</span><span class="si">${</span><span class="nx">element</span><span class="si">}</span><span class="sb"> - </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">architect</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">container4</span><span class="p">.</span><span class="nx">getStack</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb"> -&gt; </span><span class="si">${</span><span class="nx">b</span><span class="si">}</span><span class="sb"> -&gt; </span><span class="si">${</span><span class="nx">c</span><span class="si">}</span><span class="sb"> -&gt; </span><span class="si">${</span><span class="nx">d</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: &ldquo;Docker -&gt; Kubernetes -&gt; K8s - undefined -&gt; K8s - microservice&rdquo;</li>
<li>B: &ldquo;Docker -&gt; Kubernetes -&gt; K8s - microservice -&gt; K8s - microservice&rdquo;</li>
<li>C: &ldquo;Docker -&gt; undefined -&gt; K8s - microservice -&gt; K8s - undefined&rdquo;</li>
<li>D: &ldquo;Docker -&gt; undefined -&gt; K8s - undefined -&gt; K8s - microservice&rdquo;</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
The code above might help you revise how the arrow function works in different contexts, especially when dealing with the keyword `this` in JavaScript. There are two crucial takeaway messages you might need to keep in mind when using a function, as follows:
<ul>
<li>
<p>First: The arrow function does not create a new <code>this</code> binding when you use them. It inherits from the parent one(environment) when it is defined.</p>
</li>
<li>
<p>Second: The keyword <code>this</code> could be problematic when it is called in a callback function. For example when implementing <code>setTimeout</code>, <code>setInterval</code> or <code>map</code>, <code>filter</code>, <code>reduce</code> or <code>some</code>, <code>every</code> among others, you will need to pass a callback function. Given that the callback function changes the context, <code>this</code> might therefore change to <code>global</code> object and no longer point to the parent object.</p>
</li>
</ul>
<p>We have 4 objects in the snippet above. Each has a simple property and a trivial method. <code>a</code> returns <code>docker</code> because <code>this.stack</code> exactly points to the object declared <code>container1</code>. However, <code>b</code> returns <code>undefined</code> because <code>this</code> in the arrow function points to the global one rather than <code>container2</code>. Why? As we mentioned above, the arrow function does not create a context for itself, so <code>container2.getStack()</code> is still bound to the global object. <code>this.stack</code> becomes <code>undefined</code> as a result.</p>
<p>Next <code>c</code> gives us <code>K8s - undefined</code> because <code>this</code> is called in the callback function when we use <code>map</code>. A new context is now created by the function <code>map</code>, so <code>this</code> will not point to the object <code>container3</code>. The callback function implemented with <code>map</code> or <code>filter</code> always creates a new context so that <code>this</code> changes.</p>
<p>We get <code>K8s - microservice&quot;</code> in <code>d</code> because the arrow function helps us fix the problem caused by switching context as in the object <code>container3</code>. Here are some lessons learned when dealing with context, nested functions (or implementing callback function):</p>
<ul>
<li>
<p>Use normal function rather than arrow function when you write a method inside an object in which the method does not have a nested function(method) or callback one. Arrow function is not recommended when creating object prototypes, classes along with object literals as well.</p>
</li>
<li>
<p>Use the arrow function when you want to access to <code>this</code>, especially in the case of nested method (function) or when using callback function. Otherwise, <code>this</code> will no longer point to the object in these cases (nested method or using callback function with map, filter). There are two other techniques (old-fashion ones) to fix that.</p>
</li>
<li>
<p>There are 3 ways to fix <code>this</code> issue relating to the nested method or callback function: using arrow function as mentioned above, use <code>self = this</code> technique or explicitly binding with <code>call</code>, <code>bind</code> or <code>apply</code> method.</p>
</li>
</ul>
<h4 id="answer-d-32">Answer: D</h4>
</p>
</details>
<h3 id="91-whats-the-output-">91. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Angular</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">vendor</span> <span class="o">=</span> <span class="s2">&#34;Google&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lang</span> <span class="o">=</span> <span class="s2">&#34;TypeScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">overview</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">report</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">report</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lang</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">report</span> <span class="o">=</span> <span class="nx">report</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">vendor</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">report</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Angular</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">me</span><span class="p">.</span><span class="nx">overview</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: 16</li>
<li>B: 106</li>
<li>C: NaN</li>
<li>D: TypeError</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The code snippet above might help you revise the concept of context in conjunction with the way <code>this</code> is treated in JavaScript. In short, if you implement a callback function for the <code>map</code> method (or in another case: nested function), then you might need to pay attention to <code>this</code> binding.</p>
<p>While <code>report.push(this.lang);</code> works pretty well as <code>this</code> points to the property declared within the class <code>Angular</code>, the line <code>return e.length + this.vendor.length;</code> does not work as <code>this</code> no longer points to <code>vendor</code> we have already declared as a property in the class. The <code>map</code> function creates a new context here. As <code>vendor</code> is undefined inside the callback of the <code>map</code> function, we get <code>TypeError</code> in the console. So D is the correct answer.</p>
<p>How to fix that? We can quickly fix this one with one of three techniques: (1) use arrow function for the callback passing to <code>map</code>, (2) temporarily create an alternative <code>this</code> such as <code>let self = this</code> before we call map and use <code>self</code> instead of <code>this</code>. (3) explicitly bind the callback for <code>map</code> using bind, call or apply. We can also pass <code>this</code> as the second parameter for the map function. It also works.</p>
<h4 id="answer-d-33">Answer: D</h4>
</p>
</details>
<h3 id="92-whats-the-output-">92. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">FrameWork</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">??</span> <span class="p">[</span><span class="s2">&#34;Angular&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Vue&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">total</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">filter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">selected</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s2">&#34;A&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">selected</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">total</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FrameWork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">filter</span><span class="p">());</span>
</span></span></code></pre></div><ul>
<li>A: 8</li>
<li>B: 2</li>
<li>C: 10</li>
<li>D: 1</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The code challenge above implements a simple class with two methods. There is only one point in the syntax that you might need to pay a bit more attention to is <code>??</code> (nullish coalescing operator ) which is quite similar to <code>||</code> (OR).</p>
<p><code>??</code> returns the right-hand side value if the left-hand side is either <code>null</code> or <code>undefined</code> while <code>||</code> does the same thing for <code>falsy</code> value (false, null, undefined, 0, -0, 0n, NaN, &ldquo;&rdquo;).length</p>
<p>So as we do not pass anything into the constructor when we initiate the object <code>app</code>, <code>this.options</code> takes the default value <code>[&quot;Angular&quot;, &quot;React&quot;, &quot;Vue&quot;]</code>, then the method <code>total()</code> evaluates the length of the array, which is 3.</p>
<p><code>filter()</code> gives us the length of &ldquo;Angular&rdquo;, which is 8. So the final value is 10. The correct answer is C.</p>
<h4 id="answer-c-20">Answer: C</h4>
</p>
</details>
<h3 id="93-whats-the-output-">93. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">origin</span> <span class="o">=</span> <span class="p">[[[</span><span class="mi">123</span><span class="p">],</span> <span class="mi">321</span><span class="p">],</span> <span class="mi">213</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">manipulated</span> <span class="o">=</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">flat</span><span class="p">(</span><span class="nx">origin</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">manipulated</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 2</li>
<li>B: 3</li>
<li>C: 4</li>
<li>D: 5</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The challenge might hopefully help you have a grip on the native array method <code>flat()</code>, which is quite handy to flatten a nested array. <code>flat()</code> accepts a parameter that defines the level of the nested array you are going to manipulate. By default, this parameter is 1.</p>
<p>The method returns a manipulated array. So on the code about <code>origin.length</code> returns 2 given that the array <code>origin</code> has two elements. When flattening the original array named <code>origin</code> with <code>flat(2)</code>, we then have a new array <code>[123, 321, 213]</code>.</p>
<p>Finally, we have 5 in the console, and D is the correct answer.</p>
<h4 id="answer-d-34">Answer: D</h4>
</p>
</details>
<h3 id="94-whats-the-output-">94. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pipe</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="p">(...</span><span class="nx">funs</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">funs</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">func</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">func</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="nx">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">plusFour</span> <span class="o">=</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">multiplyBySix</span> <span class="o">=</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">*</span> <span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">divideByTwo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">pipe</span><span class="p">(</span><span class="nx">plusFour</span><span class="p">,</span> <span class="nx">multiplyBySix</span><span class="p">,</span> <span class="nx">divideByTwo</span><span class="p">,</span> <span class="nx">multiplyBySix</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">)(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>A: 80</li>
<li>B: 90</li>
<li>C: 100</li>
<li>D: 110</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>The <code>pipe</code> function can receive an unlimited number of arguments/parameters thanks to rest parameter <code>...funcs</code>. These arguments/parameters turn out are function as we call the parent function <code>pipe</code>. In JavaScript, it is quite common to pass a function as a parameter of another function.</p>
<p>Please call these functions, which are passed to <code>pipe</code>, are child functions. They are then looped and executed one by one with <code>reduce</code> method, no matter how many functions you attempt to pass to <code>pipe</code>. <code>v</code> in the code is simply the argument defined in each child function.</p>
<p>So first we have 1, then by executing <code>plusFour</code> it becomes 5. When <code>multiplyBySix</code> is called, the output turns to 30. It becomes 15 when we call <code>divideByTwo</code>. Finally, it becomes 90 as we multiply 15 * 6 when the function <code>multiplyBySix</code> is called again.</p>
<p>So B is the correct answer.</p>
<!-- Credit: https://www.freecodecamp.org/news/pipe-and-compose-in-javascript-5b04004ac937/ -->
<h4 id="answer-b-19">Answer: B</h4>
</p>
</details>
<h3 id="95-whats-the-output-">95. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">quickSortRecursive</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arrayInput</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">arrayInput</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;The input data is not an array&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">arrayInput</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">pivotIndex</span> <span class="o">=</span> <span class="nx">arrayInput</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">arrayInput</span><span class="p">[</span><span class="nx">pivotIndex</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">left</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">right</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">currentItem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pivotIndex</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">currentItem</span> <span class="o">=</span> <span class="nx">arrayInput</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">currentItem</span> <span class="o">&lt;</span> <span class="nx">pivot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">left</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">currentItem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">right</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">currentItem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">[...</span><span class="nx">quickSortRecursive</span><span class="p">(</span><span class="nx">left</span><span class="p">),</span> <span class="nx">pivot</span><span class="p">,</span> <span class="p">...</span><span class="nx">quickSortRecursive</span><span class="p">(</span><span class="nx">right</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">quickSortRecursive</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">]));</span>
</span></span></code></pre></div><ul>
<li>A: [1, 100, 8, 19, 8, 6]</li>
<li>B: [1, 6, 8, 8, 19, 100]</li>
<li>C: [100, 19, 8, 8, 6, 1]</li>
<li>D: 6</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>You might see a commonly used algorithm here in the code challenge called &ldquo;quicksort&rdquo; in which we apply the strategy &ldquo;divide and conquer&rdquo;. We also use the &ldquo;recursive&rdquo; method when we want to recall the function until it meets our expectations. You might also need to know about the &ldquo;rest parameter&rdquo; in JavaScript, as shown by the three dots (&hellip;) above.</p>
<p>The code above helps us to arrange an array in such a way that the value will increase from left to right. Using the quicksort method, we need to create a pivot (likely the first item from right to left or the first item from left to right). First, we divide the original array into two parts: left and right, depending on the value compared to the pivot.</p>
<p>Next, by calling the function recursively, we keep creating new pivots for the right and left arrays created above for the purpose of sorting value.</p>
<p>Finally, the original array is sorted from left to right depending on the value.</p>
<p>So B is the correct answer.</p>
<!-- Credit: https://www.freecodecamp.org/news/pipe-and-compose-in-javascript-5b04004ac937/ -->
<h4 id="answer-b-20">Answer: B</h4>
</p>
</details>
<h3 id="96-whats-the-output-">96. What&rsquo;s the output ?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hasOwn</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">10</span> <span class="p">})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">o</span><span class="p">.</span><span class="nx">property</span> <span class="o">=</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">o</span><span class="p">.</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">o</span><span class="p">.</span><span class="nx">property</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hasOwn</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">])()(</span><span class="mi">10</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>A: 10</li>
<li>B: 20</li>
<li>C: 30</li>
<li>D: 40</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
<p>We have quite trivial nested functions. If you are familiar with the concept of <code>closure</code> in JavaScript, then it is not a big deal to read the code above. The final function, named hasOwn, has three parameters, and when we execute it, we only pass two arguments because we have already defined the default value for the second nested function.</p>
<p>The final result is as <code>o.a + o.property + b</code>, meaning 10 + 20 + 10. So D is the correct answer.</p>
<h4 id="answer-d-35">Answer: D</h4>
</p>
</details>
]]></content:encoded>
    </item>
    
    <item>
      <title>anti DDoS iptables by scriptzteam</title>
      <link>https://shenlong616.github.io/posts/github/anti-ddos-iptables-by-scriptzteam/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/anti-ddos-iptables-by-scriptzteam/</guid>
      <description>There are different ways of building your own anti-DDoS rules for iptables. We will be discussing the most effective iptables DDoS protection methods in this comprehensive tutorial. This guide will teach you how to:
Select the best iptables table and chain to stop DDoS attacksTweak your kernel settings to mitigate the effects of DDoS attacksUse iptables to block most TCP-based DDoS attacksUse iptables SYNPROXY to block SYN floodsPlease note that this article is written for professionals who deal with Linux servers on a daily basis.</description>
      <content:encoded><![CDATA[<p>There are different ways of building your own anti-DDoS rules for iptables. We will be discussing the most effective iptables DDoS protection methods in this comprehensive tutorial.
This guide will teach you how to:</p>
<pre><code>Select the best iptables table and chain to stop DDoS attacks
Tweak your kernel settings to mitigate the effects of DDoS attacks
Use iptables to block most TCP-based DDoS attacks
Use iptables SYNPROXY to block SYN floods
</code></pre>
<p>Please note that this article is written for professionals who deal with Linux servers on a daily basis. If you just want to protect your online application from DDoS attacks, you can use our remote protection, a VPS with DDoS protection or a DDoS protected bare metal server.</p>
<p>While one can do a lot with iptables to block DDoS attacks, there isn&rsquo;t a way around actual hardware firewalls (we recently reviewed RioRey DDoS mitigation hardware) to detect and stop large DDoS floods. However, it isn&rsquo;t impossible to filter most bad traffic at line rate using iptables.</p>
<p>We&rsquo;ll only cover protection from TCP-based attacks. Most UDP-based attacks are amplified reflection attacks that will exhaust the network interface card of any common server. The only mitigation approach that makes sense against these types of attacks is to block them at the edge or core network or even at the carrier already. If they are able to reach your server, there isn&rsquo;t much you can do against those multi-Gbit/s attacks except to move to a DDoS protected network.</p>
<p>anti-DDoS iptables
What Is IPtables?</p>
<p>netfilter iptables (soon to be replaced by nftables) is a user-space command line utility to configure kernel packet filtering rules developed by netfilter. It&rsquo;s the default firewall management utility on Linux systems - everyone working with Linux systems should be familiar with it or have at least heard of it.</p>
<p>iptables can be used to filter certain packets, block source or destination ports and IP addresses, forward packets via NAT and a lot of other things. Most commonly it&rsquo;s used to block destination ports and source IP addresses.
Why Your IPtables Anti-DDoS Rules Suck</p>
<p>To understand why your current iptables rules to prevent DDoS attacks suck, we first have to dig into how iptables works.</p>
<p>iptables is a command line tool used to set up and control the tables of IP packet filter rules. There are different tables for different purposes.
IPtables Tables</p>
<p>Filter: The filter table is the default and most commonly used table that rules go to if you don&rsquo;t use the -t (&ndash;table) option.</p>
<p>Nat: This table is used for Network Address Translation (NAT). If a packet creates a new connection, the nat table gets checked for rules.</p>
<p>Mangle: The mangle table is used to modify or mark packets and their header information.</p>
<p>Raw: This table&rsquo;s purpose is mainly to exclude certain packets from connection tracking using the NOTRACK target.</p>
<p>As you can see there are four different tables on an average Linux system that doesn&rsquo;t have non-standard kernel modules loaded. Each of these tables supports a different set of iptables chains.
IPtables Chains
PREROUTING: raw, nat, mangle</p>
<pre><code>Applies to packets that enter the network interface card (NIC)
</code></pre>
<p>INPUT: filter, mangle</p>
<pre><code>Applies to packets destined to a local socket
</code></pre>
<p>FORWARD: filter, mangle</p>
<pre><code>Applies to packets that are being routed through the server
</code></pre>
<p>OUTPUT: raw, filter, nat, mangle</p>
<pre><code>Applies to packets that the server sends (locally generated)
</code></pre>
<p>POSTROUTING: nat, mangle</p>
<pre><code>Applies to packets that leave the server
</code></pre>
<p>Depending on what kind of packets you want to block or modify, you select a certain iptables table and a chain that the selected table supports.</p>
<p>Of course, we&rsquo;re still missing an explanation of iptables targets (ACCEPT, DROP, REJECT, etc.), but we&rsquo;re assuming that if you&rsquo;re reading this article, you already know how to deal with iptables.</p>
<p>We&rsquo;re going to explain why your iptables rules suck to stop DDoS and not teach you how to use iptables. Let&rsquo;s get back to that.</p>
<p>If you want to block a DDoS attack with iptables, performance of the iptables rules is extremely important. Most TCP-based DDoS attack types use a high packet rate, meaning the sheer number of packets per second is what causes the server to go down. That&rsquo;s why you want to make sure that you can process and block as many packets per second as possible.</p>
<p>You&rsquo;ll find that most if not all guides on how to block DDoS attacks using iptables use the filter table and the INPUT chain for anti-DDoS rules. The issue with this approach is that the INPUT chain is only processed after the PREROUTING and FORWARD chains and therefore only applies if the packet doesn&rsquo;t match any of these two chains.</p>
<p>This causes a delay in the filtering of the packet which consumes resources. In conclusion, to make our rules as effective as possible, we need to move our anti-DDoS rules as far up the chains as possible. The first chain that can apply to a packet is the PREROUTING chain, so ideally we&rsquo;ll want to filter the bad packets in this chain already.</p>
<p>However, the filter table doesn&rsquo;t support the PREROUTING chain. To get around this problem, we can simply use the mangle table instead of the filter table for our anti-DDoS iptables rules. It supports most if not all rules that the filter table supports while also supporting all iptables chains.</p>
<p>So you want to know why your iptables DDoS protection rules suck? It&rsquo;s because you use the filter table and the INPUT chain to block the bad packets! The best solution to dramatically increase the performance of your iptables rules and therefore the amount of (TCP) DDoS attack traffic they can filter is to use the mangle table and the PREROUTING chain!
The Best Linux Kernel Settings to Mitigate DDoS</p>
<p>Another common mistake is that people don&rsquo;t use optimized kernel settings to better mitigate the effects of DDoS attacks. Note that this guide focuses on CentOS 7 as the operating system of choice. CentOS 7 includes a recent version of iptables and support of the new SYNPROXY target.</p>
<p>We won&rsquo;t cover every single kernel setting that you need to adjust in order to better mitigate DDoS with iptables. Instead, we provide a set of CentOS 7 kernel settings that we would use. Just put the below in your /etc/sysctl.conf file and apply the settings with sysctl -p.
Anti-DDoS Kernel Settings (sysctl.conf)</p>
<pre tabindex="0"><code>kernel.printk = 4 4 1 7
kernel.panic = 10
kernel.sysrq = 0
kernel.shmmax = 4294967296
kernel.shmall = 4194304
kernel.core_uses_pid = 1
kernel.msgmnb = 65536
kernel.msgmax = 65536
vm.swappiness = 20
vm.dirty_ratio = 80
vm.dirty_background_ratio = 5
fs.file-max = 2097152
net.core.netdev_max_backlog = 262144
net.core.rmem_default = 31457280
net.core.rmem_max = 67108864
net.core.wmem_default = 31457280
net.core.wmem_max = 67108864
net.core.somaxconn = 65535
net.core.optmem_max = 25165824
net.ipv4.neigh.default.gc_thresh1 = 4096
net.ipv4.neigh.default.gc_thresh2 = 8192
net.ipv4.neigh.default.gc_thresh3 = 16384
net.ipv4.neigh.default.gc_interval = 5
net.ipv4.neigh.default.gc_stale_time = 120
net.netfilter.nf_conntrack_max = 10000000
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.ip_no_pmtu_disc = 1
net.ipv4.route.flush = 1
net.ipv4.route.max_size = 8048576
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_congestion_control = htcp
net.ipv4.tcp_mem = 65536 131072 262144
net.ipv4.udp_mem = 65536 131072 262144
net.ipv4.tcp_rmem = 4096 87380 33554432
net.ipv4.udp_rmem_min = 16384
net.ipv4.tcp_wmem = 4096 87380 33554432
net.ipv4.udp_wmem_min = 16384
net.ipv4.tcp_max_tw_buckets = 1440000
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_max_orphans = 400000
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_ecn = 2
net.ipv4.tcp_fin_timeout = 10
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_keepalive_intvl = 60
net.ipv4.tcp_keepalive_probes = 10
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.ip_forward = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.all.rp_filter = 1
</code></pre><p>These sysctl.conf settings help to maximize the performance of your server under DDoS as well as the effectiveness of the iptables rules that we&rsquo;re going to provide in this guide.
The Actual IPtables Anti-DDoS Rules</p>
<p>Considering you now know that you need to use the mangle table and the PREROUTING chain as well as optimized kernel settings to mitigate the effects of DDoS attacks, we&rsquo;ll now move on to a couple of example rules to mitigate most TCP DDoS attacks.</p>
<p>DDoS attacks are complex. There are many different types of DDoS and it&rsquo;s close to impossible to maintain signature-based rules against all of them. But luckily there is something called connection tracking (nf_conntrack kernel module), which can help us to mitigate almost any TCP-based DDoS attack that doesn&rsquo;t use SYN packets that seem legitimate. This includes all types of ACK and SYN-ACK DDoS attacks as well as DDoS attacks that use bogus TCP flags.</p>
<p>We&rsquo;ll start with just five simple iptables rules that will already drop many TCP-based DDoS attacks.
Block Invalid Packets</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP
</code></pre><p>This rule blocks all packets that are not a SYN packet and don&rsquo;t belong to an established TCP connection.
Block New Packets That Are Not SYN</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
</code></pre><p>This blocks all packets that are new (don&rsquo;t belong to an established connection) and don&rsquo;t use the SYN flag. This rule is similar to the &ldquo;Block Invalid Packets&rdquo; one, but we found that it catches some packets that the other one doesn&rsquo;t.
Block Uncommon MSS Values</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
</code></pre><p>The above iptables rule blocks new packets (only SYN packets can be new packets as per the two previous rules) that use a TCP MSS value that is not common. This helps to block dumb SYN floods.
Block Packets With Bogus TCP Flags</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
</code></pre><p>The above ruleset blocks packets that use bogus TCP flags, ie. TCP flags that legitimate packets wouldn&rsquo;t use.
Block Packets From Private Subnets (Spoofing)</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP
iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP
iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
</code></pre><p>These rules block spoofed packets originating from private (local) subnets. On your public network interface you usually don&rsquo;t want to receive packets from private source IPs. These rules assume that your loopback interface uses the 127.0.0.0/8 IP space.</p>
<p>These five sets of rules alone already block many TCP-based DDoS attacks at very high packet rates. With the kernel settings and rules mentioned above, you&rsquo;ll be able to filter ACK and SYN-ACK attacks at line rate.
Additional Rules</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -p icmp -j DROP
</code></pre><p>This drops all ICMP packets. ICMP is only used to ping a host to find out if it&rsquo;s still alive. Because it&rsquo;s usually not needed and only represents another vulnerability that attackers can exploit, we block all ICMP packets to mitigate Ping of Death (ping flood), ICMP flood and ICMP fragmentation flood.</p>
<pre tabindex="0"><code>iptables -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset
</code></pre><p>This iptables rule helps against connection attacks. It rejects connections from hosts that have more than 80 established connections. If you face any issues you should raise the limit as this could cause troubles with legitimate clients that establish a large number of TCP connections.</p>
<p>iptables -A INPUT -p tcp -m conntrack &ndash;ctstate NEW -m limit &ndash;limit 60/s &ndash;limit-burst 20 -j ACCEPT
iptables -A INPUT -p tcp -m conntrack &ndash;ctstate NEW -j DROP</p>
<p>Limits the new TCP connections that a client can establish per second. This can be useful against connection attacks, but not so much against SYN floods because the usually use an endless amount of different spoofed source IPs.</p>
<pre tabindex="0"><code>iptables -t mangle -A PREROUTING -f -j DROP
</code></pre><p>This rule blocks fragmented packets. Normally you don&rsquo;t need those and blocking fragments will mitigate UDP fragmentation flood. But most of the time UDP fragmentation floods use a high amount of bandwidth that is likely to exhaust the capacity of your network card, which makes this rule optional and probably not the most useful one.</p>
<pre tabindex="0"><code>iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP
</code></pre><p>This limits incoming TCP RST packets to mitigate TCP RST floods. Effectiveness of this rule is questionable.
Mitigating SYN Floods With SYNPROXY</p>
<p>SYNPROXY is a new target of iptables that has been added in Linux kernel version 3.12 and iptables 1.4.21. CentOS 7 backported the feature and it&rsquo;s available in its 3.10 default kernel.</p>
<p>The purpose of SYNPROXY is to check whether the host that sent the SYN packet actually establishes a full TCP connection or just does nothing after it sent the SYN packet. If it does nothing, it discards the packet with minimal performance impact.</p>
<p>While the iptables rules that we provided above already block most TCP-based attacks, the attack type that can still slip through them if sophisticated enough is a SYN flood. It&rsquo;s important to note that the performance of the rules will always be better if we find a certain pattern or signature to block, such as packet length (-m length), TOS (-m tos), TTL (-m ttl) or strings and hex values (-m string and -m u32 for the more advanced users). But in some rare cases that&rsquo;s not possible or at least not easy to achieve. So in these cases, you can make use of SYNPROXY.</p>
<p>Here are iptables SYNPROXY rules that help mitigate SYN floods that bypass our other rules:</p>
<pre tabindex="0"><code>iptables -t raw -D PREROUTING -p tcp -m tcp --syn -j CT --notrack
iptables -D INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460
iptables -D INPUT -m conntrack --ctstate INVALID -j DROP
</code></pre><p>These rules apply to all ports. If you want to use SYNPROXY only on certain TCP ports that are active (recommended - also you should block all TCP ports that are not in use using the mangle table and PREROUTING chain), you can just add &ndash;dport 80 to each of the rules if you want to use SYNPROXY on port 80 only.</p>
<p>To verify that SYNPROXY is working, you can do watch -n1 cat /proc/net/stat/synproxy. If the values change when you establish a new TCP connection to the port you use SYNPROXY on, it works.
The Complete IPtables Anti-DDoS Rules</p>
<p>If you don&rsquo;t want to copy &amp; paste each single rule we discussed in this article, you can use the below ruleset for basic DDoS protection of your Linux server.</p>
<h3 id="drop-invalid-packets">Drop invalid packets</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP
</code></pre><h3 id="drop-tcp-packets-that-are-new-and-are-not-syn">Drop TCP packets that are new and are not SYN</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP
</code></pre><h3 id="drop-syn-packets-with-suspicious-mss-value">Drop SYN packets with suspicious MSS value</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP
</code></pre><h3 id="block-packets-with-bogus-tcp-flags">Block packets with bogus TCP flags</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
</code></pre><h3 id="block-spoofed-packets">Block spoofed packets</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP
/sbin/iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
</code></pre><h3 id="drop-icmp-you-usually-dont-need-this-protocol">Drop ICMP (you usually don&rsquo;t need this protocol)</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -p icmp -j DROP
</code></pre><h3 id="drop-fragments-in-all-chains">Drop fragments in all chains</h3>
<pre tabindex="0"><code>/sbin/iptables -t mangle -A PREROUTING -f -j DROP
</code></pre><h3 id="limit-connections-per-source-ip">Limit connections per source IP</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset
</code></pre><h3 id="limit-rst-packets">Limit RST packets</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP
</code></pre><h3 id="limit-new-tcp-connections-per-second-per-source-ip">Limit new TCP connections per second per source IP</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP
</code></pre><h3 id="use-synproxy-on-all-ports-disables-connection-limiting-rule">Use SYNPROXY on all ports (disables connection limiting rule)</h3>
<pre tabindex="0"><code>#/sbin/iptables -t raw -D PREROUTING -p tcp -m tcp --syn -j CT --notrack
#/sbin/iptables -D INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460
#/sbin/iptables -D INPUT -m conntrack --ctstate INVALID -j DROP
</code></pre><p>Bonus Rules</p>
<p>Here are some more iptables rules that are useful to increase the overall security of a Linux server:</p>
<h3 id="ssh-brute-force-protection">SSH brute-force protection</h3>
<pre tabindex="0"><code>/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set
/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP
</code></pre><h3 id="protection-against-port-scanning">Protection against port scanning</h3>
<pre tabindex="0"><code>/sbin/iptables -N port-scanning
/sbin/iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
/sbin/iptables -A port-scanning -j DROP
</code></pre><h3 id="conclusion">Conclusion</h3>
<p>This tutorial demonstrates some of the most powerful and effective methods to stop DDoS attacks using iptables. We&rsquo;ve successfully mitigated DDoS attacks that peaked at multiple million packets per second using these iptables rules.</p>
<p>Every single guide on the same topic that we had researched provided inefficient methods to stop DDoS traffic or only a very limited number of iptables rules. If used correctly, iptables is an extremely powerful tool that&rsquo;s able to block different types of DDoS attacks at line-rate of 1GigE NICs and close to line-rate of 10GigE NICs. Don&rsquo;t underestimate the power of iptables!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hardened sysctl Configuration by k4yt3x</title>
      <link>https://shenlong616.github.io/posts/github/hardened-sysctl-configuration-by-k4yt3x/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/hardened-sysctl-configuration-by-k4yt3x/</guid>
      <description>This repository hosts my hardened version of sysctl.conf. This configuration file aims to provide better security for Linux systems and improves system performance whenever possible. For example, below are some of the features this configuration file provides.
Prevents kernel pointers from being read Disables Ptrace for all programs Disallows core dumping by SUID/GUID programs Disables IPv4/IPv6 routing Enables BBR TCP congestion control Enables SYN cookies to mitigate SYN flooding attacks Enables IP reverse path filtering for source validation &amp;hellip; Please review the configuration file carefully before applying it.</description>
      <content:encoded><![CDATA[<p>This repository hosts my hardened version of <code>sysctl.conf</code>. This configuration file aims to provide better security for Linux systems and improves system performance whenever possible. For example, below are some of the features this configuration file provides.</p>
<ul>
<li>Prevents kernel pointers from being read</li>
<li>Disables Ptrace for all programs</li>
<li>Disallows core dumping by SUID/GUID programs</li>
<li>Disables IPv4/IPv6 routing</li>
<li>Enables BBR TCP congestion control</li>
<li>Enables SYN cookies to mitigate SYN flooding attacks</li>
<li>Enables IP reverse path filtering for source validation</li>
<li>&hellip;</li>
</ul>
<p><strong>Please review the configuration file carefully before applying it.</strong> You are responsible for actions done to your system. If you need some guidance understanding what each of the settings is for, <a href="https://sysctl-explorer.net/">sysctl-explorer</a> might come in handy. You may also consult <a href="https://www.kernel.org/doc/Documentation/sysctl/">Linux&rsquo;s kernel documentation</a>.</p>
<h2 id="assumptions">Assumptions</h2>
<p>This configuration file is written with a few assumptions about your OS. You can still use this configuration as a template if your OS does not match these assumptions (e.g., set <code>net.ipv4.ip_forward</code> to <code>1</code> on a router). Making these assumptions helps us to develop a configuration file with the most number of optimizations enabled for common systems.</p>
<ul>
<li>Security is valued over performance and convenience</li>
<li>The OS does not act as a router</li>
<li>The OS is running on a 64-bit system</li>
<li>The OS is on a network that is relatively stable (e.g., wired vs. LTE)</li>
<li>No debugging features are required (e.g., no need for GDB/kdump)</li>
<li>ICMP echo messages are not regarded as harmful</li>
</ul>
<h2 id="configuration-deployment">Configuration Deployment</h2>
<p>Linux kernel configuration files are stored in the directory <code>/etc/sysctl.d</code>. Configurations in all files having a suffix of <code>.conf</code> will read by the <code>procps</code> (a.k.a. <code>systemd-sysctl</code>) service. Additionally, the <code>procps</code> service also loads configurations from the following directories.</p>
<ul>
<li><code>/run/sysctl.d</code></li>
<li><code>/usr/local/lib/sysctl.d</code></li>
<li><code>/usr/lib/sysctl.d</code></li>
<li><code>/lib/sysctl.d</code></li>
</ul>
<p>Files are sorted and read by their file names in lexicographic order. Variables read later will overwrite variables read earlier. For example, configurations in <code>20-something.conf</code> will be read before <code>99-sysctl.conf</code>. If a variable exists in both files, values read from <code>20-something.conf</code> will be overwritten by values read from <code>99-sysctl.conf</code>.</p>
<pre tabindex="0"><code class="language-properties" data-lang="properties"># in 20-something.conf
net.ipv4.ip_forward = 0

# in 99-sysctl.conf
net.ipv4.ip_forward = 1

# net.ipv4.ip_forward will be 1
</code></pre><h3 id="method-1-deploy-definitively">Method 1: Deploy Definitively</h3>
<p>By default, on most Linux distributions, the <code>/etc/sysctl.d/99-sysctl.conf</code> file is a link to the <code>/etc/sysctl.conf</code> file. Therefore, you may write the variables into the <code>/etc/sysctl.conf</code>. However, since configuration files with a file name that starts with an alphabetical character sort later in the list than <code>99-sysctl.conf</code>, the changes you make in the <code>/etc/sysctl.conf</code> might not be the final value loaded into the kernel. To make sure that your changes are loaded into the kernel, you would have to make sure that your configuration file&rsquo;s name is lexicographically the last file in <code>/etc/sysctl.d</code>. The filename <code>z-k4yt3x.conf</code> will be used as an example in the code snippet below.</p>
<p>This deployment method is suitable for systems that do not expect to have their sysctl configurations updated from this repository anymore. Otherwise, the configuration file&rsquo;s content has to be updated every time a new update form this repository is installed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># download the configuration file from GitHub using curl</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you may also download with wget or other methods if curl is not available</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move the configuration file into the sysctl configuration directory</span>
</span></span><span class="line"><span class="cl">sudo mv ~/sysctl.conf /etc/sysctl.d/z-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make sure the file has correct ownership and permissions</span>
</span></span><span class="line"><span class="cl">sudo chown root:root /etc/sysctl.d/z-k4yt3x.conf
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">644</span> /etc/sysctl.d/z-k4yt3x.conf
</span></span></code></pre></div><h3 id="method-2-deploy-as-template">Method 2: Deploy as Template</h3>
<p>Alternatively, you can use this configuration file as a template. If you name the configuration file something akin to <code>/etc/sysctl.d/98-k4yt3x.conf</code>, you may overwrite values in this configuration file by giving them a new definition the <code>/etc/sysctl.conf</code> file.</p>
<p>The advantage of doing this is that you would not have to change this template file&rsquo;s content every time it is updated in this repository. You can drop the template file in and make any modifications in <code>/etc/sysctl.conf</code>.</p>
<p>This method&rsquo;s disadvantage is that values from this template might be overwritten by values in other configurations unknowingly. For example, a <code>uhd-usrp2.conf</code> exists on my system, and overwrites the value of <code>net.core.rmem_max</code> and <code>net.core.wmem_max</code> set in previous configuration files. Packages managers can install new configurations as you install a new package or update your system. Therefore, you will have to be careful that other files do not overwrite your variables.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># download the configuration file from GitHub using curl</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you may also download with wget or other methods if curl is not available</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move the configuration file into the sysctl configuration directory</span>
</span></span><span class="line"><span class="cl">sudo mv ~/sysctl.conf /etc/sysctl.d/98-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make sure the file has correct ownership and permissions</span>
</span></span><span class="line"><span class="cl">sudo chown root:root /etc/sysctl.d/98-k4yt3x.conf
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">644</span> /etc/sysctl.d/98-k4yt3x.conf
</span></span></code></pre></div><h3 id="method-3-custom-order-personal-recommendation">Method 3: Custom Order (Personal Recommendation)</h3>
<p>To ensure that the configuration files are read in an order you prefer, you may also rename the files to your preference. For example, you can install this template to <code>/etc/sysctl.d/y-k4yt3x.conf</code>, then make a symbolic link from <code>/etc/sysctl.d/z-sysctl.conf</code> to <code>/etc/sysctl.conf</code>. This ensures that the two files are more likely to be read the last.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># download the configuration file from GitHub using curl</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you may also download with wget or other methods if curl is not available</span>
</span></span><span class="line"><span class="cl">wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># move the configuration file into the sysctl configuration directory</span>
</span></span><span class="line"><span class="cl">sudo mv ~/sysctl.conf /etc/sysctl.d/y-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># make sure the file has correct ownership and permissions</span>
</span></span><span class="line"><span class="cl">sudo chown root:root /etc/sysctl.d/y-k4yt3x.conf
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">644</span> /etc/sysctl.d/y-k4yt3x.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># point z-sysctl.conf to /etc/sysctl.conf</span>
</span></span><span class="line"><span class="cl">sudo ln -s /etc/sysctl.conf /etc/sysctl.d/z-sysctl.conf
</span></span></code></pre></div><h2 id="loading-and-verifying-the-changes">Loading and Verifying the Changes</h2>
<p>For the changes to be effective, you will have to either reboot your machine or reload the configurations using one of the following commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># instruct sysctl to load settings from the configuration file into the live kernel</span>
</span></span><span class="line"><span class="cl"><span class="c1"># this command allows you to see the variables as they are being loaded</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># alternatively, you can restart the systemd-sysctl service on a system that uses systemd</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart systemd-sysctl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># procps is an alias of systemd-sysctl</span>
</span></span><span class="line"><span class="cl"><span class="c1"># restarting either one of procps and systemd-sysctl would work</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart procps
</span></span></code></pre></div><p>Afterwards, you may verify your changes by dumping all kernel variables. Replace <code>your.config</code> in the following command with the name of the variable you would like to check.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo sysctl -a <span class="p">|</span> grep <span class="s2">&#34;your.config&#34;</span>
</span></span></code></pre></div><p>For example, the following command prints the value of <code>kernel.kptr_restrict</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo sysctl -a <span class="p">|</span> grep <span class="s2">&#34;kernel.kptr_restrict&#34;</span>
</span></span><span class="line"><span class="cl">kernel.kptr_restrict <span class="o">=</span> <span class="m">2</span>
</span></span></code></pre></div><h2 id="short-url-for-downloading-sysctlconf">Short URL for Downloading <code>sysctl.conf</code></h2>
<p>For convenience, I have pointed the URL <code>https://k4t.io/sysctl</code> to the <code>sysctl.conf</code> file. You may therefore download the <code>sysctl.conf</code> file with the following command. However, be sure to check the file&rsquo;s integrity after downloading it if you choose to download using this method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -L k4t.io/sysctl -o sysctl.conf
</span></span></code></pre></div><h2 id="others">Others</h2>
<ol>
<li><a href="../../files/sysctl.conf">sysctl.conf</a></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git tips</title>
      <link>https://shenlong616.github.io/posts/github/git-tips/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/git-tips/</guid>
      <description>Most commonly used git tips and tricks.</description>
      <content:encoded><![CDATA[<h2 id="tools">Tools</h2>
<ul>
<li><a href="https://www.npmjs.com/package/git-tip">git-tip</a> - A handy CLI to make optimum use of these tips. (<a href="https://github.com/djoudi5/docker-git-tip">Here in Docker container</a>)</li>
</ul>
<p>P.S: All these commands are tested on <code>git version 2.7.4 (Apple Git-66)</code>.</p>
<!-- @doxie.inject start toc -->
<!-- Don’t remove or change the comment above – that can break automatic updates. -->
<!-- Don’t remove or change the comment below – that can break automatic updates. More info at <http://npm.im/doxie.inject>. -->
<!-- @doxie.inject end toc -->
<!-- @doxie.inject start -->
<!-- Don’t remove or change the comment above – that can break automatic updates. -->
<h2 id="everyday-git-in-twenty-commands-or-so">Everyday Git in twenty commands or so</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git <span class="nb">help</span> everyday
</span></span></code></pre></div><h2 id="show-helpful-guides-that-come-with-git">Show helpful guides that come with Git</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git <span class="nb">help</span> -g
</span></span></code></pre></div><h2 id="search-change-by-content">Search change by content</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log -S<span class="s1">&#39;&lt;a term in the source&gt;&#39;</span>
</span></span></code></pre></div><h2 id="show-changes-over-time-for-specific-file">Show changes over time for specific file</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log -p &lt;file_name&gt;
</span></span></code></pre></div><h2 id="remove-sensitive-data-from-history-after-a-push">Remove sensitive data from history, after a push</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git filter-branch --force --index-filter <span class="s1">&#39;git rm --cached --ignore-unmatch &lt;path-to-your-file&gt;&#39;</span> --prune-empty --tag-name-filter cat -- --all <span class="o">&amp;&amp;</span> git push origin --force --all
</span></span></code></pre></div><h2 id="sync-with-remote-overwrite-local-changes">Sync with remote, overwrite local changes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch origin <span class="o">&amp;&amp;</span> git reset --hard origin/master <span class="o">&amp;&amp;</span> git clean -f -d
</span></span></code></pre></div><h2 id="list-of-all-files-till-a-commit">List of all files till a commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-tree --name-only -r &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="git-reset-first-commit">Git reset first commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-ref -d HEAD
</span></span></code></pre></div><h2 id="reset-preserve-uncommitted-local-changes">Reset: preserve uncommitted local changes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset --keep &lt;commit&gt;
</span></span></code></pre></div><h2 id="list-all-the-conflicted-files">List all the conflicted files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --name-only --diff-filter<span class="o">=</span>U
</span></span></code></pre></div><h2 id="list-of-all-files-changed-in-a-commit">List of all files changed in a commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff-tree --no-commit-id --name-only -r &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="unstaged-changes-since-last-commit">Unstaged changes since last commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff
</span></span></code></pre></div><h2 id="changes-staged-for-commit">Changes staged for commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --cached
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --staged
</span></span></code></pre></div><h2 id="show-both-staged-and-unstaged-changes">Show both staged and unstaged changes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff HEAD
</span></span></code></pre></div><h2 id="list-all-branches-that-are-already-merged-into-master">List all branches that are already merged into master</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch --merged master
</span></span></code></pre></div><h2 id="quickly-switch-to-the-previous-branch">Quickly switch to the previous branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout @<span class="o">{</span>-1<span class="o">}</span>
</span></span></code></pre></div><h2 id="remove-branches-that-have-already-been-merged-with-master">Remove branches that have already been merged with master</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch --merged master <span class="p">|</span> grep -v <span class="s1">&#39;^\*&#39;</span> <span class="p">|</span> xargs -n <span class="m">1</span> git branch -d
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch --merged master <span class="p">|</span> grep -v <span class="s1">&#39;^\*\|  master&#39;</span> <span class="p">|</span> xargs -n <span class="m">1</span> git branch -d <span class="c1"># will not delete master if master is not checked out</span>
</span></span></code></pre></div><h2 id="list-all-branches-and-their-upstreams-as-well-as-last-commit-on-branch">List all branches and their upstreams, as well as last commit on branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -vv
</span></span></code></pre></div><h2 id="track-upstream-branch">Track upstream branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -u origin/mybranch
</span></span></code></pre></div><h2 id="delete-local-branch">Delete local branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -d &lt;local_branchname&gt;
</span></span></code></pre></div><h2 id="delete-remote-branch">Delete remote branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin --delete &lt;remote_branchname&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin :&lt;remote_branchname&gt;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -dr &lt;remote/branch&gt;
</span></span></code></pre></div><h2 id="create-local-tag">Create local tag</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag &lt;tag-name&gt;
</span></span></code></pre></div><h2 id="delete-local-tag">Delete local tag</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag -d &lt;tag-name&gt;
</span></span></code></pre></div><h2 id="delete-remote-tag">Delete remote tag</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin :refs/tags/&lt;tag-name&gt;
</span></span></code></pre></div><h2 id="undo-local-changes-with-the-last-content-in-head">Undo local changes with the last content in head</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -- &lt;file_name&gt;
</span></span></code></pre></div><h2 id="revert-undo-a-commit-by-creating-a-new-commit">Revert: Undo a commit by creating a new commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git revert &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="reset-discard-commits-advised-for-private-branch">Reset: Discard commits, advised for private branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="reword-the-previous-commit-message">Reword the previous commit message</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit -v --amend
</span></span></code></pre></div><h2 id="see-commit-history-for-just-the-current-branch">See commit history for just the current branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git cherry -v master
</span></span></code></pre></div><h2 id="amend-author">Amend author.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --amend --author<span class="o">=</span><span class="s1">&#39;Author Name &lt;email@address.com&gt;&#39;</span>
</span></span></code></pre></div><h2 id="reset-author-after-author-has-been-changed-in-the-global-config">Reset author, after author has been changed in the global config.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --amend --reset-author --no-edit
</span></span></code></pre></div><h2 id="changing-a-remotes-url">Changing a remote&rsquo;s URL</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote set-url origin &lt;URL&gt;
</span></span></code></pre></div><h2 id="get-list-of-all-remote-references">Get list of all remote references</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote show
</span></span></code></pre></div><h2 id="get-list-of-all-local-and-remote-branches">Get list of all local and remote branches</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -a
</span></span></code></pre></div><h2 id="get-only-remote-branches">Get only remote branches</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -r
</span></span></code></pre></div><h2 id="stage-parts-of-a-changed-file-instead-of-the-entire-file">Stage parts of a changed file, instead of the entire file</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git add -p
</span></span></code></pre></div><h2 id="get-git-bash-completion">Get git bash completion</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">curl -L http://git.io/vfhol &gt; ~/.git-completion.bash <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">&#39;[ -f ~/.git-completion.bash ] &amp;&amp; . ~/.git-completion.bash&#39;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></div><h2 id="what-changed-since-two-weeks">What changed since two weeks?</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --no-merges --raw --since<span class="o">=</span><span class="s1">&#39;2 weeks ago&#39;</span>
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git whatchanged --since<span class="o">=</span><span class="s1">&#39;2 weeks ago&#39;</span>
</span></span></code></pre></div><h2 id="see-all-commits-made-since-forking-from-master">See all commits made since forking from master</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --no-merges --stat --reverse master..
</span></span></code></pre></div><h2 id="pick-commits-across-branches-using-cherry-pick">Pick commits across branches using cherry-pick</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;branch-name&gt; <span class="o">&amp;&amp;</span> git cherry-pick &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="find-out-branches-containing-commit-hash">Find out branches containing commit-hash</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -a --contains &lt;commit-ish&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch --contains &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="git-aliases">Git Aliases</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global alias.&lt;handle&gt; &lt;command&gt;
</span></span><span class="line"><span class="cl">git config --global alias.st status
</span></span></code></pre></div><h2 id="saving-current-state-of-tracked-files-without-commiting">Saving current state of tracked files without commiting</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push
</span></span></code></pre></div><h2 id="saving-current-state-of-unstaged-changes-to-tracked-files">Saving current state of unstaged changes to tracked files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash -k
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash --keep-index
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push --keep-index
</span></span></code></pre></div><h2 id="saving-current-state-including-untracked-files">Saving current state including untracked files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash -u
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push -u
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push --include-untracked
</span></span></code></pre></div><h2 id="saving-current-state-with-message">Saving current state with message</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push -m &lt;message&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push --message &lt;message&gt;
</span></span></code></pre></div><h2 id="saving-current-state-of-all-files-ignored-untracked-and-tracked">Saving current state of all files (ignored, untracked, and tracked)</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash -a
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash --all
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash push --all
</span></span></code></pre></div><h2 id="show-list-of-all-saved-stashes">Show list of all saved stashes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash list
</span></span></code></pre></div><h2 id="show-the-contents-of-any-stash-in-patch-form">Show the contents of any stash in patch form</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash show -p &lt;stash@<span class="o">{</span>n<span class="o">}</span>&gt;
</span></span></code></pre></div><h2 id="apply-any-stash-without-deleting-from-the-stashed-list">Apply any stash without deleting from the stashed list</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash apply &lt;stash@<span class="o">{</span>n<span class="o">}</span>&gt;
</span></span></code></pre></div><h2 id="apply-last-stashed-state-and-delete-it-from-stashed-list">Apply last stashed state and delete it from stashed list</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash pop
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash apply stash@<span class="o">{</span>0<span class="o">}</span> <span class="o">&amp;&amp;</span> git stash drop stash@<span class="o">{</span>0<span class="o">}</span>
</span></span></code></pre></div><h2 id="delete-all-stored-stashes">Delete all stored stashes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash clear
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git stash drop &lt;stash@<span class="o">{</span>n<span class="o">}</span>&gt;
</span></span></code></pre></div><h2 id="grab-a-single-file-from-a-stash">Grab a single file from a stash</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;stash@<span class="o">{</span>n<span class="o">}</span>&gt; -- &lt;file_path&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout stash@<span class="o">{</span>0<span class="o">}</span> -- &lt;file_path&gt;
</span></span></code></pre></div><h2 id="show-all-tracked-files">Show all tracked files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files -t
</span></span></code></pre></div><h2 id="show-all-untracked-files">Show all untracked files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files --others
</span></span></code></pre></div><h2 id="show-all-ignored-files">Show all ignored files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files --others -i --exclude-standard
</span></span></code></pre></div><h2 id="create-new-working-tree-from-a-repository-git-25">Create new working tree from a repository (git 2.5)</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git worktree add -b &lt;branch-name&gt; &lt;path&gt; &lt;start-point&gt;
</span></span></code></pre></div><h2 id="create-new-working-tree-from-head-state">Create new working tree from HEAD state</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git worktree add --detach &lt;path&gt; HEAD
</span></span></code></pre></div><h2 id="untrack-files-without-deleting">Untrack files without deleting</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rm --cached &lt;file_path&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rm --cached -r &lt;directory_path&gt;
</span></span></code></pre></div><h2 id="before-deleting-untracked-filesdirectory-do-a-dry-run-to-get-the-list-of-these-filesdirectories">Before deleting untracked files/directory, do a dry run to get the list of these files/directories</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean -n
</span></span></code></pre></div><h2 id="forcefully-remove-untracked-files">Forcefully remove untracked files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean -f
</span></span></code></pre></div><h2 id="forcefully-remove-untracked-directory">Forcefully remove untracked directory</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean -f -d
</span></span></code></pre></div><h2 id="update-all-the-submodules">Update all the submodules</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git submodule foreach git pull
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git submodule update --init --recursive
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git submodule update --remote
</span></span></code></pre></div><h2 id="show-all-commits-in-the-current-branch-yet-to-be-merged-to-master">Show all commits in the current branch yet to be merged to master</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git cherry -v master
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git cherry -v master &lt;branch-to-be-merged&gt;
</span></span></code></pre></div><h2 id="rename-a-branch">Rename a branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -m &lt;new-branch-name&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -m <span class="o">[</span>&lt;old-branch-name&gt;<span class="o">]</span> &lt;new-branch-name&gt;
</span></span></code></pre></div><h2 id="rebases-feature-to-master-and-merges-it-in-to-master">Rebases &lsquo;feature&rsquo; to &lsquo;master&rsquo; and merges it in to master</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rebase master feature <span class="o">&amp;&amp;</span> git checkout master <span class="o">&amp;&amp;</span> git merge -
</span></span></code></pre></div><h2 id="archive-the-master-branch">Archive the <code>master</code> branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git archive master --format<span class="o">=</span>zip --output<span class="o">=</span>master.zip
</span></span></code></pre></div><h2 id="modify-previous-commit-without-modifying-the-commit-message">Modify previous commit without modifying the commit message</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git add --all <span class="o">&amp;&amp;</span> git commit --amend --no-edit
</span></span></code></pre></div><h2 id="prunes-references-to-remove-branches-that-have-been-deleted-in-the-remote">Prunes references to remove branches that have been deleted in the remote.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch -p
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote prune origin
</span></span></code></pre></div><h2 id="delete-local-branches-that-has-been-squash-and-merged-in-the-remote">Delete local branches that has been squash and merged in the remote.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch -vv <span class="p">|</span> grep <span class="s1">&#39;: gone]&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{print &lt;!-- @doxie.inject start --&gt;}&#39;</span> <span class="p">|</span> xargs git branch -D
</span></span></code></pre></div><h2 id="retrieve-the-commit-hash-of-the-initial-revision">Retrieve the commit hash of the initial revision.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> git rev-list --reverse HEAD <span class="p">|</span> head -1
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rev-list --max-parents<span class="o">=</span><span class="m">0</span> HEAD
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --pretty<span class="o">=</span>oneline <span class="p">|</span> tail -1 <span class="p">|</span> cut -c 1-40
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --pretty<span class="o">=</span>oneline --reverse <span class="p">|</span> head -1 <span class="p">|</span> cut -c 1-40
</span></span></code></pre></div><h2 id="visualize-the-version-tree">Visualize the version tree.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --pretty<span class="o">=</span>oneline --graph --decorate --all
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gitk --all
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --graph --pretty<span class="o">=</span>format:<span class="s1">&#39;%C(auto) %h | %s | %an | %ar%d&#39;</span>
</span></span></code></pre></div><h2 id="visualize-the-tree-including-commits-that-are-only-referenced-from-reflogs">Visualize the tree including commits that are only referenced from reflogs</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --graph --decorate --oneline <span class="k">$(</span>git rev-list --walk-reflogs --all<span class="k">)</span>
</span></span></code></pre></div><h2 id="deploying-git-tracked-subfolder-to-gh-pages">Deploying git tracked subfolder to gh-pages</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git subtree push --prefix subfolder_name origin gh-pages
</span></span></code></pre></div><h2 id="adding-a-project-to-repo-using-subtree">Adding a project to repo using subtree</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git subtree add --prefix<span class="o">=</span>&lt;directory_name&gt;/&lt;project_name&gt; --squash git@github.com:&lt;username&gt;/&lt;project_name&gt;.git master
</span></span></code></pre></div><h2 id="get-latest-changes-in-your-repo-for-a-linked-project-using-subtree">Get latest changes in your repo for a linked project using subtree</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git subtree pull --prefix<span class="o">=</span>&lt;directory_name&gt;/&lt;project_name&gt; --squash git@github.com:&lt;username&gt;/&lt;project_name&gt;.git master
</span></span></code></pre></div><h2 id="export-a-branch-with-history-to-a-file">Export a branch with history to a file.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git bundle create &lt;file&gt; &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="import-from-a-bundle">Import from a bundle</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="get-the-name-of-current-branch">Get the name of current branch.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rev-parse --abbrev-ref HEAD
</span></span></code></pre></div><h2 id="ignore-one-file-on-commit-eg-changelog">Ignore one file on commit (e.g. Changelog).</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-index --assume-unchanged Changelog<span class="p">;</span> git commit -a<span class="p">;</span> git update-index --no-assume-unchanged Changelog
</span></span></code></pre></div><h2 id="stash-changes-before-rebasing">Stash changes before rebasing</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rebase --autostash
</span></span></code></pre></div><h2 id="fetch-pull-request-by-id-to-a-local-branch">Fetch pull request by ID to a local branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git pull origin pull/&lt;id&gt;/head:&lt;branch-name&gt;
</span></span></code></pre></div><h2 id="show-the-most-recent-tag-on-the-current-branch">Show the most recent tag on the current branch.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git describe --tags --abbrev<span class="o">=</span><span class="m">0</span>
</span></span></code></pre></div><h2 id="show-inline-word-diff">Show inline word diff.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --word-diff
</span></span></code></pre></div><h2 id="show-changes-using-common-diff-tools">Show changes using common diff tools.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git difftool <span class="o">[</span>-t &lt;tool&gt;<span class="o">]</span> &lt;commit1&gt; &lt;commit2&gt; &lt;path&gt;
</span></span></code></pre></div><h2 id="dont-consider-changes-for-tracked-file">Don’t consider changes for tracked file.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-index --assume-unchanged &lt;file_name&gt;
</span></span></code></pre></div><h2 id="undo-assume-unchanged">Undo assume-unchanged.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git update-index --no-assume-unchanged &lt;file_name&gt;
</span></span></code></pre></div><h2 id="clean-the-files-from-gitignore">Clean the files from <code>.gitignore</code>.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean -X -f
</span></span></code></pre></div><h2 id="restore-deleted-file">Restore deleted file.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;deleting_commit&gt; -- &lt;file_path&gt;
</span></span></code></pre></div><h2 id="restore-file-to-a-specific-commit-hash">Restore file to a specific commit-hash</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;commit-ish&gt; -- &lt;file_path&gt;
</span></span></code></pre></div><h2 id="always-rebase-instead-of-merge-on-pull">Always rebase instead of merge on pull.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global pull.rebase <span class="nb">true</span>
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1">#git &lt; 1.7.9</span>
</span></span><span class="line"><span class="cl">git config --global branch.autosetuprebase always
</span></span></code></pre></div><h2 id="list-all-the-alias-and-configs">List all the alias and configs.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --list
</span></span></code></pre></div><h2 id="make-git-case-sensitive">Make git case sensitive.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global core.ignorecase <span class="nb">false</span>
</span></span></code></pre></div><h2 id="add-custom-editors">Add custom editors.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global core.editor <span class="s1">&#39;$EDITOR&#39;</span>
</span></span></code></pre></div><h2 id="auto-correct-typos">Auto correct typos.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global help.autocorrect <span class="m">1</span>
</span></span></code></pre></div><h2 id="check-if-the-change-was-a-part-of-a-release">Check if the change was a part of a release.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git name-rev --name-only &lt;SHA-1&gt;
</span></span></code></pre></div><h2 id="dry-run-any-command-that-supports-dry-run-flag-should-do">Dry run. (any command that supports dry-run flag should do.)</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clean -fd --dry-run
</span></span></code></pre></div><h2 id="marks-your-commit-as-a-fix-of-a-previous-commit">Marks your commit as a fix of a previous commit.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --fixup &lt;SHA-1&gt;
</span></span></code></pre></div><h2 id="squash-fixup-commits-normal-commits">Squash fixup commits normal commits.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rebase -i --autosquash
</span></span></code></pre></div><h2 id="skip-staging-area-during-commit">Skip staging area during commit.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --only &lt;file_path&gt;
</span></span></code></pre></div><h2 id="interactive-staging">Interactive staging.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git add -i
</span></span></code></pre></div><h2 id="list-ignored-files">List ignored files.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git check-ignore *
</span></span></code></pre></div><h2 id="status-of-ignored-files">Status of ignored files.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git status --ignored
</span></span></code></pre></div><h2 id="commits-in-branch1-that-are-not-in-branch2">Commits in Branch1 that are not in Branch2</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log Branch1 ^Branch2
</span></span></code></pre></div><h2 id="list-n-last-commits">List n last commits</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log -&lt;n&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log -n &lt;n&gt;
</span></span></code></pre></div><h2 id="reuse-recorded-resolution-record-and-reuse-previous-conflicts-resolutions">Reuse recorded resolution, record and reuse previous conflicts resolutions.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global rerere.enabled <span class="m">1</span>
</span></span></code></pre></div><h2 id="open-all-conflicted-files-in-an-editor">Open all conflicted files in an editor.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --name-only <span class="p">|</span> uniq <span class="p">|</span> xargs <span class="nv">$EDITOR</span>
</span></span></code></pre></div><h2 id="count-unpacked-number-of-objects-and-their-disk-consumption">Count unpacked number of objects and their disk consumption.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git count-objects --human-readable
</span></span></code></pre></div><h2 id="prune-all-unreachable-objects-from-the-object-database">Prune all unreachable objects from the object database.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git gc --prune<span class="o">=</span>now --aggressive
</span></span></code></pre></div><h2 id="instantly-browse-your-working-repository-in-gitweb">Instantly browse your working repository in gitweb.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git instaweb <span class="o">[</span>--local<span class="o">]</span> <span class="o">[</span>--httpd<span class="o">=</span>&lt;httpd&gt;<span class="o">]</span> <span class="o">[</span>--port<span class="o">=</span>&lt;port&gt;<span class="o">]</span> <span class="o">[</span>--browser<span class="o">=</span>&lt;browser&gt;<span class="o">]</span>
</span></span></code></pre></div><h2 id="view-the-gpg-signatures-in-the-commit-log">View the GPG signatures in the commit log</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --show-signature
</span></span></code></pre></div><h2 id="remove-entry-in-the-global-config">Remove entry in the global config.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global --unset &lt;entry-name&gt;
</span></span></code></pre></div><h2 id="checkout-a-new-branch-without-any-history">Checkout a new branch without any history</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout --orphan &lt;branch_name&gt;
</span></span></code></pre></div><h2 id="extract-file-from-another-branch">Extract file from another branch.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git show &lt;branch_name&gt;:&lt;file_name&gt;
</span></span></code></pre></div><h2 id="list-only-the-root-and-merge-commits">List only the root and merge commits.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --first-parent
</span></span></code></pre></div><h2 id="change-previous-two-commits-with-an-interactive-rebase">Change previous two commits with an interactive rebase.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rebase --interactive HEAD~2
</span></span></code></pre></div><h2 id="list-all-branch-is-wip">List all branch is WIP</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout master <span class="o">&amp;&amp;</span> git branch --no-merged
</span></span></code></pre></div><h2 id="find-guilty-with-binary-search">Find guilty with binary search</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git bisect start                    <span class="c1"># Search start</span>
</span></span><span class="line"><span class="cl">git bisect bad                      <span class="c1"># Set point to bad commit</span>
</span></span><span class="line"><span class="cl">git bisect good v2.6.13-rc2         <span class="c1"># Set point to good commit|tag</span>
</span></span><span class="line"><span class="cl">git bisect bad                      <span class="c1"># Say current state is bad</span>
</span></span><span class="line"><span class="cl">git bisect good                     <span class="c1"># Say current state is good</span>
</span></span><span class="line"><span class="cl">git bisect reset                    <span class="c1"># Finish search</span>
</span></span></code></pre></div><h2 id="bypass-pre-commit-and-commit-msg-githooks">Bypass pre-commit and commit-msg githooks</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git commit --no-verify
</span></span></code></pre></div><h2 id="list-commits-and-changes-to-a-specific-file-even-through-renaming">List commits and changes to a specific file (even through renaming)</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --follow -p -- &lt;file_path&gt;
</span></span></code></pre></div><h2 id="clone-a-single-branch">Clone a single branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git
</span></span></code></pre></div><h2 id="create-and-switch-new-branch">Create and switch new branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout -b &lt;branch-name&gt;
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch &lt;branch-name&gt; <span class="o">&amp;&amp;</span> git checkout &lt;branch-name&gt;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git switch -c &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="ignore-file-mode-changes-on-commits">Ignore file mode changes on commits</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config core.fileMode <span class="nb">false</span>
</span></span></code></pre></div><h2 id="turn-off-git-colored-terminal-output">Turn off git colored terminal output</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global color.ui <span class="nb">false</span>
</span></span></code></pre></div><h2 id="specific-color-settings">Specific color settings</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global &lt;specific <span class="nb">command</span> e.g branch, diff&gt; &lt;true, <span class="nb">false</span> or always&gt;
</span></span></code></pre></div><h2 id="show-all-local-branches-ordered-by-recent-commits">Show all local branches ordered by recent commits</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git <span class="k">for</span>-each-ref --sort<span class="o">=</span>-committerdate --format<span class="o">=</span><span class="s1">&#39;%(refname:short)&#39;</span> refs/heads/
</span></span></code></pre></div><h2 id="find-lines-matching-the-pattern-regex-or-string-in-tracked-files">Find lines matching the pattern (regex or string) in tracked files</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git grep --heading --line-number <span class="s1">&#39;foo bar&#39;</span>
</span></span></code></pre></div><h2 id="clone-a-shallow-copy-of-a-repository">Clone a shallow copy of a repository</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git clone https://github.com/user/repo.git --depth <span class="m">1</span>
</span></span></code></pre></div><h2 id="search-commit-log-across-all-branches-for-given-text">Search Commit log across all branches for given text</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --all --grep<span class="o">=</span><span class="s1">&#39;&lt;given-text&gt;&#39;</span>
</span></span></code></pre></div><h2 id="get-first-commit-in-a-branch-from-master">Get first commit in a branch (from master)</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --oneline master..&lt;branch-name&gt; <span class="p">|</span> tail -1
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --reverse master..&lt;branch-name&gt; <span class="p">|</span> head -6
</span></span></code></pre></div><h2 id="unstaging-staged-file">Unstaging Staged file</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset HEAD &lt;file-name&gt;
</span></span></code></pre></div><h2 id="force-push-to-remote-repository">Force push to Remote Repository</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push -f &lt;remote-name&gt; &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="adding-remote-name">Adding Remote name</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote add &lt;remote-nickname&gt; &lt;remote-url&gt;
</span></span></code></pre></div><h2 id="list-all-currently-configured-remotes">List all currently configured remotes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git remote -v
</span></span></code></pre></div><h2 id="show-the-author-time-and-last-revision-made-to-each-line-of-a-given-file">Show the author, time and last revision made to each line of a given file</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git blame &lt;file-name&gt;
</span></span></code></pre></div><h2 id="group-commits-by-authors-and-title">Group commits by authors and title</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git shortlog
</span></span></code></pre></div><h2 id="forced-push-but-still-ensure-you-dont-overwrite-others-work">Forced push but still ensure you don&rsquo;t overwrite other&rsquo;s work</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push --force-with-lease &lt;remote-name&gt; &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="show-how-many-lines-does-an-author-contribute">Show how many lines does an author contribute</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --author<span class="o">=</span><span class="s1">&#39;_Your_Name_Here_&#39;</span> --pretty<span class="o">=</span>tformat: --numstat <span class="p">|</span> gawk <span class="s1">&#39;{ add += &lt;!-- @doxie.inject start --&gt;; subs += &lt;!-- @doxie.inject end --&gt;; loc += &lt;!-- @doxie.inject start --&gt; - &lt;!-- @doxie.inject end --&gt; } END { printf &#34;added lines: %s removed lines: %s total lines: %s
</span></span></span><span class="line"><span class="cl"><span class="s1">&#34;, add, subs, loc }&#39;</span> -
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --author<span class="o">=</span><span class="s1">&#39;_Your_Name_Here_&#39;</span> --pretty<span class="o">=</span>tformat: --numstat <span class="p">|</span> awk <span class="s1">&#39;{ add += &lt;!-- @doxie.inject start --&gt;; subs += &lt;!-- @doxie.inject end --&gt;; loc += &lt;!-- @doxie.inject start --&gt; - &lt;!-- @doxie.inject end --&gt; } END { printf &#34;added lines: %s, removed lines: %s, total lines: %s
</span></span></span><span class="line"><span class="cl"><span class="s1">&#34;, add, subs, loc }&#39;</span> - <span class="c1"># on Mac OSX</span>
</span></span></code></pre></div><h2 id="revert-reverting-an-entire-merge">Revert: Reverting an entire merge</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git revert -m <span class="m">1</span> &lt;commit-ish&gt;
</span></span></code></pre></div><h2 id="number-of-commits-in-a-branch">Number of commits in a branch</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rev-list --count &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="alias-git-undo">Alias: git undo</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global alias.undo <span class="s1">&#39;!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f&#39;</span>
</span></span></code></pre></div><h2 id="add-object-notes">Add object notes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git notes add -m <span class="s1">&#39;Note on the previous commit....&#39;</span>
</span></span></code></pre></div><h2 id="show-all-the-git-notes">Show all the git-notes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --show-notes<span class="o">=</span><span class="s1">&#39;*&#39;</span>
</span></span></code></pre></div><h2 id="apply-commit-from-another-repository">Apply commit from another repository</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git --git-dir<span class="o">=</span>&lt;source-dir&gt;/.git format-patch -k -1 --stdout &lt;SHA1&gt; <span class="p">|</span> git am -3 -k
</span></span></code></pre></div><h2 id="specific-fetch-reference">Specific fetch reference</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git fetch origin master:refs/remotes/origin/mymaster
</span></span></code></pre></div><h2 id="find-common-ancestor-of-two-branches">Find common ancestor of two branches</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git merge-base &lt;branch-name&gt; &lt;other-branch-name&gt;
</span></span></code></pre></div><h2 id="list-unpushed-git-commits">List unpushed git commits</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --branches --not --remotes
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log @<span class="o">{</span>u<span class="o">}</span>..
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git cherry -v
</span></span></code></pre></div><h2 id="add-everything-but-whitespace-changes">Add everything, but whitespace changes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git diff --ignore-all-space <span class="p">|</span> git apply --cached
</span></span></code></pre></div><h2 id="edit-localglobal-git-config">Edit [local/global] git config</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config <span class="o">[</span>--global<span class="o">]</span> --edit
</span></span></code></pre></div><h2 id="blame-on-certain-range">blame on certain range</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git blame -L &lt;start&gt;,&lt;end&gt;
</span></span></code></pre></div><h2 id="show-a-git-logical-variable">Show a Git logical variable.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git var -l <span class="p">|</span> &lt;variable&gt;
</span></span></code></pre></div><h2 id="preformatted-patch-file">Preformatted patch file.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git format-patch -M upstream..topic
</span></span></code></pre></div><h2 id="get-the-repo-name">Get the repo name.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rev-parse --show-toplevel
</span></span></code></pre></div><h2 id="logs-between-date-range">logs between date range</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --since<span class="o">=</span><span class="s1">&#39;FEB 1 2017&#39;</span> --until<span class="o">=</span><span class="s1">&#39;FEB 14 2017&#39;</span>
</span></span></code></pre></div><h2 id="exclude-author-from-logs">Exclude author from logs</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log --perl-regexp --author<span class="o">=</span><span class="err">&#39;</span>^<span class="o">((</span>?!excluded-author-regex<span class="o">)</span>.*<span class="o">)</span>
</span></span></code></pre></div><h2 id="generates-a-summary-of-pending-changes">Generates a summary of pending changes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git request-pull v1.0 https://git.ko.xz/project master:for-linus
</span></span></code></pre></div><h2 id="list-references-in-a-remote-repository">List references in a remote repository</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-remote git://git.kernel.org/pub/scm/git/git.git
</span></span></code></pre></div><h2 id="backup-untracked-files">Backup untracked files.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git ls-files --others -i --exclude-standard <span class="p">|</span> xargs zip untracked.zip
</span></span></code></pre></div><h2 id="list-all-git-aliases">List all git aliases</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config -l <span class="p">|</span> grep <span class="nb">alias</span> <span class="p">|</span> sed <span class="s1">&#39;s/^alias\.//g&#39;</span>
</span></span></code></pre></div><p><strong>Alternatives:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config -l <span class="p">|</span> grep <span class="nb">alias</span> <span class="p">|</span> cut -d <span class="s1">&#39;.&#39;</span> -f <span class="m">2</span>
</span></span></code></pre></div><h2 id="show-git-status-short">Show git status short</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git status --short --branch
</span></span></code></pre></div><h2 id="checkout-a-commit-prior-to-a-day-ago">Checkout a commit prior to a day ago</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout master@<span class="o">{</span>yesterday<span class="o">}</span>
</span></span></code></pre></div><h2 id="push-the-current-branch-to-the-same-name-on-the-remote-repository">Push the current branch to the same name on the remote repository</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push origin HEAD
</span></span></code></pre></div><h2 id="push-a-new-local-branch-to-remote-repository-and-track">Push a new local branch to remote repository and track</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git push -u origin &lt;branch_name&gt;
</span></span></code></pre></div><h2 id="change-a-branch-base">Change a branch base</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git rebase --onto &lt;new_base&gt; &lt;old_base&gt;
</span></span></code></pre></div><h2 id="use-ssh-instead-of-https-for-remotes">Use SSH instead of HTTPs for remotes</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global url.<span class="s1">&#39;git@github.com:&#39;</span>.insteadOf <span class="s1">&#39;https://github.com/&#39;</span>
</span></span></code></pre></div><h2 id="update-a-submodule-to-the-latest-commit">Update a submodule to the latest commit</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">cd</span> &lt;path-to-submodule&gt;
</span></span><span class="line"><span class="cl">git pull origin &lt;branch&gt;
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> &lt;root-of-your-main-project&gt;
</span></span><span class="line"><span class="cl">git add &lt;path-to-submodule&gt;
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;submodule updated&#34;</span>
</span></span></code></pre></div><h2 id="prevent-auto-replacing-lf-with-crlf">Prevent auto replacing LF with CRLF</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git config --global core.autocrlf <span class="nb">false</span>
</span></span></code></pre></div><!-- Don’t remove or change the comment below – that can break automatic updates. More info at <http://npm.im/doxie.inject>. -->
<!-- @doxie.inject end -->
]]></content:encoded>
    </item>
    
    <item>
      <title>JavaScript tips &amp; tricks by TuanNguyen2504</title>
      <link>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-tuannguyen2504/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-tuannguyen2504/</guid>
      <description>This is a collection of JavaScript tips and tricks. you can refer to it and apply it to make your code more concise. But don’t overdo it, it can make your code difficult to read and maintain. Hope everyone contributes, thanks.</description>
      <content:encoded><![CDATA[<!-- logo -->
<div align="center" width="100%" height="100%">
  <img  src="../../images/javascript-tips-and-tricks-by-tuannguyen2504.jpg" />
</div>
<!-- Tips for array -->
<h1 id="array">Array</h1>
<details >
  <summary>
    1. Generate an Array
  </summary>
<ul>
<li>
<p>Create an empty array of length <strong><code>n</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: arr = [undefined, undefined, undefined]
</span></span></span></code></pre></div></li>
<li>
<p>Create an empty array of length <strong><code>n</code></strong> &amp; fill value <strong><code>x</code></strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">1</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">  result: arr = [1, 1, 1]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr2 = [1, 1, 1, undefined, undefined]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></li>
<li>
<p>Create an array containing <code>0...n</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[...</span><span class="nb">Array</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="mi">5</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: arr = [0, 1, 2, 3, 4]
</span></span></span></code></pre></div></li>
<li>
<p>Create an array containing <code>1...n</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr4</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">({</span> <span class="nx">length</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">  result: arr =  [1, 2, 3, 4]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr2 = [1, 2, 3, 4]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr3 = [0, 2, 4, 6]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr4 = [0.211, 0.5123, 0.612, 0.8921]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></li>
</ul>
</details>
<details >
  <summary>
    2. Extract Unique Values of Array
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">arr</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: newArr = [1, 2, 3, 5, 4]
</span></span></span></code></pre></div></details>
<details >
  <summary>
    3. Shuffle Elements from Array
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: newArr = [3, 1, 2, 4, 5]
</span></span></span></code></pre></div></details>
<details >
  <summary>
    4. Flatten a Multidimensional Array
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="mi">7</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">newArr</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(...</span><span class="nx">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: [1, 2, 3, 4, 5, 6, 7]
</span></span></span></code></pre></div></details>
<details >
  <summary>
    5. Resize an Array
  </summary>
<blockquote>
<p>The length array isn&rsquo;t a read only property.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">arr2</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">arr3</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  result: arr = [1, 2]
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr2 = []
</span></span></span><span class="line"><span class="cl"><span class="cm">          arr3 = [1, 2, 3, 4, 5, undefined, undefined]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></details>
<details >
  <summary>
    6. Random an Item in Array
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)];</span>
</span></span></code></pre></div></details>
<details >
  <summary>
    7. Remove an Item from Array
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Not Recommended
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">delete</span> <span class="nx">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// arr = [1, undefined, 3], length = 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Recommended
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// arr = [1, 3], length = 2
</span></span></span></code></pre></div></details>
<h1 id="object">Object</h1>
<details >
  <summary>
    1. Dynamic Property Name
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">dynamic</span> <span class="o">=</span> <span class="s2">&#34;age&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">dynamicValue</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nx">dynamic</span><span class="p">]</span><span class="o">:</span> <span class="nx">dynamicValue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: obj = { name: &#39;Dyno&#39;, age: 18 }
</span></span></span></code></pre></div></details>
<details >
  <summary>
    2. Clone an Object
  </summary>
<ul>
<li>
<p>Shallow copy <code>(Not Recommended)</code></p>
<blockquote>
<p>Use the <code>=</code> operator to copy object 1 into object 2. These 2 objects point to the same memory area <code>(reference)</code>. Therefore, if we change object 1, object 2 will also change.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nx">obj1</span><span class="p">;</span> <span class="c1">// obj2 = { a: 1, b: 2 }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// change value of a property
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// { a: 3, b: 2 }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { a: 3, b: 2 } =&gt; property a of obj2 changed 🙂❗
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj3</span><span class="p">);</span> <span class="c1">// { a: 3, b: 2 } =&gt; property a of obj2 changed 🙂❗
</span></span></span></code></pre></div></li>
<li>
<p>Deep copy</p>
<blockquote>
<p><strong>Way 1</strong>: Use Spread operator <code>{...}</code> or <code>Object.assign()</code> to fix &ldquo;Shallow copy&rdquo;. <strong><em>Issue:</em></strong> <code>Nested objects</code> still have shallow copy problem.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="p">{</span> <span class="nx">nested</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">obj1</span> <span class="p">};</span> <span class="c1">// obj2 = { a: 1, b: 2, c: { nested: 3 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">obj1</span><span class="p">);</span> <span class="c1">// obj3 = { a: 1, b: 2, c: { nested: 3 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">nested</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// { a: 1, b: 3, c: { nested: 4 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { a: 1, b: 2, c: { nested: 4 } } 🙂
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj3</span><span class="p">);</span> <span class="c1">// { a: 1, b: 2, c: { nested: 4 } } 🙂
</span></span></span></code></pre></div><blockquote>
<p><strong>Way 2 <code>(Recommended)</code></strong>: Use <code>JSON.stringify()</code> &amp; <code>JSON.parse()</code> to solve the above problems.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="p">{</span> <span class="nx">nested</span><span class="o">:</span> <span class="mi">3</span> <span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj1</span><span class="p">));</span> <span class="c1">// obj2 = { a: 1, b: 2, c: { nested: 3 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj1</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">nested</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj1</span><span class="p">);</span> <span class="c1">// { a: 1, b: 3, c: { nested: 4 } }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span> <span class="c1">// { a: 1, b: 2, c: { nested: 3 } } 😉😘
</span></span></span></code></pre></div></li>
</ul>
</details>
<h1 id="destructuring-es6">Destructuring (ES6+)</h1>
<details>
  <summary>
    1. With Array
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = 3;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, c = 3
</span></span></span><span class="line"><span class="cl"><span class="c1">// ignore values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">rest</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, rest = [4, 5]
</span></span></span><span class="line"><span class="cl"><span class="c1">// use &#34;rest params ES6&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = undefined;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = 0;
</span></span></span><span class="line"><span class="cl"><span class="c1">// declare and set default value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">[</span><span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">],</span> <span class="nx">e</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var a = 1, b = 2, c = 3, d = 4, e = 5
</span></span></span><span class="line"><span class="cl"><span class="c1">// nested array destructuring
</span></span></span></code></pre></div></details>
<details>
  <summary>
    2. With Object
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var name = person.name, age = person.age;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Anonymous&#34;</span><span class="p">,</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">address</span> <span class="o">=</span> <span class="s2">&#34;HCM city&#34;</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var name = person.name, age = person.age, address: &#39;HCM city&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1">// declare and set default value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="nx">personName</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="nx">personAge</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: var personName =  person.name, personAge = person.age
</span></span></span><span class="line"><span class="cl"><span class="c1">// decleare and change variable name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: console.log({ name: name, age: age })
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">infor</span><span class="o">:</span> <span class="p">{</span> <span class="nx">address</span><span class="o">:</span> <span class="s2">&#34;HCM&#34;</span><span class="p">,</span> <span class="nx">phone</span><span class="o">:</span> <span class="s2">&#34;123&#34;</span> <span class="p">}</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">infor</span><span class="o">:</span> <span class="p">{</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">phone</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// same: name = person.name, age = person.agem, address = person.infor.address, phone = person.infor.phone
</span></span></span><span class="line"><span class="cl"><span class="c1">// nested object destructuring
</span></span></span></code></pre></div></details>
<h1 id="operator">Operator</h1>
<details>
  <summary>
    1. Optional chaining (?.)
  </summary>
<blockquote>
<p>&ldquo;The optional chaining operator <code>?.</code> enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.&rdquo; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">MDN</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">sayHello</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ❗ Wrong way
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span> <span class="c1">// ❌ Uncaught TypeError: Cannot read property &#39;address&#39; of undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ✅ Right way (check condition)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span> <span class="c1">// Not log
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ✅ Right way (use ?.)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span> <span class="c1">// undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Optional chaining with function calls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">sayHello</span><span class="o">?</span><span class="p">.());</span> <span class="c1">// Hello
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">callPhone</span><span class="o">?</span><span class="p">.());</span> <span class="c1">// undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// A chain Optional chaining
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">infor</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="o">?</span><span class="p">.</span><span class="nx">province</span><span class="o">?</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// undefined
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span><span class="p">.</span><span class="nx">val</span><span class="o">?</span><span class="p">.</span><span class="nx">prop</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">val</span><span class="o">?</span><span class="p">.[</span><span class="nx">expr</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">arr</span><span class="o">?</span><span class="p">.[</span><span class="nx">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">func</span><span class="o">?</span><span class="p">.(</span><span class="nx">args</span><span class="p">);</span>
</span></span></code></pre></div></details>
<details>
  <summary>
    2. Nullish coalescing operator (??)
  </summary>
<blockquote>
<p>&ldquo;The nullish coalescing operator <code>??</code> is a logical operator that returns its right-hand side operand when its left-hand side operand is <code>null</code> or <code>undefined</code>, and otherwise returns its left-hand side operand.&rdquo; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">MDN</a></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">null</span> <span class="o">??</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = &#39;Default&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">false</span> <span class="o">??</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = false
</span></span></span></code></pre></div></details>
<details>
  <summary>
    3. Logical OR (||)
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">||</span> <span class="nx">b</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Dyno&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: Dyno
</span></span></span></code></pre></div><blockquote>
<p>The OR operator <code>||</code> is a logical operator that returns its right-hand side operand when its left-hand side operand is <code>falsy</code>, and otherwise returns its left-hand side operand.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">null</span> <span class="o">||</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = &#39;Default&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">false</span> <span class="o">||</span> <span class="s2">&#34;Default&#34;</span><span class="p">;</span> <span class="c1">// a = &#39;Default&#39;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    4. Logical AND (&&)
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">b</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">c</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">b</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span> <span class="c1">// Hello (a, b = true)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Dyno&#34;</span><span class="p">);</span> <span class="c1">// not log (c = false)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// other usage
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hi&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">&amp;&amp;</span> <span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">c</span> <span class="o">&amp;&amp;</span> <span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// false
</span></span></span></code></pre></div></details>
<details>
  <summary>
    5. Double tilde operator (~~)
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mf">2.6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">~~</span><span class="nx">num</span><span class="p">);</span> <span class="c1">// 2 = Math.floor(2)
</span></span></span></code></pre></div></details>
<details>
  <summary>
    6. Logical Assignment Operator ES12  (||=, ??=) 
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">||=</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">// same a = a || b;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">a</span> <span class="o">??=</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">// same a = a ?? b;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    7. Numeric separator ES12 (_)
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">1_000_000_000</span><span class="p">;</span> <span class="c1">// same: n = 1000000000;
</span></span></span></code></pre></div></details>
<h1 id="comparison">Comparison</h1>
<details>
  <summary>
    1. Use === instead of ==
  </summary>
<blockquote>
<p>The operator <code>== (!=)</code> will automatically cast if 2 variables are not of the same type, then compare. The <code>=== (!==)</code> operator compares the value and the type =&gt; <code>===</code> faster than <code>==</code>.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="mi">1</span> <span class="o">==</span> <span class="s1">&#39;1&#39;</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="mi">1</span> <span class="o">===</span> <span class="s1">&#39;1&#39;</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="mi">0</span> <span class="o">==</span> <span class="kc">false</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="mi">0</span> <span class="o">===</span> <span class="kc">false</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;&#39;</span> <span class="o">==</span> <span class="kc">false</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="kc">false</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="p">[]</span> <span class="o">==</span> <span class="mi">0</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">[]</span> <span class="o">===</span> <span class="mi">0</span> <span class="c1">// false
</span></span></span></code></pre></div></details>
<details>
  <summary>
    2. The difference between isNaN() and Number.isNaN() 
  </summary>
<blockquote>
<p>The <code>isNaN()</code> method (is Not a Number ?) use to check if a variable is <strong>a Number</strong>. The <code>Number.isNaN()</code> (is NaN ?) method use to check if a variable is <strong>NaN</strong></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, &#39;string&#39; is not Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">([]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, [] is not Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">(</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, 0/0 is not Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">isNaN</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// false, 1 is Number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="s2">&#34;string&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// false, &#39;string&#39; is not NaN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">([]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// false, [] is not NaN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true, 0/0 is NaN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// true
</span></span></span></code></pre></div></details>
<h1 id="others">Others</h1>
<details>
  <summary>
    1. Swapping use Destructuring
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">b</span><span class="p">,</span> <span class="nx">a</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: a = 2, b = 1;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    2. Create function that returns only 1 object
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">({</span> <span class="nx">obj</span><span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  same: const fn = () =&gt; {
</span></span></span><span class="line"><span class="cl"><span class="cm">    return { obj: 1 }
</span></span></span><span class="line"><span class="cl"><span class="cm">  }
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div></details>
<details>
  <summary>
    3. Immediately Invoked Function Expression (IIFE)
  </summary>
<blockquote>
<p>The function will execute automatically when you create it.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="c1">// Way 1:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">()(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">})();</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// result: Hello, res = true;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Way 2:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">})();</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// result: Hello, res = true;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    4. typeof vs instanceof 
  </summary>
<blockquote>
<p><code>typeof</code>: return a string that represents the primitive type of a variable.</p>
</blockquote>
<blockquote>
<p><code>instanceof</code>: check in all the prototypes chain the constructor it returns true if it’s found and false if not.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arr</span><span class="p">);</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">typeof</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &#34;number&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">NaN</span><span class="p">;</span> <span class="c1">// &#34;number&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="s2">&#34;str&#34;</span><span class="p">;</span> <span class="c1">// &#34;string&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// &#34;boolean&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="p">{};</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="p">[];</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// &#34;object&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kc">undefined</span><span class="p">;</span> <span class="c1">// &#34;undefined&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typeof</span> <span class="kd">function</span> <span class="nx">name</span><span class="p">()</span> <span class="p">{};</span> <span class="c1">// &#34;function&#34;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    5. Falsy
  </summary>
<blockquote>
<p>A <code>Falsy value</code> is a value that is considered false when encountered in a Boolean context . <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">MDN</a></p>
</blockquote>
<blockquote>
<p>Complete list of JavaScript falsy values <code> false, 0, -0, 0n, &quot;&quot;, '', ``, NaN, null, undefined, document.all</code></p>
</blockquote>
<blockquote>
<p>Falsy value bypass the if block. Ex:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Falsy&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="s2">&#34;Falsy&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: Falsy, a = &#34;Falsy&#34;
</span></span></span></code></pre></div><blockquote>
<p>Filter out Falsy values</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">,</span> <span class="mi">2000</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">filteredArr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// result: filteredArr = [1, &#34;Dyno&#34;, true, 2000]
</span></span></span></code></pre></div></details>
<details>
  <summary>
    6. Template string `${}`
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Dyno&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hello1</span> <span class="o">=</span> <span class="s2">&#34;Hello &#34;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&#34;, how are you?&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hello2</span> <span class="o">=</span> <span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, how are you?`</span><span class="p">;</span> <span class="c1">// template string.
</span></span></span></code></pre></div></details>
<details>
  <summary>
    7. Rounding number to n decimal place
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mf">25.0420001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// &#34;number&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">num</span> <span class="o">=</span> <span class="nx">num</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// num = &#34;25.04&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">num</span><span class="p">);</span> <span class="c1">// ❗ &#34;string&#34;
</span></span></span></code></pre></div></details>
<details>
  <summary>
    8. Check variable - convert a variable to Boolean (!! operator)
  </summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!!</span><span class="kc">null</span><span class="p">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!!</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">!!</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div></details>
]]></content:encoded>
    </item>
    
    <item>
      <title>JavaScript for Everyone by Asabeneh</title>
      <link>https://shenlong616.github.io/posts/github/javascript-for-everyone-by-asabeneh/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/javascript-for-everyone-by-asabeneh/</guid>
      <description>A step by step guide to learn JavaScript and programming</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p><strong><em>JavaScript for Everyone</em></strong> is a guide for both beginners and advanced JavaScript developers. Welcome to JavaScript. <strong><em>Congratulations</em></strong> for deciding to learn JavaScript, the language of the browser.</p>
<p>In this step by step tutorial, you will learn JavaScript, the most popular programming language in the history of mankind.
You use JavaScript <strong><em>to add interactivity to websites, to develop mobile apps, desktop applications, games</em></strong> and nowadays JavaScript can be used for <strong><em>machine learning</em></strong> and <strong><em>AI</em></strong>.
<strong><em>JavaScript (JS)</em></strong> has increased in popularity in recent years and has been the leading
programming language for four consecutive years and is the most used programming language on
Github.</p>
<h2 id="setup">Setup</h2>
<p>First thing first, lets install text or code editor. Install code editor, it could be <a href="https://code.visualstudio.com/">vscode</a>, <a href="https://atom.io/">atom</a>, <a href="http://brackets.io/">bracket</a>, <a href="https://notepad-plus-plus.org/">notepad++</a> or others. I recommend vscode.
Install either <a href="https://www.google.com/chrome/">Chrome</a> or <a href="https://www.mozilla.org/en-US/firefox/new/?v=b">Firefox</a> if you didn&rsquo;t have yet.</p>
<p>If you want help, you may join the <a href="https://t.me/JavaScriptforEveryone">telegram</a> channel.</p>
<h2 id="requirements">Requirements</h2>
<p>No prior knowledge of programming is required to follow this guide. You need only:</p>
<ol>
<li>Motivation</li>
<li>Computer</li>
<li>Internet</li>
<li>Browser</li>
<li>Code Editor</li>
</ol>
<h2 id="setup-1">Setup</h2>
<p>I believe you have the motivation and a strong desire to be a developer, computer and Internet. If you have those, then you have everything.</p>
<h3 id="install-nodejs">Install Node.js</h3>
<p>You may not need it right now but you may need it for later. Install <a href="https://nodejs.org/en/">node.js</a>.</p>
<p><img loading="lazy" src="../../images/1/download_node.png" alt="Node download"  />
</p>
<p>After downloading double click and install</p>
<p><img loading="lazy" src="../../images/1/install_node.png" alt="Install node"  />
</p>
<p>We can check if node is installed in our local machine by opening our device terminal or command prompt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">asabeneh $ node -v
</span></span><span class="line"><span class="cl">v12.14.0
</span></span></code></pre></div><p>I am using node version 12.14.0, which is the recommended version of node.</p>
<h3 id="browser">Browser</h3>
<p>There are many browsers out there. However, I strongly recommend Google Chrome.</p>
<h4 id="installing-google-chrome">Installing Google Chrome</h4>
<p>Install <a href="https://www.google.com/chrome/">google chrome</a> if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.</p>
<p><img loading="lazy" src="../../images/1/google_chrome.png" alt="Google Chrome"  />
</p>
<h4 id="opening-google-chrome-console">Opening Google Chrome Console</h4>
<p>You can open Google Chrome either by clicking three dots at the top right corner of the Chrome browser or using a shortcut. I prefer using shortcuts.</p>
<p><img loading="lazy" src="../../images/1/opening_developer_tool.png" alt="Opening chrome"  />
</p>
<p>To open the Chrome console using a short cut.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Mac
</span></span><span class="line"><span class="cl">Command+Option+I
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Windows:
</span></span><span class="line"><span class="cl">Ctl+Shift+I
</span></span></code></pre></div><p><img loading="lazy" src="../../images/1/opening_chrome_console_shortcut.png" alt="Opening console"  />
</p>
<p>After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console part. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code.
Let us write a JavaScript code on the Google Chrome console:</p>
<p><img loading="lazy" src="../../images/1/js_code_on_chrome_console.png" alt="write code on console"  />
</p>
<h4 id="writing-code-on-browser-console">Writing Code on browser Console</h4>
<p>We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Mac
</span></span><span class="line"><span class="cl">Command+Option+I
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Windows:
</span></span><span class="line"><span class="cl">Ctl+Shift+I
</span></span></code></pre></div><h5 id="consolelog">Console.log</h5>
<p>To write our first JavaScript code, we used a builtin function <strong>console.log()</strong>. We passed an argument as input data, and the function displays the output. We passed &lsquo;Hello, World&rsquo; as input data or argument in the console.log() function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello, World!&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h5 id="consolelog-with-multiple-arguments">Console.log with multiple arguments</h5>
<p>The console.log(param1, param2, param3), can take multiple arguments.</p>
<p><img loading="lazy" src="../../images/1/console_log_multipl_arguments.png" alt="console log multiple arguments"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">,</span> <span class="s2">&#34;World&#34;</span><span class="p">,</span> <span class="s2">&#34;!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;HAPPY&#34;</span><span class="p">,</span> <span class="s2">&#34;NEW&#34;</span><span class="p">,</span> <span class="s2">&#34;YEAR&#34;</span><span class="p">,</span> <span class="mi">2020</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Welcome&#34;</span><span class="p">,</span> <span class="s2">&#34;to&#34;</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="s2">&#34;Days&#34;</span><span class="p">,</span> <span class="s2">&#34;Of&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p>As you can see from the above snippet code, <em>console.log()</em> can take multiple arguments.</p>
<p>Congratulations! You wrote your first JavaScript code using <em>console.log()</em>.</p>
<h5 id="comment">Comment</h5>
<p>We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code. Any text starts with // in JavaScript is a comment or anything enclose like this /* */ is a comment.</p>
<p><strong>Example: Single Line Comment</strong></p>
<p>// This is the first comment<br>
// This is the second comment<br>
// I am a single line comment</p>
<p><strong>Example: Multiline Comment</strong></p>
<p>/_
This is a multiline comment<br>
Multiline comments can take multiple lines<br>
JavaScript is the language of the web<br>
_/</p>
<h5 id="syntax">Syntax</h5>
<p>JavaScript is a programming language. As a result, it has its syntax like other programming languages. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.</p>
<p><img loading="lazy" src="../../images/1/raising_syntax_error.png" alt="Error"  />
</p>
<p>I made a deliberate mistake. As a result, the console raises a syntax error. Actually, the syntax is very informative. It informs what type of mistake we made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello, World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello, World!&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p>So far, we saw how to display text using a <em>console.log()</em>. If we are printing text or string using <em>console.log()</em>, the text has to be under the single, double, or backtick.
<strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello, World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello, World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello, World!`</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="arithmetics">Arithmetics</h4>
<p>Now, let us practice more writing JavaScript codes using <em>console.log()</em> on google chrome console for number data types.
In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations.</p>
<p><img loading="lazy" src="../../images/1/arithmetic.png" alt="Arithmetic"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// Addition
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// Subtraction
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// Multiplication
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// Division
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">%</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// Modulus - finding remainder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">**</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// Exponential
</span></span></span></code></pre></div><h3 id="code-editor">Code Editor</h3>
<p>We can write our codes on the browser console, but it won&rsquo;t be for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days python JavaScript challenge, we will use visual studio code.</p>
<h4 id="installing-visual-studio-code">Installing Visual Studio Code</h4>
<p>Visual studio code is a very popular open-source text editor. I would recommend to <a href="https://code.visualstudio.com/">download</a> visual studio code, but if you are in favor of other editors, feel free to follow with what you have.</p>
<p><img loading="lazy" src="../../images/1/vscode.png" alt="Vscode"  />
</p>
<p>If you installed visual studio code, let us start using it.</p>
<h4 id="how-to-use-visual-studio-code">How to use visual studio code</h4>
<p>Open the visual studio code by double-clicking the visual studio icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.</p>
<p><img loading="lazy" src="../../images/1/vscode_ui.png" alt="Vscode ui"  />
</p>
<p><img loading="lazy" src="../../images/1/adding_project_to_vscode.png" alt="Vscode add project"  />
</p>
<p><img loading="lazy" src="../../images/1/opening_project_on_vscode.png" alt="Vscode open project"  />
</p>
<p><img loading="lazy" src="../../images/1/scripts_on_vscode.png" alt="script file"  />
</p>
<p><img loading="lazy" src="../../images/1/running_script.png" alt="running script"  />
</p>
<p><img loading="lazy" src="../../images/1/launched_on_new_tab.png" alt="coding running"  />
</p>
<h3 id="adding-javascript-to-a-web-page">Adding JavaScript to a web page</h3>
<p>JavaScript can be added to a web page in three ways:</p>
<ul>
<li><strong><em>Inline script</em></strong></li>
<li><strong><em>Internal script</em></strong></li>
<li><strong><em>External script</em></strong></li>
</ul>
<p>The following sections show different ways of adding JavaScript code to your web page.</p>
<h4 id="inline-script">Inline Script</h4>
<p>Create a folder on your desktop or in any location and create an <strong><em>index.html</em></strong> file in your folder. Then paste the following code and open it in a browser, either in <a href="https://www.google.com/chrome/">Chrome</a> or <a href="https://www.mozilla.org/en-US/firefox/new/?v=b">Firefox</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript for Everyone<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onclick</span><span class="o">=</span><span class="s">&#34;alert(&#39;Welcome to JavaScript!&#39;);&#34;</span><span class="p">&gt;</span>Click Me<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h4 id="internal-script">Internal script</h4>
<p>Internal script can be written in the <em>head</em> or the <em>body</em> but it is preferred to put it on the body of the html document.</p>
<ul>
<li>Internal script at the head</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript for Everyone<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Welcome to JavaScript for Everyone&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><ul>
<li>Internal script at the body</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript for Everyone<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Welcome to JavaScript for Everyone&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h4 id="external-script">External script</h4>
<p>The external script link can be on the head or body but it is preferred to put it in the body.</p>
<ul>
<li>External script at the head</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript for Everyone<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;introduction.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">&lt;</span>/html
</span></span></code></pre></div><ul>
<li>External script at the body</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript for Everyone<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      //it could be in the header or in the body
</span></span><span class="line"><span class="cl">      // Here is the recommended place to put the script
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;introduction.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">&lt;</span>/html
</span></span></code></pre></div><h3 id="exercisessetting-up-your-machine">Exercises:Setting Up your machine</h3>
<h2 id="variables">Variables</h2>
<p>Variables are <em>containers</em> of data. Variables <em>store</em> data in a memory location. When a variable is declared a memory location is reserved and when it is assigned to a value, the memory space will be filled. To declare a variable we use, <em>var</em>, <em>let</em> or <em>const</em> key words. For a variable which changes at different time we use <em>let</em> but if the data doesn&rsquo;t change at all we use <em>const</em>. For example PI, country name, gravity.</p>
<ul>
<li>A JavaScript variable name shouldn&rsquo;t begin with a number</li>
<li>A JavaScript variable name does not allow special characters except dollar sign and underscore.</li>
<li>A JavaScript variable name follow a camelCase convention.</li>
<li>A JavaScript variable name shouldn&rsquo;t have space between words. The following are valid examples of JavaScript variables.</li>
</ul>
<p>Valid variables in JavaScript:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">capitalCity</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">isMarried</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">first_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">last_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">is_married</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">capital_city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">num1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">num_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">_num_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">$num1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">year2019</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">year_2019</span><span class="p">;</span>
</span></span></code></pre></div><p>Camel case(camelCase) or the first way of declaring is conventional in JavaScript. In this material, camelCase variables will be used.</p>
<p>Invalid variable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">  first-name
</span></span><span class="line"><span class="cl">  1_num
</span></span><span class="line"><span class="cl">  num_#_1
</span></span></code></pre></div><p>Declaring variables</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Declaring different variables of different data types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span> <span class="c1">// first name of a person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">;</span> <span class="c1">// last name of a person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span> <span class="c1">// country
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">;</span> <span class="c1">// capital city
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// age in years
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isMarried</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">isMarried</span><span class="p">);</span> <span class="c1">// Asabeneh, Yetayeh, Finland, Helsinki, 100, True
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Declaring variables with number values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">gravity</span> <span class="o">=</span> <span class="mf">9.81</span><span class="p">;</span> <span class="c1">// earth gravity  in m/s2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">boilingPoint</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// water boiling point, temperature in oC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span> <span class="c1">// geometrical constant
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">gravity</span><span class="p">,</span> <span class="nx">boilingPoint</span><span class="p">,</span> <span class="nx">PI</span><span class="p">);</span> <span class="c1">// 9.81, 100, 3.14
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Variables can also be declaring in one line separated by comma
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="c1">//name of a person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">job</span> <span class="o">=</span> <span class="s2">&#34;teacher&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">live</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">job</span><span class="p">,</span> <span class="nx">live</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="exercise---1--variables">Exercise - 1 : Variables</h3>
<ol>
<li>
<p>Declare four variables without assigning values</p>
</li>
<li>
<p>Declare four variables with assigning values</p>
</li>
<li>
<p>Declare variables to store your first name, last name, marital status, country and age in multiple lines</p>
</li>
<li>
<p>Declare variables to store your first name, last name, marital status, country and age in a single line</p>
</li>
<li>
<p>Declare two variables <em>myAge</em> and <em>yourAge</em> and assign them initial values and log to browser console.
Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">I am <span class="m">25</span> years old.
</span></span><span class="line"><span class="cl">You are <span class="m">30</span> years old.
</span></span></code></pre></div></li>
</ol>
<h2 id="comments">Comments</h2>
<p>Commenting in JavaScript is similar to other programming languages. Comments can help to make code more readable.
There are two ways of commenting:</p>
<ul>
<li><em>Single line commenting</em></li>
<li><em>Multiline commenting</em></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// let firstName = &#39;Asabeneh&#39;; single line comment
</span></span></span><span class="line"><span class="cl"><span class="c1">// let lastName = &#39;Yetayeh&#39;; single line comment
</span></span></span></code></pre></div><p>Multiline commenting:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    let location = &#39;Helsinki&#39;;
</span></span></span><span class="line"><span class="cl"><span class="cm">    let age = 100;
</span></span></span><span class="line"><span class="cl"><span class="cm">    let isMarried = true;
</span></span></span><span class="line"><span class="cl"><span class="cm">    This is a Multiple line comment
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span></code></pre></div><h3 id="exercise-comments">Exercise: Comments</h3>
<ol>
<li>Write a single line comment which says, <em>comments can make code readable</em></li>
<li>Write a multiline comment which says, <em>comments can make code readable, easy to use</em>
<em>and informative</em></li>
</ol>
<h2 id="data-types">Data types</h2>
<p>In the previous section, we mentioned a little bit about data types. Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two</p>
<ol>
<li>Primitive data types</li>
<li>Non-primitive data types(Object References)</li>
</ol>
<h3 id="primitive-data-types">Primitive Data Types</h3>
<p>Primitive data types in JavaScript includes:</p>
<ol>
<li>Numbers - Integers, floats</li>
<li>Strings - Any data under single or double quote</li>
<li>Booleans - true or false value</li>
<li>Null - empty value or no value</li>
<li>Undefined - a declared variable without a value</li>
</ol>
<p>Non-primitive data types in JavaScript includes:</p>
<ol>
<li>Objects</li>
<li>Functions</li>
<li>Arrays</li>
</ol>
<p>Now, let us see what exactly mean primitive and non-primitive data types.
<em>Primitive</em> data types are immutable(non-modifiable) data types. Once a primitive data type is created we can not modify it.
<strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">word</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>If we try to modify the string stored in variable <em>word</em>, JavaScript will raise an error. Any data type under a single quote, double-quote, or backtick is a string data type.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;Y&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>This expression does not change the string stored in the variable <em>word</em>. So, we can say that strings are not modifiable or immutable.
Primitive data types are compared by its values. Let us compare different data values. See the example below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numOne</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numTwo</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numOne</span> <span class="o">==</span> <span class="nx">numTwo</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">js</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">py</span> <span class="o">=</span> <span class="s2">&#34;Python&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">js</span> <span class="o">==</span> <span class="nx">py</span><span class="p">);</span> <span class="c1">//false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lightOn</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lightOff</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lightOn</span> <span class="o">==</span> <span class="nx">lightOff</span><span class="p">);</span> <span class="c1">// false
</span></span></span></code></pre></div><h3 id="non-primitive-data-types">Non-Primitive Data Types</h3>
<p><em>Non-primitive</em> data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created.
Let us see by creating an array. An array is a list of data values in a square bracket. Arrays can contain the same or different data types. Array values are referenced by their index. In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span> <span class="c1">// [10, 2, 3]
</span></span></span></code></pre></div><p>As you can see, an array in which a non-primitive data type is mutable. Non-primitive data types can not be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span> <span class="o">==</span> <span class="nx">numbers</span><span class="p">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">userOne</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;teaching&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="o">:</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">userTwo</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;teaching&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="o">:</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">userOne</span> <span class="o">==</span> <span class="nx">userTwo</span><span class="p">);</span> <span class="c1">// false
</span></span></span></code></pre></div><p>Rule of thumb, we do not compare non-primitive data types. Do not compare array, function, or object.
Non-primitive values are referred to as reference types because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span> <span class="o">==</span> <span class="nx">numbers</span><span class="p">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">userOne</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;teaching&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="o">:</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">userTwo</span> <span class="o">=</span> <span class="nx">userOne</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">userOne</span> <span class="o">==</span> <span class="nx">userTwo</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div><p>If you have a hard time understanding the difference between primitive data types and non-primitive data types, you are not the only one. Calm down and just go to the next section and try to come back after some time. Now let us start the data types by number type.</p>
<h2 id="numbers">Numbers</h2>
<p>Numbers are integers and decimal values which can do all the arithmetic operations.
Lets&rsquo; see some examples of Numbers.</p>
<h3 id="declaring-number-data-types">Declaring number data types</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">35</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">gravity</span> <span class="o">=</span> <span class="mf">9.81</span><span class="p">;</span> <span class="c1">//we use const for non-changing values, gravitational constant in  m/s2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">mass</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span> <span class="c1">// mass in Kilogram
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span> <span class="c1">// pi a geometrical constant
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//More Examples
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">boilingPoint</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// temperature in oC, boiling point of water which is a constant
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">bodyTemp</span> <span class="o">=</span> <span class="mi">37</span><span class="p">;</span> <span class="c1">// oC average human body temperature, which is a constant
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">,</span> <span class="nx">gravity</span><span class="p">,</span> <span class="nx">mass</span><span class="p">,</span> <span class="nx">PI</span><span class="p">,</span> <span class="nx">boilingPoint</span><span class="p">,</span> <span class="nx">bodyTemp</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="math-object">Math Object</h3>
<p>In JavaScript the Math Object provides a lots of methods to work with numbers.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">PI</span><span class="p">);</span> <span class="c1">// 3.141592653589793
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Rounding to the closest number
</span></span></span><span class="line"><span class="cl"><span class="c1">// if above .5 up if less 0.5 down rounding
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">PI</span><span class="p">));</span> <span class="c1">// 3 to round values to the nearest number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="mf">9.81</span><span class="p">));</span> <span class="c1">// 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">PI</span><span class="p">));</span> <span class="c1">// 3 rounding down
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">PI</span><span class="p">));</span> <span class="c1">// 4 rounding up
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// -5, returns the minimum value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// 20, returns the maximum value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">randNum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span> <span class="c1">// creates random number between 0 to 0.999999
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">randNum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Let us  create random number between 0 to 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">num</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">11</span><span class="p">);</span> <span class="c1">// creates random number between 0 and 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Absolute value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">));</span> <span class="c1">//10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//Square root
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span> <span class="c1">// 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">//1.4142135623730951
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Power
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">E</span><span class="p">);</span> <span class="c1">// 2.718
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Logarithm
</span></span></span><span class="line"><span class="cl"><span class="c1">//Returns the natural logarithm of base E of x, Math.log(x)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 0.6931471805599453
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span> <span class="c1">// 2.302585092994046
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Trigonometry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="random-number-generator">Random number generator</h4>
<p>The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">randomNum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span> <span class="c1">// generates 0 to 0.999
</span></span></span></code></pre></div><p>Now, let us see how we can use random() method to generate a random number between 0 and 10 inclusive.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">randomNum</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span> <span class="c1">// generates 0 to 0.999
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">numBtnZeroAndTen</span> <span class="o">=</span> <span class="nx">randomNum</span> <span class="o">*</span> <span class="mi">11</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numBtnZeroAndTen</span><span class="p">);</span> <span class="c1">// this gives: min 0 and max 10.99
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">randomNumRoundToFloor</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">numBtnZeroAndTen</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">randomNumRoundToFloor</span><span class="p">);</span> <span class="c1">// this gives between 0 and 10
</span></span></span></code></pre></div><h2 id="strings">Strings</h2>
<p>Strings are texts, which are under <strong><em>single</em></strong> or <strong><em>double</em></strong> quote. To declare a string, we need a variable name, assignment operator, a value under a single quote, double-quote, or backtick.
Lets&rsquo; see some examples of string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">space</span> <span class="o">=</span> <span class="s2">&#34; &#34;</span><span class="p">;</span> <span class="c1">// an empty space string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">language</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">job</span> <span class="o">=</span> <span class="s2">&#34;teacher&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="string-concatenation">String Concatenation</h3>
<p>Connect two or more strings together is called concatenation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Declaring different variables of different data types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">space</span> <span class="o">=</span> <span class="s2">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">language</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">job</span> <span class="o">=</span> <span class="s2">&#34;teacher&#34;</span><span class="p">;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="nx">space</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span> <span class="c1">// concatenation, merging two string together.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fullName</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Asabeneh Yetayeh
</span></span></code></pre></div><p>We can concatenate string in different ways.</p>
<h4 id="concatenating-using-addition-operator">Concatenating using addition operator</h4>
<p>Concatenating using the addition operator is an old way. This way of concatenating is tedious and error-prone. It is good to know how to concatenate this way, but I strongly suggest to use the second way.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Declaring different variables of different data types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">space</span> <span class="o">=</span> <span class="s2">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">language</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">job</span> <span class="o">=</span> <span class="s2">&#34;teacher&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="nx">space</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">personInfoOne</span> <span class="o">=</span> <span class="nx">fullName</span> <span class="o">+</span> <span class="s2">&#34;. I am &#34;</span> <span class="o">+</span> <span class="nx">age</span> <span class="o">+</span> <span class="s2">&#34;. I live in &#34;</span> <span class="o">+</span> <span class="nx">country</span><span class="p">;</span> <span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">personInfoOne</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Asabeneh Yetayeh. I am 250. I live in Finland
</span></span></code></pre></div><h4 id="long-literal-strings">Long Literal Strings</h4>
<p>A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\) at the end of each line to indicate that the string will continue on the next line.
<strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">paragraph</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\
</span></span></span><span class="line"><span class="cl"><span class="s2">I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \
</span></span></span><span class="line"><span class="cl"><span class="s2">Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \
</span></span></span><span class="line"><span class="cl"><span class="s2">In the end of 2019, I was thinking to expand my teaching and to reach \
</span></span></span><span class="line"><span class="cl"><span class="s2">to global audience and I started a Python challenge from November 20 - December 19.\
</span></span></span><span class="line"><span class="cl"><span class="s2">It was one of the most rewarding and inspiring experience.\
</span></span></span><span class="line"><span class="cl"><span class="s2">Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \
</span></span></span><span class="line"><span class="cl"><span class="s2">I hope you are enjoying too.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="escape-sequences-in-string">Escape Sequences in string</h4>
<p>In JavaScript and other programming language \ followed by some characters is an escape sequence. Let&rsquo;s see the most common escape characters:</p>
<ul>
<li>\n: new line</li>
<li>\t: Tab means(8 spaces)</li>
<li>\\: Back slash</li>
<li>\&rsquo;: Single quote (&rsquo;)</li>
<li>\&quot;:Double quote (&quot;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;I hope every one is enjoying the 30 Days Of JavaScript challenge.\nDo you ?&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span> <span class="c1">// line break
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Days\tTopics\tExercises&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Day 1\t3\t5&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Day 2\t3\t5&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Day 3\t3\t5&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Day 4\t3\t5&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;This is a back slash  symbol (\\)&#34;</span><span class="p">);</span> <span class="c1">// To write a back slash
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;In every programming language it starts with &#34;Hello, World!&#34;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;In every programming language it starts with &#39;Hello, World!&#39;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;The saying &#39;Seeing is Believing&#39; is&#39;t correct in 2020&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="template-literalstemplate-strings">Template Literals(Template Strings)</h4>
<p>To create a template string, we use two backticks. We can inject data as expression inside a template string. To inject data, we enclose the expression with a curly bracket({}) followed by a $ sign. See the syntax below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//Syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="sb">`String literal text``String literal text </span><span class="si">${</span><span class="nx">expression</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span></code></pre></div><p><strong>Example: 1</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`The sum of 2 and 3 is 5`</span><span class="p">);</span> <span class="c1">// statically writing the data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`The sum of </span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb"> and </span><span class="si">${</span><span class="nx">b</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span> <span class="c1">// injecting the data dynamically
</span></span></span></code></pre></div><p><strong>Example:2</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">language</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">job</span> <span class="o">=</span> <span class="s2">&#34;teacher&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">personInfoTwo</span> <span class="o">=</span> <span class="sb">`I am </span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb">. I am </span><span class="si">${</span><span class="nx">age</span><span class="si">}</span><span class="sb">. I live in </span><span class="si">${</span><span class="nx">country</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span> <span class="c1">//ES6 - String interpolation method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">personInfoThree</span> <span class="o">=</span> <span class="sb">`I am </span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb">. I live in </span><span class="si">${</span><span class="nx">city</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="nx">country</span><span class="si">}</span><span class="sb">. I am a </span><span class="si">${</span><span class="nx">job</span><span class="si">}</span><span class="sb">. I teach </span><span class="si">${</span><span class="nx">language</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">personInfoTwo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">personInfoThree</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">I am Asabeneh Yetayeh. I am 250. I live in Finland.
</span></span><span class="line"><span class="cl">I am Asabeneh Yetayeh. I live in Helsinki, Finland. I am a teacher. I teach JavaScript.
</span></span></code></pre></div><p>Using a string template or string interpolation method, we can add expression, which could be a value or some operations(comparison, arithmetic operations, ternary operation).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">a</span><span class="si">}</span><span class="sb"> is greater than </span><span class="si">${</span><span class="nx">b</span><span class="si">}</span><span class="sb">: </span><span class="si">${</span><span class="nx">a</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">2</span> is greater than 3: <span class="nb">false</span>
</span></span></code></pre></div><h3 id="string-methods">String Methods</h3>
<p>Everything in JavaScript is an object. A string is a primitive data type that means we can not modify once it is created. The string object has many string methods. There are different string methods that can help us to work with strings.</p>
<ol>
<li>
<p><em>length</em>: The string <em>length</em> method returns the number of characters in a string included empty space.
<strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">js</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">js</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 8
</span></span></span></code></pre></div></li>
<li>
<p><em>Accessing characters in a string</em>: We can access each character in a string using its index. In programming, counting starts from 0. The first index of the string is zero, and the last index is one minus the length of the string.</p>
</li>
</ol>
<p><img loading="lazy" src="../../images/1/string_indexes.png" alt="Accessing sting by index"  />
</p>
<p>Let us access different characters in &lsquo;JavaScript&rsquo; string.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstLetter</span> <span class="o">=</span> <span class="nx">string</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstLetter</span><span class="p">);</span> <span class="c1">// J
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">secondLetter</span> <span class="o">=</span> <span class="nx">string</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">thirdLetter</span> <span class="o">=</span> <span class="nx">string</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastLetter</span> <span class="o">=</span> <span class="nx">string</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lastLetter</span><span class="p">);</span> <span class="c1">// t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lastIndex</span><span class="p">);</span> <span class="c1">// 9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">[</span><span class="nx">lastIndex</span><span class="p">]);</span> <span class="c1">// t
</span></span></span></code></pre></div><ol start="3">
<li><em>toUpperCase()</em>: this method changes the string to uppercase letters.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span> <span class="c1">// JAVASCRIPT
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span> <span class="c1">// ASABENEH
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span> <span class="c1">// FINLAND
</span></span></span></code></pre></div><ol start="4">
<li><em>toLowerCase()</em>: this method changes the string to lowercase letters.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;JavasCript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span> <span class="c1">// javascript
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span> <span class="c1">// asabeneh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span> <span class="c1">// finland
</span></span></span></code></pre></div><ol start="5">
<li><em>substr()</em>: It takes two arguments, the starting index and number of characters to slice.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span> <span class="c1">// Script
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span> <span class="c1">// land
</span></span></span></code></pre></div><ol start="6">
<li><em>substring()</em>: It takes two arguments, the starting index and the stopping index but it doesn&rsquo;t include the stopping index.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span> <span class="c1">// Java
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span> <span class="c1">// Script
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span> <span class="c1">// Script
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// Fin
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">));</span> <span class="c1">// land
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">// land
</span></span></span></code></pre></div><ol start="7">
<li><em>split()</em>: The split method splits a string at a specified place.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30 Days Of JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">());</span> <span class="c1">// [&#34;30 Days Of JavaScript&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">));</span> <span class="c1">// [&#34;30&#34;, &#34;Days&#34;, &#34;Of&#34;, &#34;JavaScript&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">.</span><span class="nx">split</span><span class="p">());</span> <span class="c1">// [&#34;Asabeneh&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">));</span> <span class="c1">// [&#34;A&#34;, &#34;s&#34;, &#34;a&#34;, &#34;b&#34;, &#34;e&#34;, &#34;n&#34;, &#34;e&#34;, &#34;h&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">countries</span> <span class="o">=</span> <span class="s2">&#34;Finland, Sweden, Norway, Denmark, and Iceland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">));</span> <span class="c1">// [&#34;Finland&#34;, &#34; Sweden&#34;, &#34; Norway&#34;, &#34; Denmark&#34;, &#34; and Iceland&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">));</span> <span class="c1">//  [&#34;Finland&#34;, &#34;Sweden&#34;, &#34;Norway&#34;, &#34;Denmark&#34;, &#34;and Iceland&#34;]
</span></span></span></code></pre></div><ol start="8">
<li><em>trim()</em>: Removes trailing space in the beginning or the end of a string.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;   30 Days Of JavaScript   &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34; Asabeneh &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">.</span><span class="nx">trim</span><span class="p">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">   <span class="m">30</span> Days Of JavasCript
</span></span><span class="line"><span class="cl"><span class="m">30</span> Days Of JavasCript
</span></span><span class="line"><span class="cl">  Asabeneh
</span></span><span class="line"><span class="cl">Asabeneh
</span></span></code></pre></div><ol start="9">
<li><em>includes()</em>: It takes a substring argument and it check if substring argument exists in the string. <em>includes()</em> returns a boolean. It checks if a substring exist in a string and it returns true if it exists and false if it doesn&rsquo;t exist.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30 Days Of JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;Days&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;days&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;Script&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;script&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;java&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;Java&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;fin&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;Fin&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;land&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;Land&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span></code></pre></div><ol start="10">
<li><em>replace()</em>: takes to parameter the old substring and new substring.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">oldsubstring</span><span class="p">,</span> <span class="nx">newsubstring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30 Days Of JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;Python&#34;</span><span class="p">));</span> <span class="c1">// 30 Days Of Python
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&#34;Fin&#34;</span><span class="p">,</span> <span class="s2">&#34;Noman&#34;</span><span class="p">));</span> <span class="c1">// Nomanland
</span></span></span></code></pre></div><ol start="11">
<li><em>charAt()</em>: Takes index and it returns the value at that index</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30 Days Of JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">lastIndex</span><span class="p">));</span> <span class="c1">// t
</span></span></span></code></pre></div><ol start="12">
<li><em>charCodeAt()</em>: Takes index and it returns char code(ASCII number) of the value at that index</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30 Days Of JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">// D ASCII number is 51
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">lastIndex</span><span class="p">));</span> <span class="c1">// t ASCII is 116
</span></span></span></code></pre></div><ol start="13">
<li><em>indexOf()</em>: Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30 Days Of JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;D&#34;</span><span class="p">));</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;Days&#34;</span><span class="p">));</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;days&#34;</span><span class="p">));</span> <span class="c1">// -1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">));</span> <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;JavaScript&#34;</span><span class="p">));</span> <span class="c1">// 11
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;Script&#34;</span><span class="p">));</span> <span class="c1">//15
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;script&#34;</span><span class="p">));</span> <span class="c1">// -1
</span></span></span></code></pre></div><ol start="14">
<li><em>lastIndexOf()</em>: Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">string</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;I love JavaScript. If you do not love JavaScript what else can you love.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">));</span> <span class="c1">// 67
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&#34;you&#34;</span><span class="p">));</span> <span class="c1">// 63
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&#34;JavaScript&#34;</span><span class="p">));</span> <span class="c1">// 38
</span></span></span></code></pre></div><ol start="15">
<li><em>concat()</em>: it takes many substrings and creates concatenation.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">substring</span><span class="p">,</span> <span class="nx">substring</span><span class="p">,</span> <span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;30&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="s2">&#34;Days&#34;</span><span class="p">,</span> <span class="s2">&#34;Of&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">));</span> <span class="c1">// 30DaysOfJavaScript
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Fin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="s2">&#34;land&#34;</span><span class="p">));</span> <span class="c1">// Finland
</span></span></span></code></pre></div><ol start="16">
<li><em>startsWith</em>: it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">string</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;Love is the best to in this world&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;Love&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;world&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;Fin&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;fin&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;land&#34;</span><span class="p">));</span> <span class="c1">//  false
</span></span></span></code></pre></div><ol start="17">
<li><em>endsWith</em>: it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;Love is the best to in this world&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&#34;world&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&#34;in this world&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&#34;land&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&#34;fin&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s2">&#34;Fin&#34;</span><span class="p">));</span> <span class="c1">//  false
</span></span></span></code></pre></div><ol start="18">
<li><em>search</em>: it takes a substring as an argument and it returns the index of the first match.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;I love JavaScript. If you do not love JavaScript what else can you love.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">));</span> <span class="c1">// 2
</span></span></span></code></pre></div><ol start="19">
<li><em>match</em>: it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null. Let us see how a regular expression pattern looks like. It starts with / sign and ends with / sign.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;love&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">patternOne</span> <span class="o">=</span> <span class="sr">/love/</span><span class="p">;</span> <span class="c1">// with out any flag
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">patternTwo</span> <span class="o">=</span> <span class="sr">/love/gi</span><span class="p">;</span> <span class="c1">// g-means to search in the whole text, i - case insensitive
</span></span></span></code></pre></div><p>Match syntax</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">string</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">substring</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;I love JavaScript. If you do not love JavaScript what else can you love.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;love&#34;</span>, index: 2, input: <span class="s2">&#34;I love JavaScript. If you do not love JavaScript what else can you love.&#34;</span>, groups: undefined<span class="o">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/love/gi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">));</span> <span class="c1">// [&#34;love&#34;, &#34;love&#34;, &#34;love&#34;]
</span></span></span></code></pre></div><p>Let us extract numbers from text using regular expression. This is not regular expression section, no panic, we will cover regular expression in other section.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;In 2019, I run 30 Days of Python. Now, in 2020 I super exited to start this challenge&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="sr">/\d+/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// d with escape character means d not a normal d instead acts a digit
</span></span></span><span class="line"><span class="cl"><span class="c1">// + means one or more digit numbers,
</span></span></span><span class="line"><span class="cl"><span class="c1">// if there is g after that it means global, search everywhere.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regEx</span><span class="p">));</span> <span class="c1">// [&#34;2&#34;, &#34;0&#34;, &#34;1&#34;, &#34;9&#34;, &#34;3&#34;, &#34;0&#34;, &#34;2&#34;, &#34;0&#34;, &#34;2&#34;, &#34;0&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\d+/g</span><span class="p">));</span> <span class="c1">// [&#34;2019&#34;, &#34;30&#34;, &#34;2020&#34;]
</span></span></span></code></pre></div><ol start="20">
<li><em>repeat()</em>: it takes a number argument and it returned the repeated version of the string.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">string</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&#34;love&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">string</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span> <span class="c1">// lovelovelovelovelovelovelovelovelovelove
</span></span></span></code></pre></div><h2 id="checking-data-types-and-casting">Checking Data types and Casting</h2>
<h3 id="checking-data-types">Checking data types</h3>
<ul>
<li>Check Data types: To check the data type of a certain data type we use the <em>typeof</em> and we also change one data type to another.
<strong>Example:</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Different javascript data types
</span></span></span><span class="line"><span class="cl"><span class="c1">// Let&#39;s declare different data types
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span> <span class="c1">// string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">;</span> <span class="c1">// string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">;</span> <span class="c1">// string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">;</span> <span class="c1">// string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span> <span class="c1">// number, it is not my real age, do not worry about it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">job</span><span class="p">;</span> <span class="c1">// undefined, because a value was not assigned
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">);</span> <span class="c1">// string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">firstName</span><span class="p">);</span> <span class="c1">// string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="mf">3.14</span><span class="p">);</span> <span class="c1">// number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// boolean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// boolean
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">NaN</span><span class="p">);</span> <span class="c1">// number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">job</span><span class="p">);</span> <span class="c1">// undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">// undefined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="kc">null</span><span class="p">);</span> <span class="c1">// object
</span></span></span></code></pre></div><h3 id="changing-data-typecasting">Changing data type(Casting)</h3>
<ul>
<li>Casting: Converting one data type to another data type. We use <em>parseInt()</em>, <em>parseFloat()</em>, <em>Number()</em>, <em>+ sign</em>, <em>str()</em>
When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error.</li>
</ul>
<h4 id="string-to-int">String to Int</h4>
<p>We can convert string number to a number. Any number inside a quote is a string number. An example of a string number: &lsquo;10&rsquo;, &lsquo;5&rsquo;, etc.
We can convert string to number using the following methods:</p>
<ul>
<li>parseInt()</li>
<li>Number()</li>
<li>Plus sign(+)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="s2">&#34;10&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numInt</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numInt</span><span class="p">);</span> <span class="c1">// 10
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="s2">&#34;10&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numInt</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numInt</span><span class="p">);</span> <span class="c1">// 10
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="s2">&#34;10&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numInt</span> <span class="o">=</span> <span class="o">+</span><span class="nx">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numInt</span><span class="p">);</span> <span class="c1">// 10
</span></span></span></code></pre></div><h4 id="string-to-float">String to Float</h4>
<p>We can convert string float number to a float number. Any float number inside a quote is a string float number. An example of a string float number: &lsquo;9.81&rsquo;, &lsquo;3.14&rsquo;, &lsquo;1.44&rsquo;, etc.
We can convert string float to number using the following methods:</p>
<ul>
<li>parseFloat()</li>
<li>Number()</li>
<li>Plus sign(+)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="s2">&#34;9.81&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numFloat</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numFloat</span><span class="p">);</span> <span class="c1">// 9.81
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="s2">&#34;9.81&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numFloat</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numFloat</span><span class="p">);</span> <span class="c1">// 9.81
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="s2">&#34;9.81&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numFloat</span> <span class="o">=</span> <span class="o">+</span><span class="nx">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numInt</span><span class="p">);</span> <span class="c1">// 9.81
</span></span></span></code></pre></div><h4 id="float-to-int">Float to Int</h4>
<p>We can convert float numbers to integers.
We use the following method to convert float to int:</p>
<ul>
<li>parseInt()</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">num</span> <span class="o">=</span> <span class="mf">9.81</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numInt</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numInt</span><span class="p">);</span> <span class="c1">// 9
</span></span></span></code></pre></div><h3 id="exercises-data-types">Exercises: Data Types</h3>
<ol>
<li>Declare variables and assign string, boolean, undefined and null data types</li>
<li>The JavaScript <strong><em>typeof</em></strong> operator uses to check different data types. Check the data type of each variables from question number 1.</li>
</ol>
<h4 id="exercise-string">Exercise: String</h4>
<ol>
<li>Declare a variable name company and assign it to an initial value <strong>&lsquo;Coding Academy&rsquo;</strong>.</li>
<li>Print the string on the browser console using <strong>console.log()</strong></li>
<li>Print the <strong>length</strong> of the string on the browser console using <em>console.log()</em></li>
<li>Change all the string to capital letters using <strong>toUpperCase()</strong> method</li>
<li>Change all the string to lowercase letters using <strong>toLowerCase()</strong> method</li>
<li>Cut(slice) out the first word of the string using <strong>slice</strong>, <strong>substr()</strong> or <strong>substring()</strong> method</li>
<li>Use <strong>substr</strong> to slice out the phase <strong>because because because</strong> in the following sentence:<strong>&lsquo;You cannot end a sentence with because because because is a conjunction&rsquo;</strong></li>
<li>Check if the string contains a word <strong>Academy</strong> using <strong>includes()</strong> method</li>
<li>Split the <strong>string</strong> into <strong>array</strong> using <strong>split()</strong> method</li>
<li>Split the string Coding Academy at the space using <strong>split()</strong> method</li>
<li>&lsquo;Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon&rsquo; <strong>split</strong> the string at the comma and change it to an array.</li>
<li>Change Coding Academy to Microsoft Academy using <strong>replace()</strong> method.</li>
<li>What is character at index 10 in &lsquo;Coding Academy&rsquo; string use <strong>charAt()</strong> method.</li>
<li>What is the character code of A in &lsquo;Coding Academy&rsquo; string using <strong>charCodeAt()</strong></li>
<li>Use <strong>indexOf</strong> to determine the position of the first occurrence of c in Coding Academy</li>
<li>Use <strong>lastIndexOf</strong> to determine the position of the last occurrence of c in Coding Academy.</li>
<li>Use <strong>indexOf</strong> to find the position of the first occurrence of the word <strong>because</strong> in the following sentence:<strong>&lsquo;You cannot end a sentence with because because because is a conjunction&rsquo;</strong></li>
<li>Use <strong>lastIndexOf</strong> to find the position of the first occurrence of the word <strong>because</strong> in the following sentence:<strong>&lsquo;You cannot end a sentence with because because because is a conjunction&rsquo;</strong></li>
<li>Use <strong>search</strong> to find the position of the first occurrence of the word <strong>because</strong> in the following sentence:<strong>&lsquo;You cannot end a sentence with because because because is a conjunction&rsquo;</strong></li>
<li>Use <strong>trim()</strong> to remove if there is trailing whitespace at the beginning and the end of a string.E.g &rsquo; Coding Academy &lsquo;.</li>
<li>Use <strong>startsWith()</strong> method with the string Coding Academy make the result true</li>
<li>Use <strong>endsWith()</strong> method with the string Coding Academy make the result true</li>
<li>Use <strong>match()</strong> method to find all the c’s in Coding Academy</li>
<li>Use <strong>match()</strong> to count the number all because&rsquo;s in the following sentence:<strong>&lsquo;You cannot end a sentence with because because because is a conjunction&rsquo;</strong></li>
<li>Use <strong>concat()</strong> and merge &lsquo;Coding&rsquo; and &lsquo;Academy&rsquo; to a single string, &lsquo;Coding Academy&rsquo;</li>
<li>Use <strong>repeat()</strong> method to print Coding Academy 5 times</li>
<li>Calculate the total annual income of the person by extract the numbers from the following text. &lsquo;He earns 5000 euro from salary per month, 10000 euro annual bonus, 15000 euro online courses per month.&rsquo;</li>
</ol>
<h3 id="booleans">Booleans</h3>
<p>Boolean value is either true or false. Any comparisons return a boolean value which is either true or false.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isLightOn</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isRaining</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">hungry</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isMarried</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="exercise-booleans">Exercise: Booleans</h4>
<p>Boolean value is either true or false.</p>
<ol>
<li>Write three JavaScript statement which provide truthy value.</li>
<li>Write three JavaScript statement which provide falsy value.</li>
<li>Use all the following comparison operators to compare the following values: &gt;, &lt; &gt;=, &lt;=, !=, !==,===.
Which are true or which are false ?
<ol>
<li>4 &gt; 3</li>
<li>4 &gt;= 3</li>
<li>4 &lt; 3</li>
<li>4 &lt;= 3</li>
<li>4 == 4</li>
<li>4 === 4</li>
<li>4 != 4</li>
<li>4 !== 4</li>
<li>4 != &lsquo;4&rsquo;</li>
<li>4 == &lsquo;4&rsquo;</li>
<li>4 === &lsquo;4&rsquo;</li>
</ol>
</li>
</ol>
<h3 id="undefined">Undefined</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">);</span> <span class="c1">//not defined, because it is not assigned to a value yet
</span></span></span></code></pre></div><h3 id="null">Null</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">empty</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">empty</span><span class="p">);</span> <span class="c1">// -&gt; null , means no value
</span></span></span></code></pre></div><h3 id="exercise---6--data-types">Exercise - 6 : Data types</h3>
<p>String, number, boolean, null, undefined and symbol(ES6) are JavaScript primitive data types.</p>
<ol>
<li>The JavaScript <em>typeof</em> operator uses to check different data types. Check the data type of each variables from question number 1.</li>
</ol>
<h2 id="operators">Operators</h2>
<h3 id="arithmetic-operators">Arithmetic Operators</h3>
<p>Arithmetic operators are mathematical operators:+, -, _, /, _</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numOne</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">numTwo</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">+</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">-</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">mult</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">*</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">/</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">remainder</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">%</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">diff</span><span class="p">,</span> <span class="nx">mult</span><span class="p">,</span> <span class="nx">div</span><span class="p">,</span> <span class="nx">remainder</span><span class="p">);</span> <span class="c1">// -&gt;7,1,12,1.33,1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">radius</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// length in meter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">gravity</span> <span class="o">=</span> <span class="mf">9.81</span><span class="p">;</span> <span class="c1">// in m/s2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">mass</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span> <span class="c1">// in Kilogram
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">boilingPoint</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// temperature in oC, boiling point of water
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">bodyTemp</span> <span class="o">=</span> <span class="mi">37</span><span class="p">;</span> <span class="c1">// body temperature in oC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Lets calculate area of a circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">areaOfCircle</span> <span class="o">=</span> <span class="nx">PI</span> <span class="o">*</span> <span class="nx">radius</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">areaOfCircle</span><span class="p">);</span> <span class="c1">// -&gt; 314 m
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Lets calculate weight of a substance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">weight</span> <span class="o">=</span> <span class="nx">mass</span> <span class="o">*</span> <span class="nx">gravity</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">weight</span><span class="p">);</span> <span class="c1">// -&gt; 706.32 N(Newton)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ConcatEnating string with numbers using string interpolation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> The boiling point of water is 100 oC.
</span></span></span><span class="line"><span class="cl"><span class="cm"> Human body temperature is 37 oC.
</span></span></span><span class="line"><span class="cl"><span class="cm"> The gravity of earth is 9.81 m/s2.
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="sb">`The boiling point of water is </span><span class="si">${</span><span class="nx">boilingPoint</span><span class="si">}</span><span class="sb"> oC.\nHuman body temperature is </span><span class="si">${</span><span class="nx">body</span><span class="si">}</span><span class="sb"> oC.\nThe gravity of earth is </span><span class="si">${</span><span class="nx">gravity</span><span class="si">}</span><span class="sb"> m / s2.`</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><h3 id="exercises--arithmetic-operators">Exercises : Arithmetic Operators</h3>
<p>JavaScript arithmetic operators are addition(+), subtraction(-), multiplication(*), division(/), modulus(%), increment(++) and decrement(&ndash;).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">operandOne</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">operandTwo</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span></code></pre></div><p>Using the above operands apply different JavaScript arithmetic operators</p>
<h3 id="logical-operators">Logical Operators</h3>
<p>The following symbols are the common logical operators:
&amp;&amp;(ampersand) , ||(pipe) and !(negation).
&amp;&amp; gets true only if the two operands are true.
|| gets true either of the operand is true.
! negates true to false, false to true.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// &amp;&amp; ampersand example
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// true and true -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// true and false -&gt; false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// false and false -&gt; false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// || pipe or, example
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">||</span> <span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// true and true -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="o">||</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// true and false -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="o">||</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// false and false -&gt; false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ! Negation examples
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">check</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">check</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// -&gt; false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isLightOn</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isLightOff</span> <span class="o">=</span> <span class="o">!</span><span class="nx">isLightOn</span><span class="p">;</span> <span class="c1">// -&gt; false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">isMarried</span> <span class="o">=</span> <span class="o">!</span><span class="kc">false</span><span class="p">;</span> <span class="c1">// -&gt; true
</span></span></span></code></pre></div><h3 id="exercises-logical-operators">Exercises: Logical Operators</h3>
<p>Which are true or which are false ?</p>
<ol>
<li>4 &gt; 3 &amp;&amp; 10 &lt; 12</li>
<li>4 &gt; 3 &amp;&amp; 10 &gt; 12</li>
<li>4 &gt; 3 || 10 &lt; 12</li>
<li>4 &gt; 3 || 10 &gt; 12</li>
<li>!(4 &gt; 3)</li>
<li>!(4 &lt; 3)</li>
<li>!(false)</li>
<li>!(4 &gt; 3 &amp;&amp; 10 &lt; 12)</li>
<li>!(4 &gt; 3 &amp;&amp; 10 &gt; 12)</li>
<li>!(4 === &lsquo;4&rsquo;)</li>
</ol>
<h3 id="comparison-operators">Comparison Operators</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">&lt;=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">!==</span> <span class="s2">&#34;4&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">==</span> <span class="s2">&#34;4&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">===</span> <span class="s2">&#34;4&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span> <span class="o">===</span> <span class="mi">4</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="exercise-comparison-operators">Exercise: Comparison Operators</h3>
<p>Boolean value is either true or false. Any comparison return a boolean either true or false.
Use all the following comparison operators to compare the following values: &gt;, &lt; &gt;=, &lt;=, !=, !==,===.
Which are true or which are false ?</p>
<ol>
<li>4 &gt; 3</li>
<li>4 &gt;= 3</li>
<li>4 &lt; 3</li>
<li>4 &lt;= 3</li>
<li>4 == 4</li>
<li>4 === 4</li>
<li>4 != 4</li>
<li>4 !== 4</li>
<li>4 != &lsquo;4&rsquo;</li>
<li>4 == &lsquo;4&rsquo;</li>
<li>4 === &lsquo;4&rsquo;</li>
</ol>
<h2 id="conditionals">Conditionals</h2>
<h3 id="if">if</h3>
<p>We use if condition to check only on condition.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isRaining</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">isRaining</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Remember to take your rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="if-else">if else</h3>
<p>When we have more than one condition we use the if and else condition.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// if the condition meets, this block of code runs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// if condition doesn&#39;t meet, this block code runs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isRaining</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">isRaining</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;You need a rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;No need for a rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="if-else-if-else">if else if else</h3>
<p>Whenever we have multiple conditions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// if else if else
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">weather</span> <span class="o">=</span> <span class="s2">&#34;sunny&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">weather</span> <span class="o">===</span> <span class="s2">&#34;rainy&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;You need a rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weather</span> <span class="o">===</span> <span class="s2">&#34;cloudy&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;It might be cold, you need a jacket.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">weather</span> <span class="o">===</span> <span class="s2">&#34;sunny&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Go out freely.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;No need for rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="switch">switch</h3>
<p>Switch an alternative for if else if else</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">weather</span> <span class="o">=</span> <span class="s2">&#34;cloudy&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">switch</span> <span class="p">(</span><span class="nx">weather</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;rainy&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;You need a rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;cloudy&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;It might be cold, you need a jacket.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;sunny&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Go out freely.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34; No need for rain coat.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Switch More Examples
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">dayUserInput</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;What day is it ?&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">dayUserInput</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">switch</span> <span class="p">(</span><span class="nx">day</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;monday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Monday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;tuesday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Tuesday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;wednesday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Wednesday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;thursday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Thursday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;friday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Friday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;saturday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Saturday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="s2">&#34;sunday&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Today is Sunday&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;It is not a week day.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="ternary-operators">Ternary Operators</h3>
<p>Another way to write conditionals is using ternary operators.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isRaining</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">isRaining</span>
</span></span><span class="line"><span class="cl">  <span class="o">?</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;You need a rain coat.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;No need for a rain coat.&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="exercise-conditionals">Exercise: Conditionals</h3>
<ol>
<li>
<p>Get user input using prompt(“Enter your age:”). If user is 18 or older , give feedback:You are old enough to drive but if not 18 give feedback to wait for the years he supposed to wait for.
Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Enter your age: <span class="m">30</span>
</span></span><span class="line"><span class="cl">You are old enough to drive.
</span></span></code></pre></div><p>Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Enter your age:15
</span></span><span class="line"><span class="cl">You are left with <span class="m">3</span> years to drive.
</span></span></code></pre></div></li>
<li>
<p>Compare the values of myAge and yourAge using if … else. Based on the comparison log to console who is older (me or you). Use prompt(“Enter your age:”) to get the age as input.
Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Enter your age: <span class="m">30</span>
</span></span><span class="line"><span class="cl">You are <span class="m">5</span> years older than me.
</span></span></code></pre></div></li>
<li>
<p>If a is greater than b return a is greater than b else a is less than b.
Output:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> <span class="nb">let</span> <span class="nv">a</span> <span class="o">=</span> <span class="m">4</span>
</span></span><span class="line"><span class="cl"> <span class="nb">let</span> <span class="nv">b</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl"> <span class="m">4</span> is greater than <span class="m">3</span>
</span></span></code></pre></div></li>
<li>
<p>Write a code which give grade students according to theirs scores:</p>
<ul>
<li>80-100, A</li>
<li>70-89, B</li>
<li>60-69, C</li>
<li>50-59, D</li>
<li>0 -49, F</li>
</ul>
</li>
<li>
<p>Check if the season is Autumn, Winter, Spring or Summer.
If the user input is:</p>
<ul>
<li>September, October or November, the season is Autumn.</li>
<li>December, January or February, the season is Winter.</li>
<li>March, April or May, the season is Spring</li>
<li>June, July or August, the season is Summer</li>
</ul>
</li>
</ol>
<h2 id="loops">Loops</h2>
<p>In programming languages to carry out repetitive task we use different kinds of loop. The following examples are the commonly used loops.</p>
<h3 id="for-loop">For Loop</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// for loop structure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span><span class="p">(</span><span class="nx">initialization</span><span class="p">,</span> <span class="nx">condition</span><span class="p">,</span> <span class="nx">increment</span><span class="o">/</span><span class="nx">decrement</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="while-loop">While loop</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="do-while-loop">Do while loop</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="exercisesloops">Exercises:Loops</h3>
<ol>
<li>
<p>Iterate 0 to 10 using for loop, do the same using while and do while loop.</p>
</li>
<li>
<p>Iterate 10 to 0 using for loop, do the same using while and do while loop.</p>
</li>
<li>
<p>Write a loop that makes seven calls to console.log to output the following triangle:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">    <span class="err">#</span>
</span></span><span class="line"><span class="cl">    <span class="err">##</span>
</span></span><span class="line"><span class="cl">    <span class="err">###</span>
</span></span><span class="line"><span class="cl">    <span class="err">####</span>
</span></span><span class="line"><span class="cl">    <span class="err">#####</span>
</span></span><span class="line"><span class="cl">    <span class="err">######</span>
</span></span><span class="line"><span class="cl">    <span class="err">#######</span>
</span></span></code></pre></div></li>
<li>
<p>Iterate the array, [&lsquo;HTML&rsquo;, &lsquo;CSS&rsquo;, &lsquo;JavaScript&rsquo;] using a for loop and print out the items.</p>
</li>
<li>
<p>Use for loop to iterate from 0 to 100 and print only even numbers</p>
</li>
<li>
<p>Use for loop to iterate from 0 to 100 and print only odd numbers</p>
</li>
<li>
<p>Use for loop to iterate from 0 to 100 and print and print the sum of all numbers.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">The</span> <span class="nx">sum</span> <span class="nx">all</span> <span class="nx">numbers</span> <span class="nx">is</span> <span class="mf">5050.</span>
</span></span></code></pre></div></li>
<li>
<p>Use for loop to iterate from 0 to 100 and print the sum of all evens and the sum of all odds.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">The</span> <span class="nx">sum</span> <span class="k">of</span> <span class="nx">all</span> <span class="nx">evens</span> <span class="nx">is</span> <span class="mf">2550.</span> <span class="nx">And</span> <span class="nx">the</span> <span class="nx">sum</span> <span class="k">of</span> <span class="nx">all</span> <span class="nx">odds</span> <span class="nx">is</span> <span class="mf">2500.</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="arrays">Arrays</h2>
<p>In contrast to variables array can store <em>multiple values</em>. Each value in an array has an <em>index</em> and each index has <em>a reference in a memory address</em>. Each value can be accessed by using their <em>indexes</em>. The index of an array starts from <em>zero</em> and the last element is less by one from the length of the array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="mf">9.81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mf">98.6</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span> <span class="c1">// set of numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="c1">// =&gt; to know the size of the array, which is 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">)</span>        <span class="c1">// -&gt; [0, 3.14, 9.81, 37, 98.6, 100]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>     <span class="c1">//  -&gt; 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>     <span class="c1">//  -&gt; 100
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">lastIndex</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">webTechs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;HTML&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;CSS&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;React&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Redux&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Node&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;MongoDB&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span> <span class="c1">// List of web technologies
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">webTechs</span><span class="p">)</span>        <span class="c1">// all the array items
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">webTechs</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="c1">// =&gt; to know the size of the array, which is 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">webTechs</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>     <span class="c1">//  -&gt; HTML
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">webTechs</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span>     <span class="c1">//  -&gt; MongoDB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">webTechs</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">webTechs</span><span class="p">[</span><span class="nx">lastIndex</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nx">MongoDB</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Albania&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Bolivia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Canada&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Denmark&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Ethiopia&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Finland&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Germany&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Hungary&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Ireland&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Japan&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Kenya&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span> <span class="c1">// List of countries;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">)</span>     <span class="c1">// -&gt; all countries in array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1">//  -&gt; Albania
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">[</span><span class="mi">10</span><span class="p">])</span> <span class="c1">//  -&gt; Kenya
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">countries</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">[</span><span class="nx">lastIndex</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="c1">// Kenya
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">shoppingCart</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Milk&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Mango&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Tomato&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Potato&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Avocado&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Meat&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Eggs&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s1">&#39;Sugar&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span> <span class="c1">// List of food products
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">shoppingCart</span><span class="p">)</span>     <span class="c1">// -&gt; all shoppingCart in array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">shoppingCart</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1">//  -&gt; Milk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">shoppingCart</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span>  <span class="c1">//  -&gt; Sugar
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="nx">shoppingCart</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">shoppingCart</span><span class="p">[</span><span class="nx">lastIndex</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="c1">// Sugar
</span></span></span></code></pre></div><h3 id="exercise--arrays">Exercise : Arrays</h3>
<ol>
<li>Declare an <em>empty</em> array;</li>
<li>Declare an array with more than 5 number of items</li>
<li>Find the length of your array</li>
<li>Get the first item, the middle item and the last item of the array</li>
<li>Declare an array called <em>mixedDataTypes</em>,put different data types and in your array and the array size should be greater than 5</li>
<li>Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon.</li>
<li>Print the array using <em>console.log()</em></li>
<li>Print the number of companies in the array</li>
<li>Print the first company, middle and last company</li>
<li>Print out each company</li>
<li>Change companies to uppercase and print them out</li>
<li>Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies.</li>
<li>Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is <em>not found</em>.</li>
<li>Filter out companies which have more than one &lsquo;o&rsquo; without the filter method</li>
<li>Sort the array using <em>sort()</em> method</li>
<li>Reverse the array without <em>reverse</em> method</li>
<li>Reverse the array using <em>reverse()</em> method</li>
<li>Slice out the first 3 companies from the array</li>
<li>Slice out the last 3 companies from the array</li>
<li>Slice out the middle IT company or companies from the array</li>
<li>Remove the first IT company from the array</li>
<li>Remove the middle IT company or companies from the array</li>
<li>Remove the last IT company from the array</li>
<li>Remove all IT companies</li>
</ol>
<h2 id="more-on-arrays">More on Arrays</h2>
<p>There are different methods to manipulate an array. These are some of the available methods to deal with arrays:<em>Array,length, concat, indexOf, slice, splice, join, toString, includes, lastIndexOf, isArray, fill, push, pop, shift, unshift</em>
Array:To create an array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">();</span> <span class="c1">// creates an an empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">eightEmptyValues</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span> <span class="c1">// it creates eight empty values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eightEmptyValues</span><span class="p">);</span> <span class="c1">// [empty x 8]
</span></span></span></code></pre></div><ul>
<li><em>fill</em>: Fill all the array elements with a static value</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">();</span> <span class="c1">// creates an an empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">eightXvalues</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">8</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="s2">&#34;X&#34;</span><span class="p">);</span> <span class="c1">// it creates eight element values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eightXvalues</span><span class="p">);</span> <span class="c1">// [&#39;X&#39;, &#39;X&#39;,&#39;X&#39;,&#39;X&#39;,&#39;X&#39;,&#39;X&#39;,&#39;X&#39;,&#39;X&#39;]
</span></span></span></code></pre></div><ul>
<li><em>concat</em>: To concatenate two arrays.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">secondList</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">thirdList</span> <span class="o">=</span> <span class="nx">firstList</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">secondList</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">thirdList</span><span class="p">);</span> <span class="c1">// [1,2,3,4,5,6]
</span></span></span></code></pre></div><ul>
<li><em>length</em>: To know the size of the array</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// -&gt; 5
</span></span></span></code></pre></div><ul>
<li><em>indexOf</em>: To check if an item exist in an array. If it exist it returns the index else it returns -1.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// -&gt; 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// -&gt; -1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// -&gt; 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span> <span class="c1">// -&gt; -1
</span></span></span></code></pre></div><ul>
<li><em>lastIndexOf</em> :Give the position of the last item in the array. If it exist it returns the index else it returns -1.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// -&gt; 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// -&gt; -1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// -&gt; 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span> <span class="c1">// -&gt; 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span> <span class="c1">// -&gt; -1
</span></span></span></code></pre></div><p><em>includes</em>: To check if an item exist in an array. If it exist it returns the true else it returns false.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span> <span class="c1">// -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span> <span class="c1">// -&gt; false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="mi">6</span><span class="p">));</span> <span class="c1">// -&gt; false
</span></span></span></code></pre></div><ul>
<li><em>isArray</em>: To check if the data type is an array</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">numbers</span><span class="p">));</span> <span class="c1">// -&gt; true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">number</span><span class="p">));</span> <span class="c1">// -&gt; false
</span></span></span></code></pre></div><ul>
<li><em>toString</em>: Converts array to string</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span> <span class="c1">// 1,2,3,4,5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span> <span class="c1">// Asabeneh,Mathias,Elias,Brook
</span></span></span></code></pre></div><p>join:To join the elements of the array, the argument passed in the join method will be joined in the array and return as a string.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">// 1,2,3,4,5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">// Asabeneh,Mathias,Elias,Brook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">));</span> <span class="c1">//AsabenehMathiasEliasBrook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">));</span> <span class="c1">//Asabeneh Mathias Elias Brook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">));</span> <span class="c1">//Asabeneh, Mathias, Elias, Brook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">names</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34; # &#34;</span><span class="p">));</span> <span class="c1">//Asabeneh # Mathias # Elias # Brook
</span></span></span></code></pre></div><p>Slice: To cut out a multiple items in range. It takes two parameters:starting and ending position. It doesn&rsquo;t include the ending position</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span>        <span class="c1">// -&gt; it copies all  item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>       <span class="c1">// -&gt; it copies all  item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="c1">// it copies all  item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>    <span class="c1">// -&gt; [2,3,4] // it doesn&#39;t include the ending position
</span></span></span></code></pre></div><p>Splice: It takes three parameters:Starting position, number of times to be removed and number items to be added.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">()</span>      <span class="c1">// -&gt; remove all items
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>  <span class="c1">// remove the first item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span> <span class="c1">// -&gt; [1,2,6,7,8] //it removes two item and replace three items
</span></span></span></code></pre></div><ul>
<li><em>push</em>: adding item in the end</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">numbers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// -&gt; [1,2,3,4,5,6]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">numbers</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span> <span class="c1">// -&gt; remove one item from the end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// -&gt; [1,2,3,4,5]
</span></span></span></code></pre></div><ul>
<li><em>pop</em>: Removing item in the end</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">numbers</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span> <span class="c1">// -&gt; remove one item from the end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// -&gt; [1,2,3,4]
</span></span></span></code></pre></div><ul>
<li><em>shift</em>: Removing item in the beginning</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">numbers</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span> <span class="c1">// -&gt; remove one item from the beginning
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// -&gt; [2,3,4,5]
</span></span></span></code></pre></div><ul>
<li><em>unshift</em>: Adding item in the beginning</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">numbers</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// -&gt; remove one item from the beginning
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// -&gt; [0,1,2,3,4,5]
</span></span></span></code></pre></div><hr>
<h3 id="exercise--10--array-methods">Exercise -10 : Array Methods</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">shoppingCart</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Milk&#34;</span><span class="p">,</span> <span class="s2">&#34;Coffee&#34;</span><span class="p">,</span> <span class="s2">&#34;Tea&#34;</span><span class="p">,</span> <span class="s2">&#34;Honey&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">todoList</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">task</span><span class="o">:</span> <span class="s2">&#34;Learn JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">time</span><span class="o">:</span> <span class="s2">&#34;4/3/2019 8:30&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">task</span><span class="o">:</span> <span class="s2">&#34;Help some in need&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">time</span><span class="o">:</span> <span class="s2">&#34;4/3/2019 4:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">task</span><span class="o">:</span> <span class="s2">&#34;Do some physical exercises&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">time</span><span class="o">:</span> <span class="s2">&#34;4/3/2019 6:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span></code></pre></div><h2 id="functions">Functions</h2>
<p>A function is a block of code designed to perform a certain task.
A function is declared by a function key word followed by a name, followed by parentheses (). A parentheses can take a parameter. If a function take a parameter it will be called with argument. A function can also take a default parameter.
A function can be declared or created in couple of ways:</p>
<ul>
<li><em>Declaration function</em></li>
<li><em>Expression function</em></li>
<li><em>Anonymous function</em></li>
<li><em>Arrow function</em></li>
</ul>
<h3 id="function-declaration">Function Declaration</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//function without parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">functionName</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl"><span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">functionName</span><span class="p">()</span> <span class="c1">// calling function by its name and with parentheses
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//function without parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">addTwoNumbers</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">numOne</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">numTwo</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">+</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">addTwoNumbers</span><span class="p">();</span> <span class="c1">// function has to be called to be executed by it name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// function with one parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">functionName</span><span class="p">(</span><span class="nx">parm1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//code goes her
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">functionName</span><span class="p">(</span><span class="nx">parm1</span><span class="p">);</span> <span class="c1">// during calling or invoking one argument needed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">areaOfCircle</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="nx">r</span> <span class="o">*</span> <span class="nx">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">area</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">areaOfCircle</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c1">// should be called with one argument
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="nx">number</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// function with two parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">functionName</span><span class="p">(</span><span class="nx">parm1</span><span class="p">,</span> <span class="nx">parm2</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//code goes her
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">functionName</span><span class="p">(</span><span class="nx">parm1</span><span class="p">,</span><span class="nx">parm2</span><span class="p">);</span> <span class="c1">// during calling or invoking two arguments needed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Function without parameter doesn&#39;t take input, so lets make a parameter with parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sumTwoNumbers</span><span class="p">(</span><span class="nx">numOne</span><span class="p">,</span> <span class="nx">numTwo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">+</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">sumTwoNumbers</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="c1">// calling functions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// If a function doesn&#39;t return it doesn&#39;t store data, so it should return
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sumTwoNumbersAndReturn</span><span class="p">(</span><span class="nx">numOne</span><span class="p">,</span> <span class="nx">numTwo</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numOne</span> <span class="o">+</span> <span class="nx">numTwo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sumTwoNumbersAndReturn</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">printFullName</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">firstName</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">lastName</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">printFullName</span><span class="p">(</span><span class="s1">&#39;Asabeneh&#39;</span><span class="p">,</span> <span class="s1">&#39;Yetayeh&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">printFullName</span><span class="p">(</span><span class="s1">&#39;Dean&#39;</span><span class="p">,</span> <span class="s1">&#39;Phan&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// function with multiple parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">functionName</span><span class="p">(</span><span class="nx">parm1</span><span class="p">,</span> <span class="nx">parm2</span><span class="p">,</span> <span class="nx">parm3</span><span class="p">,...){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//code goes ther
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">functionName</span><span class="p">(</span><span class="nx">parm1</span><span class="p">,</span><span class="nx">parm2</span><span class="p">,</span><span class="nx">parm3</span><span class="p">,...)</span> <span class="c1">// during calling or invoking three arguments needed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// this function takes array as a parameter and sum up the numbers in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sumArrayValues</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sumArrayValues</span><span class="p">(</span><span class="nx">numbers</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">areaOfCircle</span> <span class="o">=</span> <span class="p">(</span><span class="nx">radius</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">let</span> <span class="nx">area</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="nx">radius</span> <span class="o">*</span> <span class="nx">radius</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">area</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">areaOfCircle</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></span></code></pre></div><h3 id="function-expression">Function Expression</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//Declaration function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// -&gt; 4
</span></span></span><span class="line"><span class="cl"><span class="c1">// Function expression
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// -&gt; 4
</span></span></span></code></pre></div><h3 id="anonymous-function">Anonymous Function</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Self invoking functions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 4
</span></span></span></code></pre></div><h3 id="arrow-function">Arrow Function</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// -&gt; 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// if we have only one line, it can be written as follows
</span></span></span><span class="line"><span class="cl"><span class="c1">// Explicit return
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span> <span class="c1">// -&gt; 4
</span></span></span></code></pre></div><h3 id="arrow-function-vs-declaration-function">Arrow Function vs Declaration Function</h3>
<p>Arrow function and regular functions are not exactly the same.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"></code></pre></div><h3 id="exercise---10--functions">Exercise - 10 : Functions</h3>
<ol>
<li>
<p>Declare a function <em>fullName</em> and it print out your full name.</p>
</li>
<li>
<p>Declare a function <em>fullName</em> and now it takes firstName, lastName as a parameter and it returns your full - name.</p>
</li>
<li>
<p>Declare a function <em>addNumbers</em> and it takes two two parameters and it returns sum.</p>
</li>
<li>
<p>An area of a rectangle is calculated as follows: <em>area = length x width</em>. Write a function which calculates <em>areaOfRectangle</em>.</p>
</li>
<li>
<p>A perimeter of a rectangle is calculated as follows: <em>perimeter= 2x(length + width)</em>. Write a function which calculates <em>perimeterOfRectangle</em>.</p>
</li>
<li>
<p>A volume of a rectangular prism is calculated as follows: <em>volume = length x width x height</em>. Write a function which calculates <em>volumeOfRectPrism</em>.</p>
</li>
<li>
<p>Area of a circle is calculated as follows: <em>area = π x r x r</em>. Write a function which calculates <em>areaOfCircle</em></p>
</li>
<li>
<p>Circumference of a circle is calculated as follows: <em>circumference = 2πr</em>. Write a function which calculates <em>circumOfCircle</em></p>
</li>
<li>
<p>Density of a substance is calculated as follows:<em>density= mass/volume</em>. Write a function which calculates <em>density</em>.</p>
</li>
<li>
<p>Speed is calculated by dividing the total distance covered by a moving object divided by the total amount of time taken. Write a function which calculates a speed of a moving object, <em>speed</em>.</p>
</li>
<li>
<p>Weight of a substance is calculated as follows: <em>weight = mass x gravity</em>. Write a function which calculates <em>weight</em>.</p>
</li>
<li>
<p>Temperature in oC can be converted to oF using this formula: <em>oF = (oC x 9/5) + 32</em>. Write a function which convert oC to oF <em>convertCelciusToFahrenheit</em>.</p>
</li>
<li>
<p>Body mass index(BMI) is calculated as follows: <em>bmi = weight in Kg / (height x height) in m2</em>. Write a function which calculates <em>bmi</em>. BMI is used to broadly define different weight groups in adults 20 years old or older.Check if a person is <em>underweight, normal, overweight</em> or <em>obese</em> based the information given below.</p>
<ul>
<li>The same groups apply to both men and women.</li>
<li><em>Underweight</em>: BMI is less than 18.5</li>
<li><em>Normal weight</em>: BMI is 18.5 to 24.9</li>
<li><em>Overweight</em>: BMI is 25 to 29.9</li>
<li><em>Obese</em>: BMI is 30 or more</li>
</ul>
</li>
<li>
<p>Write a function called <em>checkSeason</em>, it takes a month parameter and returns the season:Autumn, Winter, Spring or Summer.</p>
</li>
<li>
<p>Math.max returns its largest argument. Write a function findMax that takes three arguments and returns their maximum with out using Math.max method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">findMax</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">findMax</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span><span class="p">;</span>
</span></span></code></pre></div></li>
<li>
<p>Linear equation is calculated as follows: <em>ax + b = c</em>. Write a function which calculates value of a linear equation, <em>solveLinEquation</em>.</p>
</li>
<li>
<p>Quadratic equation is calculated as follows: <em>ax2 + bx + c = 0</em>. Write a function which calculates value or values of a quadratic equation, <em>solveQuadEquation</em>.</p>
</li>
<li>
<p>Declare a function name <em>printArray</em>. It takes array as a parameter and it prints out each value of the array.</p>
</li>
<li>
<p>Declare a function name <em>swapValues</em>. This function swaps value of x to y.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">swapValues</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// x =&gt; 4, y=&gt;3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">swapValues</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// x = 5, y = 4
</span></span></span></code></pre></div></li>
<li>
<p>Declare a function name <em>reverseArray</em>. It takes array as a parameter and it returns the reverse of the array (don&rsquo;t use method).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reverseArray</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reverseArray</span><span class="p">([</span><span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;C&#34;</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="s2">&#34;C&#34;</span><span class="p">,</span> <span class="s2">&#34;B&#34;</span><span class="p">,</span> <span class="s2">&#34;A&#34;</span><span class="p">];</span>
</span></span></code></pre></div></li>
<li>
<p>Declare a function name <em>capitalizeArray</em>. It takes array as a parameter and it returns the - capitalizedarray.</p>
</li>
<li>
<p>Declare a function name <em>addItem</em>. It takes an item parameter and it returns an array after adding the item</p>
</li>
<li>
<p>Declare a function name <em>removeItem</em>. It takes an index parameter and it returns an array after removing an item</p>
</li>
<li>
<p>Declare a function name <em>sumOfNumbers</em>. It takes a number parameter and it adds all the numbers in that range.</p>
</li>
<li>
<p>Declare a function name <em>sumOfOdds</em>. It takes a number parameter and it adds all the odd numbers in that - range.</p>
</li>
<li>
<p>Declare a function name <em>sumOfEven</em>. It takes a number parameter and it adds all the even numbers in that - range.</p>
</li>
<li>
<p>Declare a function name evensAndOdds . It takes a positive integer as parameter and it counts number of evens and odds in the number.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">evensAndOdds<span class="o">(</span>100<span class="o">)</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">The number of odds are 50.
</span></span><span class="line"><span class="cl">The number of evens are 51.
</span></span></code></pre></div></li>
<li>
<p>Write a function which takes any number of arguments and return the sum of the arguments</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// -&gt; 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// -&gt; 10
</span></span></span></code></pre></div></li>
<li>
<p>Writ a function which generates a <em>randomUserIp</em>.</p>
</li>
<li>
<p>Write a function which generates a <em>randomMacAddress</em></p>
</li>
<li>
<p>Declare a function name <em>randomHexaNumberGenerator</em>. When this function is called it generates a random hexadecimal number. The function return the hexadecimal number.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">console.log<span class="o">(</span>randomHexaNumberGenerator<span class="o">())</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;#ee33df&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>Declare a function name <em>userIdGenerator</em>. When this function is called it generates seven character id. The function return the id.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">console.log<span class="o">(</span>userIdGenerator<span class="o">())</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">41XTDbE
</span></span></code></pre></div></li>
<li>
<p>Modify question number n . Declare a function name <em>userIdGeneratedByUser</em>. It doesn’t take any parameter but it takes two inputs using prompt(). One of the input is the number of characters and the second input is the number of ids which are supposed to be generated.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">userIdGeneratedByUser<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;kcsy2
</span></span></span><span class="line"><span class="cl"><span class="s1">SMFYb
</span></span></span><span class="line"><span class="cl"><span class="s1">bWmeq
</span></span></span><span class="line"><span class="cl"><span class="s1">ZXOYh
</span></span></span><span class="line"><span class="cl"><span class="s1">2Rgxf
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">userIdGeneratedByUser<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;1GCSgPLMaBAVQZ26
</span></span></span><span class="line"><span class="cl"><span class="s1">YD7eFwNQKNs7qXaT
</span></span></span><span class="line"><span class="cl"><span class="s1">ycArC5yrRupyG00S
</span></span></span><span class="line"><span class="cl"><span class="s1">UbGxOFI7UXSWAyKN
</span></span></span><span class="line"><span class="cl"><span class="s1">dIV0SSUTgAdKwStr
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>Write a function name <em>rgbColorGenerator</em> and it generates rgb colors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">rgbColorGenerator<span class="o">()</span>
</span></span><span class="line"><span class="cl">rgb<span class="o">(</span>125,244,255<span class="o">)</span>
</span></span></code></pre></div></li>
<li>
<p>Write a function <strong><em>arrayOfHexaColors</em></strong> which return any number of hexadecimal colors in an array.</p>
</li>
<li>
<p>Write a function <strong><em>arrayOfRgbColors</em></strong> which return any number of RGB colors in an array.</p>
</li>
<li>
<p>Write a function <strong><em>convertHexaToRgb</em></strong> which converts hexa color to rgb and it returns an rgb color.</p>
</li>
<li>
<p>Write a function <strong><em>convertRgbToHexa</em></strong> which converts rgb to hexa color and it returns an hexa color.</p>
</li>
<li>
<p>Write a function <strong><em>generateColors</em></strong> which can generate any number of hexa or rgb colors.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">generateColors</span><span class="p">(</span><span class="s2">&#34;hexa&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)[(</span><span class="s2">&#34;#a3e12f&#34;</span><span class="p">,</span> <span class="s2">&#34;#03ed55&#34;</span><span class="p">,</span> <span class="s2">&#34;#eb3d2b&#34;</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl"><span class="nx">generateColors</span><span class="p">(</span><span class="s2">&#34;hexa&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;#b334ef&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">generateColors</span><span class="p">(</span><span class="s2">&#34;rgb&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)[</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="s2">&#34;rgb(5, 55, 175&#34;</span><span class="p">,</span> <span class="s2">&#34;rgb(50, 105, 100&#34;</span><span class="p">,</span> <span class="s2">&#34;rgb(15, 26, 80&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">generateColors</span><span class="p">(</span><span class="s2">&#34;rgb&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s2">&#34;rgb(33,79, 176)&#34;</span><span class="p">);</span>
</span></span></code></pre></div></li>
<li>
<p>Call your function <em>shuffleArray</em>, it takes an array as a parameter and it returns a shuffled array</p>
</li>
<li>
<p>Call your function <em>factorial</em>, it takes a whole number as a parameter and it return a factorial of the number</p>
</li>
<li>
<p>Call your function <em>isEmpty</em>, it takes a parameter and it checks if it is empty or not</p>
</li>
<li>
<p>Call your function <em>sum</em>, it takes any number of arguments and it returns the sum.</p>
</li>
<li>
<p>Write a function called <em>sumOfArrayItems</em>, it takes an array parameter and return the sum of all the items. Check if all the array items are number types. If not give return reasonable feedback.</p>
</li>
<li>
<p>Write a function called <em>average</em>, it takes an array parameter and returns the average of the items. Check if all the array items are number types. If not give return reasonable feedback.</p>
</li>
<li>
<p>Write a function called <em>modifyArray</em> takes array as parameter and modifies the fifth item of the array and return the array. If the array length is less than five it return &lsquo;item not found&rsquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">modifyArray</span><span class="p">([</span><span class="s1">&#39;Avocado&#39;</span><span class="p">,</span> <span class="s1">&#39;Tomato&#39;</span><span class="p">,</span> <span class="s1">&#39;Potato&#39;</span><span class="p">,</span><span class="s1">&#39;Mango&#39;</span><span class="p">,</span> <span class="s1">&#39;Lemon&#39;</span><span class="p">,</span><span class="s1">&#39;Carrot&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// →[&#39;Avocado&#39;, &#39;Tomato&#39;, &#39;Potato&#39;,&#39;Mango&#39;, &#39;LEMON&#39;, &#39;Carrot&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">modifyArray</span><span class="p">([</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">,</span><span class="s1">&#39;Apple&#39;</span><span class="p">,</span> <span class="s1">&#39;Amazon&#39;</span><span class="p">,</span><span class="s1">&#39;Microsoft&#39;</span><span class="p">,</span>  <span class="s1">&#39;IBM&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// →[&#39;Google&#39;, &#39;Facebook&#39;,&#39;Apple&#39;, &#39;Amazon&#39;,&#39;MICROSOFT&#39;,  &#39;IBM&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">modifyArray</span><span class="p">([</span><span class="s1">&#39;Google&#39;</span><span class="p">,</span> <span class="s1">&#39;Facebook&#39;</span><span class="p">,</span><span class="s1">&#39;Apple&#39;</span><span class="p">,</span> <span class="s1">&#39;Amazon&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// →&#39;Not Found&#39;
</span></span></span></code></pre></div></li>
<li>
<p>Write a function called <em>isPrime</em>, which checks if a number is prime number.</p>
</li>
<li>
<p>Write a functions which checks if all items are unique in the array.</p>
</li>
<li>
<p>Write a function which checks if all the items of the array are the same data type.</p>
</li>
<li>
<p>JavaScript variable name does not support special characters or symbols except $ or _. Write a function <strong>*isValidVariable</strong> which check if a variable is valid or invalid variable.</p>
</li>
<li>
<p>Write a function which returns array of seven random numbers in a range of 0-9. All the numbers must be unique.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">sevenRandomNumbers</span><span class="p">()[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">)];</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="object">Object</h2>
<p>Everything can be an object and objects do have properties and properties have values.
Creating an object literal. To create an object literal, we use two curly brackets.
An empty object</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{};</span>
</span></span></code></pre></div><p>Now, the person object has firstName, lastName, age, location, skills and getFullName properties. The getFullName is function inside the person object and we call it method. The <em>this</em> key word refers to the object itself.Example of object:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">location</span><span class="o">:</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Python&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;D3.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">length</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getArea</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getPerimeter</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>Getting values from an object:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">firstName</span><span class="o">:</span><span class="s1">&#39;Asabeneh&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">lastName</span><span class="o">:</span><span class="s1">&#39;Yetayeh&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span><span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">location</span><span class="o">:</span><span class="s1">&#39;Helsinki&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;HTML&#39;</span><span class="p">,</span> <span class="s1">&#39;CSS&#39;</span><span class="p">,</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="s1">&#39;React&#39;</span><span class="p">,</span><span class="s1">&#39;Node&#39;</span><span class="p">,</span><span class="s1">&#39;MongoDB&#39;</span><span class="p">,</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;D3.js&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">getFullName</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">lastName</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// value can be accessed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="s1">&#39;location&#39;</span><span class="p">]);</span>
</span></span></code></pre></div><p>Setting a new keys in an object</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">firstName</span><span class="o">:</span><span class="s1">&#39;Asabeneh&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">lastName</span><span class="o">:</span><span class="s1">&#39;Yetayeh&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span><span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">location</span><span class="o">:</span><span class="s1">&#39;Helsinki&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;HTML&#39;</span><span class="p">,</span> <span class="s1">&#39;CSS&#39;</span><span class="p">,</span> <span class="s1">&#39;JavaScript&#39;</span><span class="p">,</span> <span class="s1">&#39;React&#39;</span><span class="p">,</span><span class="s1">&#39;Node&#39;</span><span class="p">,</span><span class="s1">&#39;MongoDB&#39;</span><span class="p">,</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;D3.js&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">getFullName</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">person</span><span class="p">.</span><span class="nx">nationality</span> <span class="o">=</span> <span class="s1">&#39;Ethiopian&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">person</span><span class="p">.</span><span class="nx">live</span> <span class="o">=</span> <span class="s1">&#39;Finland&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="object-methods">Object Methods</h3>
<p><em>Object.assign</em>: To copy an object without modifying the original object</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="o">:</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JS&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">address</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">street</span><span class="o">:</span> <span class="s2">&#34;Heitamienkatu 16&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pobox</span><span class="o">:</span> <span class="mi">2002</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">city</span><span class="o">:</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getPersonInfo</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sb">`I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb"> and I live in </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">country</span><span class="si">}</span><span class="sb">. I am </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Object methods: Object.assign, Object.keys, Object.values, Object.entries
</span></span></span><span class="line"><span class="cl"><span class="c1">//hasOwnProperty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">copyPerson</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">person</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">);</span>
</span></span></code></pre></div><p><em>Object.keys</em>: To get keys of an objet as an array</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">keys</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">keys</span><span class="p">);</span> <span class="c1">//[&#39;name&#39;, &#39;age&#39;, &#39;country&#39;, &#39;skills&#39;, &#39;address&#39;, &#39;getPersonInfo&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">address</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">address</span><span class="p">);</span> <span class="c1">//[&#39;street&#39;, &#39;pobox&#39;, &#39;city&#39;]
</span></span></span></code></pre></div><p><em>Object.values</em>:To get values of an object as an array</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">values</span><span class="p">);</span>
</span></span></code></pre></div><p><em>Object.entries</em>:To get the keys and values in an array</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">entries</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">entries</span><span class="p">);</span>
</span></span></code></pre></div><p><em>hasOwnProperty</em>: To check if a specific key or property exist in an object</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">copyPerson</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&#34;score&#34;</span><span class="p">));</span>
</span></span></code></pre></div><h3 id="date-object">Date Object</h3>
<p>In JavaScript current time and date is created using JavaScript Date Object.
Some of the methods to extract date object values:<em>getFullYear(), getMonths(), getDate(), getDay(), getHours(), getMinutes</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">year</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">();</span> <span class="c1">// return year
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// return month(0 - 11)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getDate</span><span class="p">();</span> <span class="c1">// return date (1 - 31)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">hours</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getHours</span><span class="p">();</span> <span class="c1">// return number (0 - 23)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">minutes</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">();</span> <span class="c1">// return number (0 -59)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">date</span><span class="si">}</span><span class="sb">/</span><span class="si">${</span><span class="nx">month</span><span class="si">}</span><span class="sb">/</span><span class="si">${</span><span class="nx">year</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">hours</span><span class="si">}</span><span class="sb">:</span><span class="si">${</span><span class="nx">minutes</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="exercises-date-object">Exercises: Date Object</h4>
<ol>
<li>
<p>Use the new Date() object to get <em>month, date, year, hour</em> and <em>minute</em>.</p>
</li>
<li>
<p>Write a function name <em>displayDateTime</em> which display time in this format: 10/03/2019 04:08</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">displayDateTime<span class="o">()</span>
</span></span><span class="line"><span class="cl">10/03/2019 04:08
</span></span></code></pre></div></li>
</ol>
<h3 id="exercisesobjects">Exercises:Objects</h3>
<ol>
<li>
<p>Create an empty object called dog</p>
</li>
<li>
<p>Print the the dog object on the console</p>
</li>
<li>
<p>Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return <em>woof woof</em></p>
</li>
<li>
<p>Get name, legs, color, age and bark value from the dog object</p>
</li>
<li>
<p>Set new properties the dog object: breed, getDogInfo</p>
</li>
<li>
<p>Create an object literal called <em>personAccount</em>. It has <em>firstName, lastName, incomes, expenses</em> properties and it has <em>totalIncome, totalExpense, accountInfo,addIncome, addExpense</em> and <em>accountBalance</em> methods. Incomes is a set of incomes and its description and the same for expenses.</p>
</li>
<li>
<p>Count logged in users,count users having greater than equal to 50 points from the following object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Alex</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;alex@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Asab</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;asab@asab.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Redux&#34;</span><span class="p">,</span> <span class="s2">&#34;Node.js&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Brook</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;daniel@daniel.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Redux&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Daniel</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;daniel@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;Python&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">John</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;john@john.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Redux&#34;</span><span class="p">,</span> <span class="s2">&#34;Node.js&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">point</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Thomas</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;thomas@thomas.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div></li>
<li>
<p>Set your name in the users object without modifying the original users object</p>
</li>
<li>
<p>Get all keys or properties of users object</p>
</li>
<li>
<p>Get all the values of users object</p>
</li>
<li>
<p>** Develop a small JavaScript library.</p>
</li>
</ol>
<h2 id="json">JSON</h2>
<p>JSON stands for JavaScript Object Notation. The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text or string only. JSON is a light weight data format for storing and transporting. JSON is mostly used when data is sent from a server to a client. JSON is an easier-to-use alternative to XML.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;users&#34;</span><span class="o">:</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;firstName&#34;</span><span class="o">:</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;lastName&#34;</span><span class="o">:</span><span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">250</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;email&#34;</span><span class="o">:</span><span class="s2">&#34;asab@asb.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;firstName&#34;</span><span class="o">:</span><span class="s2">&#34;Alex&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;lastName&#34;</span><span class="o">:</span><span class="s2">&#34;James&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">25</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;email&#34;</span><span class="o">:</span><span class="s2">&#34;alex@alex.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;firstName&#34;</span><span class="o">:</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;lastName&#34;</span><span class="o">:</span><span class="s2">&#34;Tekle&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;age&#34;</span><span class="o">:</span><span class="mi">28</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;email&#34;</span><span class="o">:</span><span class="s2">&#34;lidiya@lidiya.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The above JSON example is not much different for a normal object. Then, what is the difference ? The difference is the key of a JSON object should be with double quotes or it should be a string. JavaScript Object and JSON are very similar that we can change JSON to Object and Object to JSON.</p>
<p>Let us see the above example in more detail, it starts with a curly bracket. Inside the curly bracket, there is &ldquo;users&rdquo; key which has a value array. Inside the array we have different objects and each objects has keys, each keys has to have double quotes. For instance, we use &ldquo;firstNaMe&rdquo; instead of just firstName, however in object we use keys without double quotes. This is the major difference between an object and a JSON. Let&rsquo;s see more examples about JSON.</p>
<p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Alex&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;alex@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Asab&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;asab@asab.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Redux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Express&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Node&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Brook&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;daniel@daniel.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Redux&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Daniel&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;daniel@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Python&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;John&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;john@john.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Redux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Node.js&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Thomas&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;thomas@thomas.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Paul&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span><span class="o">:</span> <span class="s2">&#34;paul@paul.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Express&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Node&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span><span class="o">:</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="converting-json-to-javascript-object">Converting JSON to JavaScript Object</h3>
<p>Mostly we fetch JSON data from HTTP response or from a file, but we can store the JSON as a string and we can change to Object for sake of demonstration. In JavaScript the keyword <em>JSON</em> has <em>parse()</em> and <em>stringify()</em> methods. When we want to change the JSON to an object we parse the JSON using <em>JSON.parse()</em>. When we want to change the object to JSON we use <em>JSON.stringify()</em>.</p>
<h4 id="jsonparse">JSON.parse()</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">json</span><span class="p">[,</span> <span class="nx">reviver</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="c1">// json or text , the data
</span></span></span><span class="line"><span class="cl"><span class="c1">// reviver is an optional callback function
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">usersText</span> <span class="o">=</span> <span class="sb">`{
</span></span></span><span class="line"><span class="cl"><span class="sb">&#34;users&#34;:[
</span></span></span><span class="line"><span class="cl"><span class="sb">  {
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;firstName&#34;:&#34;Asabeneh&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;lastName&#34;:&#34;Yetayeh&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;age&#34;:250,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;email&#34;:&#34;asab@asb.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">  },
</span></span></span><span class="line"><span class="cl"><span class="sb">  {
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;firstName&#34;:&#34;Alex&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;lastName&#34;:&#34;James&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;age&#34;:25,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;email&#34;:&#34;alex@alex.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">  },
</span></span></span><span class="line"><span class="cl"><span class="sb">  {
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;firstName&#34;:&#34;Lidiya&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;lastName&#34;:&#34;Tekle&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;age&#34;:28,
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;email&#34;:&#34;lidiya@lidiya.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">]
</span></span></span><span class="line"><span class="cl"><span class="sb">}`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">usersObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">usersText</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">usersObj</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="using-a-reviver-function-with-jsonparse">Using a reviver function with JSON.parse()</h3>
<p>To use the reviver function as a formatter, we put the keys we want to format first name and last name value. Let us say, we are interested to format the firstName and lastName of the JSON data .</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">usersText</span> <span class="o">=</span> <span class="sb">`{
</span></span></span><span class="line"><span class="cl"><span class="sb">&#34;users&#34;:[
</span></span></span><span class="line"><span class="cl"><span class="sb">  {
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;firstName&#34;:&#34;Asabeneh&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;lastName&#34;:&#34;Yetayeh&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;age&#34;:250,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;email&#34;:&#34;asab@asb.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">  },
</span></span></span><span class="line"><span class="cl"><span class="sb">  {
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;firstName&#34;:&#34;Alex&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;lastName&#34;:&#34;James&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;age&#34;:25,
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;email&#34;:&#34;alex@alex.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">  },
</span></span></span><span class="line"><span class="cl"><span class="sb">  {
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;firstName&#34;:&#34;Lidiya&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;lastName&#34;:&#34;Tekle&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;age&#34;:28,
</span></span></span><span class="line"><span class="cl"><span class="sb">  &#34;email&#34;:&#34;lidiya@lidiya.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">  }
</span></span></span><span class="line"><span class="cl"><span class="sb">]
</span></span></span><span class="line"><span class="cl"><span class="sb">}`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">usersObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">usersText</span><span class="p">,</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">newValue</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="k">typeof</span> <span class="nx">value</span> <span class="o">==</span> <span class="s2">&#34;string&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">key</span> <span class="o">!=</span> <span class="s2">&#34;email&#34;</span> <span class="o">?</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">:</span> <span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">newValue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">usersObj</span><span class="p">);</span>
</span></span></code></pre></div><p>The <em>JSON.parse()</em> is very handy to use. You do not have to pass optional parameter, you can just use it with the required parameter and you will achieve quite a lot.</p>
<h3 id="converting-object-to-json">Converting Object to JSON</h3>
<p>When we want to change the object to JSON we use <em>JSON.stringify()</em>. The stringify method takes one required parameter and two optional parameters. The replacer is used as filter and the space is an indentations. If we do not want to filter out any of the keys from the object we can just pass undefined.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">replacer</span><span class="p">,</span> <span class="nx">space</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// json or text , the data
</span></span></span><span class="line"><span class="cl"><span class="c1">// reviver is an optional callback function
</span></span></span></code></pre></div><p>Let us convert the following object to a string. First let use keep all the keys and also let us have 4 space indentation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Alex</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;alex@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Asab</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;asab@asab.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Redux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Express&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Brook</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;daniel@daniel.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Redux&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Daniel</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;daniel@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;Python&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">John</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;john@john.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Redux&#34;</span><span class="p">,</span> <span class="s2">&#34;Node.js&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Thomas</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;thomas@thomas.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Paul</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;paul@paul.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Express&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">points</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">users</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span> <span class="c1">// text means JSON- because json is a string form of an object.
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Alex&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;alex@alex.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 20,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">30</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Asab&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;asab@asab.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Redux&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;MongoDB&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Express&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Node&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 25,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">50</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Brook&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;daniel@daniel.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Redux&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 30,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: true,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">50</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Daniel&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;daniel@alex.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Python&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 20,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">40</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;John&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;john@john.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Redux&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Node.js&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 20,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: true,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">50</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Thomas&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;thomas@thomas.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 20,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">40</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Paul&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;email&#34;</span>: <span class="s2">&#34;paul@paul.com&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;skills&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;HTML&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;CSS&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;JavaScript&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;MongoDB&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Express&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;React&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Node&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;age&#34;</span>: 20,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;isLoggedIn&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;points&#34;</span>: <span class="m">40</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="using-a-filter-array-with-jsonstringify">Using a Filter Array with JSON.stringify</h3>
<p>Now, lets use the replacer as a filter. The user object has long list of keys but we are interested only in few of them. We put the keys we want to keep in array as show in the example and use it the place of the replacer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="o">:</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">city</span><span class="o">:</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;alex@alex.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Pyhton&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">250</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">points</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;firstName&#34;</span><span class="p">,</span> <span class="s2">&#34;lastName&#34;</span><span class="p">,</span> <span class="s2">&#34;country&#34;</span><span class="p">,</span> <span class="s2">&#34;city&#34;</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">txt</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;firstName&#34;</span>: <span class="s2">&#34;Asabeneh&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;lastName&#34;</span>: <span class="s2">&#34;Yetayeh&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;country&#34;</span>: <span class="s2">&#34;Finland&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;city&#34;</span>: <span class="s2">&#34;Helsinki&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;age&#34;</span>: <span class="m">250</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="exercises">Exercises</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">skills</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JS&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Node&#34;</span><span class="p">,</span> <span class="s2">&#34;Python&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">250</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">isMarried</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;Yetayehe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">250</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">isMarried</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JS&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Node&#34;</span><span class="p">,</span> <span class="s2">&#34;Python&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="sb">`{
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;Alex&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;alex@alex.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 20,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: false,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 30
</span></span></span><span class="line"><span class="cl"><span class="sb">    },
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;Asab&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;asab@asab.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Redux&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;MongoDB&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Express&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;React&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Node&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 25,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: false,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 50
</span></span></span><span class="line"><span class="cl"><span class="sb">    },
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;Brook&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;daniel@daniel.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;React&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Redux&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 30,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 50
</span></span></span><span class="line"><span class="cl"><span class="sb">    },
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;Daniel&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;daniel@alex.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Python&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 20,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: false,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 40
</span></span></span><span class="line"><span class="cl"><span class="sb">    },
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;John&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;john@john.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;React&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Redux&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Node.js&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 20,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 50
</span></span></span><span class="line"><span class="cl"><span class="sb">    },
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;Thomas&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;thomas@thomas.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;React&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 20,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: false,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 40
</span></span></span><span class="line"><span class="cl"><span class="sb">    },
</span></span></span><span class="line"><span class="cl"><span class="sb">    &#34;Paul&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;email&#34;: &#34;paul@paul.com&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;skills&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;HTML&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;CSS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;JavaScript&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;MongoDB&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Express&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;React&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sb">            &#34;Node&#34;
</span></span></span><span class="line"><span class="cl"><span class="sb">        ],
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;age&#34;: 20,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;isLoggedIn&#34;: false,
</span></span></span><span class="line"><span class="cl"><span class="sb">        &#34;points&#34;: 40
</span></span></span><span class="line"><span class="cl"><span class="sb">    }
</span></span></span><span class="line"><span class="cl"><span class="sb">}
</span></span></span><span class="line"><span class="cl"><span class="sb">`</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="exercises-level-1">Exercises Level 1</h3>
<ol>
<li>Change skills array to JSON using JSON.stringify()</li>
<li>Stringify the age variable</li>
<li>Stringify the isMarried variable</li>
<li>Stringify the student object</li>
</ol>
<h3 id="exercises-level-2">Exercises Level 2</h3>
<ol>
<li>Stringify the students object with only firstName, lastName and skills properties</li>
</ol>
<h2 id="higher-order-function">Higher Order Function</h2>
<p>Higher order functions are functions which take other function as a parameter or return a function as a value. The function passed as a parameter is called callback.</p>
<h3 id="callback">Callback</h3>
<p>A callback is a function which can be passed as parameter to other function. See the example below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// a callback function, the function could be any name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">n</span> <span class="o">**</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="c1">// function take other function as a callback
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">cube</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">*</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cube</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span></code></pre></div><h3 id="returning-function">Returning function</h3>
<p>Higher order functions return function as a value
​</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Higher order function returning an other function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">higherOrder</span> <span class="o">=</span> <span class="nx">n</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="nx">m</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">doWhatEver</span> <span class="o">=</span> <span class="nx">t</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">*</span> <span class="nx">m</span> <span class="o">+</span> <span class="nx">t</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">doWhatEver</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">doSomething</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">higherOrder</span><span class="p">(</span><span class="mi">2</span><span class="p">)(</span><span class="mi">3</span><span class="p">)(</span><span class="mi">10</span><span class="p">))</span>
</span></span></code></pre></div><p>Let us see were we use call back functions.For instance the <em>forEach</em> method uses call back.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sumArray</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">callBack</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">element</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">sum</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sumArray</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">15</span>
</span></span></code></pre></div><p>The above example can be simplified as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sumArray</span> <span class="o">=</span> <span class="nx">arr</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="nx">numbers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">element</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">sum</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sumArray</span><span class="p">(</span><span class="nx">numbers</span><span class="p">))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">15</span>
</span></span></code></pre></div><h3 id="setting-time">setting time</h3>
<p>In JavaScript we can execute some activity on certain interval of time or we can schedule(wait) for sometime to execute some activities.</p>
<ul>
<li>setInterval</li>
<li>setTimeout</li>
</ul>
<h4 id="setinterval">setInterval</h4>
<p>In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback will be always called in that interval of time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">callBack</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">setInterval</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">duration</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">setInterval</span><span class="p">(</span><span class="nx">sayHello</span><span class="p">,</span> <span class="mi">2000</span><span class="p">);</span> <span class="c1">// it prints hello in every 2 seconds
</span></span></span></code></pre></div><h4 id="settimeout">setTimeout</h4>
<p>In JavaScript, we use setTimeout higher order function to execute some action at some time in the future. The setTimeout global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback wait for that amount of time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">callback</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">duration</span><span class="p">);</span> <span class="c1">// duration in milliseconds
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">sayHello</span><span class="p">,</span> <span class="mi">2000</span><span class="p">);</span> <span class="c1">// it prints hello after it waits for 2 seconds.
</span></span></span></code></pre></div><h3 id="exercises-level-3">Exercises Level 3</h3>
<ol>
<li>Parse the <em>txt</em> JSON to object.</li>
<li>Find the the user who has many skills from the variable stored in <em>txt</em>.</li>
</ol>
<h2 id="functional-programming">Functional Programming</h2>
<ul>
<li><em>forEach</em>: Iterate an array elements and use for array. It takes a callback function with elements and index parameter.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="c1">// The above code can be written using arrow function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="c1">// The above code can be written using arrow function and explicit return
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li><em>map</em>: Iterate an array elements and modify the array elements. It takes a callback function with elements and index parameter and return the modified array.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">modifiedArray</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">element</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*Arrow function and explicit return
</span></span></span><span class="line"><span class="cl"><span class="cm">const modifiedArray = arr.map((element,index) =&gt; element);
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="c1">//Example
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbersSquare</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">num</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">num</span> <span class="o">*</span> <span class="nx">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbersSquare</span><span class="p">);</span> <span class="c1">// [1,4,9,16,25]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">namesToUpperCase</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">name</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">name</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">namesToUpperCase</span><span class="p">);</span> <span class="c1">//[&#39;ASABENEH&#39;, &#39;MATHIAS&#39;, &#39;ELIAS&#39;, &#39;BROOK&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Albania&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Bolivia&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Canada&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Denmark&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Ethiopia&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Germany&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Hungary&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Ireland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Japan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Kenya&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countriesToUpperCase</span> <span class="o">=</span> <span class="nx">countries</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">country</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">country</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesToUpperCase</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [&#39;ALBANIA&#39;, &#39;BOLIVIA&#39;, &#39;CANADA&#39;, &#39;DENMARK&#39;, &#39;ETHIOPIA&#39;, &#39;FINLAND&#39;, &#39;GERMANY&#39;, &#39;HUNGARY&#39;, &#39;IRELAND&#39;, &#39;JAPAN&#39;, &#39;KENYA&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">// Arrow function
</span></span></span><span class="line"><span class="cl"><span class="cm">const countriesToUpperCase = countries.map((country) =&gt; {
</span></span></span><span class="line"><span class="cl"><span class="cm">  return country.toUpperCase();
</span></span></span><span class="line"><span class="cl"><span class="cm">})
</span></span></span><span class="line"><span class="cl"><span class="cm">//Explicit return arrow function
</span></span></span><span class="line"><span class="cl"><span class="cm">const countriesToUpperCase = countries.map(country =&gt; country.toUpperCase());
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div><ul>
<li><em>Filter</em>: Filter out items which full fill filtering conditions</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Filter countries containing land
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">countriesContainingLand</span> <span class="o">=</span> <span class="nx">countries</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">country</span><span class="p">)</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;land&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesContainingLand</span><span class="p">);</span> <span class="c1">//[&#39;Finland&#39;, &#39;Ireland&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countriesEndByia</span> <span class="o">=</span> <span class="nx">countries</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">country</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">country</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="s2">&#34;ia&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesEndByia</span><span class="p">);</span> <span class="c1">//[&#39;Albania&#39;, &#39;Bolivia&#39;,&#39;Ethiopia&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countriesHaveFiveLetters</span> <span class="o">=</span> <span class="nx">countries</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">country</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">country</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesHaveFiveLetters</span><span class="p">);</span> <span class="c1">//  [&#39;Japan&#39;, &#39;Kenya&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">scores</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">95</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">80</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">50</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Martha&#34;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">85</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="nx">score</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">scoresGreaterEight</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">score</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">score</span><span class="p">.</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="mi">80</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scoresGreaterEight</span><span class="p">);</span> <span class="c1">//[{name: &#39;Asabeneh&#39;, score: 95}, {name: &#39;Martha&#39;, score: 85},{name: &#39;John&#39;, score: 100}]
</span></span></span></code></pre></div><ul>
<li><em>reduce</em>: Reduce takes a callback function. The call back function takes accumulator and current value as a parameter and returns a single value:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">accum</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">accum</span> <span class="o">+</span> <span class="nx">curr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span> <span class="c1">// 15
</span></span></span></code></pre></div><ul>
<li><em>every</em>: Check if all the elements are similar in one aspect. It returns boolean</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">bools</span> <span class="o">=</span> <span class="p">[</span><span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">bools</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">b</span> <span class="o">===</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">checkType</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">name</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&#34;string&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">checkDataTypes</span><span class="p">);</span> <span class="c1">// true;
</span></span></span></code></pre></div><ul>
<li><em>some</em>: Check if some of the elements are similar in one aspect. It returns boolean</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">bools</span> <span class="o">=</span> <span class="p">[</span><span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">bools</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">b</span> <span class="o">===</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">//true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">checkType</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">some</span><span class="p">((</span><span class="nx">name</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s2">&#34;number&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">checkDataTypes</span><span class="p">);</span> <span class="c1">// false
</span></span></span></code></pre></div><ul>
<li><em>find</em>: Return the first element which satisfies the condition</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">24</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">18</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">name</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// Asabeneh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="nx">ages</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">age</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">age</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 18
</span></span></span></code></pre></div><ul>
<li><em>findIndex</em>: Return the position of the first element which satisfies the condition</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">24</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">18</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">name</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="nx">ages</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">((</span><span class="nx">age</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">age</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// 5
</span></span></span></code></pre></div><ul>
<li>
<p><em>sort</em>: The sort methods arranges the array elements either ascending or descending order. By default, the <strong><em>sort()</em></strong> method sorts values as strings.This works well for string array items but not for numbers. If number values are sorted as strings and it give us wrong result. Sort method modify the original array. It is recommended to copy the original document before you start sorting.</p>
</li>
<li>
<p><em>Sorting string values</em></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">products</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Milk&#34;</span><span class="p">,</span> <span class="s2">&#34;Coffee&#34;</span><span class="p">,</span> <span class="s2">&#34;Sugar&#34;</span><span class="p">,</span> <span class="s2">&#34;Honey&#34;</span><span class="p">,</span> <span class="s2">&#34;Apple&#34;</span><span class="p">,</span> <span class="s2">&#34;Carrot&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">products</span><span class="p">.</span><span class="nx">sort</span><span class="p">());</span> <span class="c1">// [&#39;Apple&#39;, &#39;Carrot&#39;, &#39;Coffee&#39;, &#39;Honey&#39;, &#39;Milk&#39;, &#39;Sugar&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1">//Now the original products array  is also sorted
</span></span></span></code></pre></div><ul>
<li><em>Sorting Numeric values</em></li>
</ul>
<p>As you can see in the example below, 100 came first after sorted in ascending order. Sort converts items to string , since &lsquo;100&rsquo; and other numbers compared, 1 which the beginning of the string &lsquo;100&rsquo; became the smallest. To avoid this, we use a compare call back function inside the sort method, which return a negative, zero or positive.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mf">9.81</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Using sort method to sort number items provide a wrong result. see below
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">.</span><span class="nx">sort</span><span class="p">());</span> <span class="c1">//[100, 3.14, 37, 9.81]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">numbers</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">// [3.14, 9.81, 37, 100]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">numbers</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span> <span class="c1">//[100, 37, 9.81, 3.14]
</span></span></span></code></pre></div><ul>
<li><em>Sorting Object Arrays</em></li>
</ul>
<p>When ever we sort objects in an array. We use the object key to compare. Lets see the example below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">objArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">key</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">key</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">key</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">objArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">])</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">])</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">150</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Brook&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">50</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Eyo&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">100</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">22</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">users</span><span class="p">.</span><span class="nx">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">age</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">age</span> <span class="o">&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">users</span><span class="p">);</span> <span class="c1">// sorted ascending
</span></span></span><span class="line"><span class="cl"><span class="c1">//[{…}, {…}, {…}, {…}]
</span></span></span></code></pre></div><h3 id="exercises-1">Exercises</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Estonia&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Sweden&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Denmark&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Norway&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;IceLand&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Mathias&#34;</span><span class="p">,</span> <span class="s2">&#34;Elias&#34;</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>
</span></span></code></pre></div><ol>
<li>Explain the difference between <strong><em>forEach, map, filter, and reduce</em></strong>.</li>
<li>Define a call function before you them in forEach, map, filter or reduce.</li>
<li>Use <strong><em>forEach</em></strong> to console.log each country in the countries array.</li>
<li>Use <strong><em>forEach</em></strong> to console.log each name in the names array.</li>
<li>Use <strong><em>forEach</em></strong> to console.log each number in the numbers array.</li>
<li>Use <strong><em>map</em></strong> to create a new array by changing each country to uppercase in the countries array;</li>
<li>Use <strong><em>map</em></strong> to create a new array by changing each number to square in the numbers array</li>
<li>Use <strong><em>map</em></strong> to change to each name to uppercase in the names array</li>
<li>Use <strong><em>filter</em></strong> to filter out countries containing <strong><em>land</em></strong>.</li>
<li>Use <strong><em>filter</em></strong> to filter out countries having six character.</li>
<li>Use <strong><em>filter</em></strong> to filter out countries containing six letters and more in the country array.</li>
<li>Use <strong><em>filter</em></strong> to filter out country start with &lsquo;E&rsquo;;</li>
<li>Chain two or more array iterators(eg. arr.map(callback).filter(callback).reduce(callback))</li>
<li>Declare a function called getStringLists which takes an array as a parameter and then returns an array only with string items.</li>
<li>Use <strong><em>reduce</em></strong> to sum all the numbers in the numbers array.</li>
<li>Use <strong><em>reduce</em></strong> to concatenate all the countries and to produce this sentence: <strong><em>Estonia, Finland, Sweden, Denmark, Norway, and IceLand are north European countries</em></strong></li>
<li>Explain the difference between <strong><em>some</em></strong> and <strong><em>every</em></strong></li>
<li>Use <strong><em>some</em></strong> to check if some names&rsquo; length greater than seven in names array</li>
<li>Use <strong><em>every</em></strong> to check if all the countries contain the word land</li>
<li>Explain the difference between <strong><em>find</em></strong> and <strong><em>findIndex</em></strong>.</li>
<li>Use <strong><em>find</em></strong> to find the first country containing only six letters in the countries array</li>
<li>Use <strong><em>findIndex</em></strong> to find the position of the first country containing only six letters in the countries array</li>
<li>Use <strong><em>findIndex</em></strong> to find the position of <strong><em>Norway</em></strong> if it doesn&rsquo;t exist in the array you will get -1.</li>
<li>Use <strong><em>findIndex</em></strong> to find the position of <strong><em>Russia</em></strong> if it doesn&rsquo;t exist in the array you will get -1.</li>
<li>Declare a function called <strong><em>categorizeCountries</em></strong> which returns an array of countries which have some common pattern(you find the countries array in this repository as countries.js(eg &rsquo;land&rsquo;, &lsquo;ia&rsquo;, &lsquo;island&rsquo;,&lsquo;stan&rsquo;)).</li>
<li>Create a function which return an array of objects, which is the letter and the number of times the letter use to start with a name of a country.</li>
<li>Declare a <strong><em>getFirstTenCountries</em></strong> function and return an array of ten countries. Use different functional programming to work on the countries.js array</li>
<li>Declare a <strong><em>getLastTenCountries</em></strong> function which which returns the last ten countries in the countries array.</li>
<li>Find out which <em>letter</em> is used many <em>times</em> as initial for a country name from the countries array (eg. Finland, Fiji, France etc)</li>
<li>Use the countries information, in the data folder. Sort countries by name, by capital, by population</li>
<li>Sort out the ten most spoken languages by location.</li>
<li>Sort out the ten most populated countries.</li>
</ol>
<h2 id="destructuring-and-spread">Destructuring and Spread</h2>
<p>Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable.</p>
<h3 id="destructing-arrays">Destructing Arrays</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="p">[</span><span class="nx">numOne</span><span class="p">,</span> <span class="nx">numTwo</span><span class="p">,</span> <span class="nx">numThree</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numOne</span><span class="p">,</span> <span class="nx">numTwo</span><span class="p">,</span> <span class="nx">numThree</span><span class="p">)</span> <span class="c1">// 1,2,3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Asabeneh&#39;</span><span class="p">,</span> <span class="s1">&#39;Brook&#39;</span><span class="p">,</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;John&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="p">[</span><span class="nx">firstPerson</span><span class="p">,</span> <span class="nx">secondPerson</span><span class="p">,</span> <span class="nx">ThirdPerson</span><span class="p">,</span> <span class="nx">fourth</span> <span class="nx">Person</span><span class="p">]</span> <span class="o">=</span> <span class="nx">names</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">secondPerson</span><span class="p">,</span><span class="nx">thirdPerson</span><span class="p">,</span> <span class="nx">fourthPerson</span><span class="p">)</span> <span class="c1">//Asabeneh, Brook, David, John
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">scientificConstants</span> <span class="o">=</span> <span class="p">[</span><span class="mf">2.72</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="mf">9.81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="p">[</span><span class="nx">e</span><span class="p">,</span> <span class="nx">pi</span><span class="p">,</span> <span class="nx">gravity</span><span class="p">,</span> <span class="nx">bodyTemp</span><span class="p">,</span> <span class="nx">boilingTemp</span><span class="p">]</span> <span class="o">=</span> <span class="nx">scientificConstants</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">pi</span><span class="p">,</span><span class="nx">gravity</span><span class="p">,</span> <span class="nx">bodyTemp</span><span class="p">,</span> <span class="nx">boilingTemp</span><span class="p">)</span> <span class="c1">//2.72, 3.14, 9.81, 37, 100
</span></span></span></code></pre></div><p>If we like to skip on of the values in the array we use additional comma. The comma helps to omit the value at that index</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="p">[</span><span class="nx">numOne</span><span class="p">,</span> <span class="p">,</span> <span class="p">,</span> <span class="nx">numThree</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">;</span> <span class="c1">//2 is omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">numOne</span><span class="p">,,</span> <span class="nx">numThree</span><span class="p">)</span> <span class="c1">// 1,2,3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Asabeneh&#39;</span><span class="p">,</span> <span class="s1">&#39;Brook&#39;</span><span class="p">,</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="s1">&#39;John&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="p">[,</span> <span class="nx">secondPerson</span><span class="p">,</span> <span class="p">,</span> <span class="nx">fourth</span> <span class="nx">Person</span><span class="p">]</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span> <span class="c1">// first and third person is omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">secondPerson</span><span class="p">,</span> <span class="nx">fourthPerson</span><span class="p">)</span> <span class="c1">//Brook, John
</span></span></span></code></pre></div><p>We can use default value in case the value of array for that index is undefined:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">,</span> <span class="s2">&#34;Brook&#34;</span><span class="p">,</span> <span class="s2">&#34;David&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="nx">firstPerson</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">secondPerson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">thirdPerson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fourthPerson</span> <span class="o">=</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span> <span class="o">=</span> <span class="nx">names</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstPerson</span><span class="p">,</span> <span class="nx">secondPerson</span><span class="p">,</span> <span class="nx">thirdPerson</span><span class="p">,</span> <span class="nx">fourthPerson</span><span class="p">);</span> <span class="c1">// Asabeneh Brook David John
</span></span></span></code></pre></div><h4 id="destructuring-object">Destructuring Object</h4>
<p>When we destructure the name of the variable we use to destructure should be exactly the same us the key or property of the object. See example below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">area</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="p">{</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">area</span><span class="p">,</span> <span class="nx">perimeter</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">rectangle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">area</span><span class="p">,</span> <span class="nx">perimeter</span><span class="p">);</span> <span class="c1">//20 10 200 undefined
</span></span></span></code></pre></div><h4 id="renaming-during-structuring">Renaming during structuring</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">area</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="p">{</span> <span class="nx">width</span><span class="o">:</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">heigh</span><span class="o">:</span> <span class="nx">h</span><span class="p">,</span> <span class="nx">area</span><span class="o">:</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">perimeter</span><span class="o">:</span> <span class="nx">p</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">rectangle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">p</span><span class="p">);</span> <span class="c1">//20 10 200 undefined
</span></span></span></code></pre></div><p>If the key is not found in the object the variable will be assigned to undefined. In case, the key is not in the object we can give a default value during declaration. See the example.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">area</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="p">{</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">heigh</span><span class="p">,</span> <span class="nx">area</span><span class="p">,</span> <span class="nx">perimeter</span> <span class="o">=</span> <span class="mi">60</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">rectangle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">area</span><span class="p">,</span> <span class="nx">perimeter</span><span class="p">);</span> <span class="c1">//20 10 200 60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//Lets modify the object:width to 30 and perimeter to 80
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">area</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">perimeter</span><span class="o">:</span> <span class="mi">80</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="p">{</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">heigh</span><span class="p">,</span> <span class="nx">area</span><span class="p">,</span> <span class="nx">perimeter</span> <span class="o">=</span> <span class="mi">60</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">rectangle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">area</span><span class="p">,</span> <span class="nx">perimeter</span><span class="p">);</span> <span class="c1">//20 10 200 80
</span></span></span></code></pre></div><p>Destructuring keys as a function parameters. Lets create a function which take a rectangle object and it return a perimeter of a rectangle.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Without destructuring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">rect</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">calculatePerimeter</span> <span class="o">=</span> <span class="p">(</span><span class="nx">rectangle</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">rectangle</span><span class="p">.</span><span class="nx">width</span> <span class="o">+</span> <span class="nx">rectangle</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculatePerimeter</span><span class="p">(</span><span class="nx">rect</span><span class="p">));</span> <span class="c1">// 60
</span></span></span><span class="line"><span class="cl"><span class="c1">//with destructuring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">calculatePerimeter</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="nx">width</span> <span class="o">+</span> <span class="nx">height</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculatePerimeter</span><span class="p">(</span><span class="nx">rect</span><span class="p">));</span> <span class="c1">// 60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//Another Example
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="o">:</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">job</span><span class="o">:</span> <span class="s2">&#34;Instructor and Developer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;HTML&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;CSS&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;React&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Redux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Python&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;D3.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nx">languages</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;Amharic&#34;</span><span class="p">,</span> <span class="s2">&#34;English&#34;</span><span class="p">,</span> <span class="s2">&#34;Suomi(Finnish)&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Lets create a function which give information about the person object without destructuring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getPersonInfo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">skills</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">skills</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">formattedSkills</span> <span class="o">=</span> <span class="nx">skills</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">languages</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">formattedLanguages</span> <span class="o">=</span> <span class="nx">languages</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">obj</span><span class="p">.</span><span class="nx">firstName</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">obj</span><span class="p">.</span><span class="nx">lastName</span><span class="si">}</span><span class="sb"> lives in </span><span class="si">${</span><span class="nx">obj</span><span class="p">.</span><span class="nx">country</span><span class="si">}</span><span class="sb">. He is  </span><span class="si">${</span>
</span></span><span class="line"><span class="cl">    <span class="nx">obj</span><span class="p">.</span><span class="nx">age</span>
</span></span><span class="line"><span class="cl">  <span class="si">}</span><span class="sb"> years old. He is an </span><span class="si">${</span><span class="nx">obj</span><span class="p">.</span><span class="nx">job</span><span class="si">}</span><span class="sb">. He teaches </span><span class="si">${</span><span class="nx">formattedSkills</span><span class="si">}</span><span class="sb"> and </span><span class="si">${</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="p">[</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="si">}</span><span class="sb">. He speaks </span><span class="si">${</span><span class="nx">formattedLanguages</span><span class="si">}</span><span class="sb"> and a little bit of </span><span class="si">${</span><span class="nx">languages</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getPersonInfo</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Lets create a function which give information about the person object with destructuring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getPersonInfo</span> <span class="o">=</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">firstName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">lastName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">country</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">job</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">skills</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">languages</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">formattedSkills</span> <span class="o">=</span> <span class="nx">skills</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">formattedLanguages</span> <span class="o">=</span> <span class="nx">languages</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">firstName</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="nx">lastName</span><span class="si">}</span><span class="sb"> lives in </span><span class="si">${</span><span class="nx">country</span><span class="si">}</span><span class="sb">. He is </span><span class="si">${</span><span class="nx">age</span><span class="si">}</span><span class="sb"> years old. He is an </span><span class="si">${</span><span class="nx">job</span><span class="si">}</span><span class="sb">. He teaches </span><span class="si">${</span><span class="nx">formattedSkills</span><span class="si">}</span><span class="sb"> and </span><span class="si">${</span>
</span></span><span class="line"><span class="cl">    <span class="nx">skills</span><span class="p">[</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="si">}</span><span class="sb">. He speaks </span><span class="si">${</span><span class="nx">formattedLanguages</span><span class="si">}</span><span class="sb"> and a little bit of </span><span class="si">${</span><span class="nx">languages</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getPersonInfo</span><span class="p">(</span><span class="nx">person</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Asabeneh Yetayeh lives in Finland. He is  200 years old. He is an Instructor and Developer. He teaches HTML, CSS, JavaScript, React, Redux, Node, MongoDB, Python and D3.js. He speaks Amharic, English and a little bit of Suomi(Finnish)
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></div><h3 id="spread-or-rest-operator">Spread or Rest Operator</h3>
<h4 id="exercise-destructuring">Exercise: Destructuring</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">constants</span> <span class="o">=</span> <span class="p">[</span><span class="mf">2.72</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="mf">9.81</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">100</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Estonia&#34;</span><span class="p">,</span> <span class="s2">&#34;Sweden&#34;</span><span class="p">,</span> <span class="s2">&#34;Denmark&#34;</span><span class="p">,</span> <span class="s2">&#34;Norway&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">rectangle</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">width</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">height</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">area</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">perimeter</span><span class="o">:</span> <span class="mi">60</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><ol>
<li>Assign the elements of constants array to e, pi, gravity, humanBodyTemp, waterBoilingTemp.</li>
<li>Assign the elements of countries array to fin, est, sw, den, nor</li>
<li>Destructure the rectangle object by its properties or keys.</li>
</ol>
<h2 id="map-and-set">Map and Set</h2>
<h2 id="set">Set</h2>
<p>Set is a collection of unique elements. Lets see how to create a set</p>
<h3 id="creating-a-set">Creating a set</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">companies</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
</span></span></code></pre></div><h3 id="adding-an-element-to-a-set">Adding an element to a set</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">);</span> <span class="c1">// add element to the set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Facebook&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Amazon&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Oracle&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Microsoft&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 5 elements in the set
</span></span></span></code></pre></div><h3 id="deleting-an-element-a-set">Deleting an element a set</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 4 elements left in the set
</span></span></span></code></pre></div><h3 id="checking-an-element-in-the-set">Checking an element in the set</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&#34;Facebook&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span></code></pre></div><h3 id="clearing-the-set">Clearing the set</h3>
<p>It removes all the elements</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span></span></code></pre></div><p>See the example below to learn how to use set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finnish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Spanish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">langSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">languages</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">langSet</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">langSet</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">counts</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">l</span> <span class="k">of</span> <span class="nx">langSet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">filteredLang</span> <span class="o">=</span> <span class="nx">languages</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">lng</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">lng</span> <span class="o">===</span> <span class="nx">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filteredLang</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">counts</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">lang</span><span class="o">:</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="nx">filteredLang</span><span class="p">.</span><span class="nx">length</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counts</span><span class="p">);</span>
</span></span></code></pre></div><h2 id="set-1">Set</h2>
<p>Set is a collection a collection of elements. Set can only contains unique elements.
Lets see how to create a set</p>
<h3 id="creating-an-empty-set">Creating an empty set</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">companies</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">{}</span>
</span></span></code></pre></div><h3 id="creating-set-from-array">Creating set from array</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finnish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Spanish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">setOfLangauges</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">languages</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">setOfLangauges</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>4<span class="o">)</span> <span class="o">{</span><span class="s2">&#34;English&#34;</span>, <span class="s2">&#34;Finnish&#34;</span>, <span class="s2">&#34;French&#34;</span>, <span class="s2">&#34;Spanish&#34;</span><span class="o">}</span>
</span></span></code></pre></div><p>Set is an iterable object and we can iterate through each elements.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finnish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Spanish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">setOfLangauges</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">languages</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">language</span> <span class="k">of</span> <span class="nx">setOfLangauges</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">language</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">  English
</span></span><span class="line"><span class="cl">  Finnish
</span></span><span class="line"><span class="cl">  French
</span></span><span class="line"><span class="cl">  Spanish
</span></span></code></pre></div><h3 id="adding-an-element-to-a-set-1">Adding an element to a set</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">companies</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span> <span class="c1">// creating an empty set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">);</span> <span class="c1">// add element to the set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Facebook&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Amazon&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Oracle&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;Microsoft&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 5 elements in the set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>5<span class="o">)</span> <span class="o">{</span><span class="s2">&#34;Google&#34;</span>, <span class="s2">&#34;Facebook&#34;</span>, <span class="s2">&#34;Amazon&#34;</span>, <span class="s2">&#34;Oracle&#34;</span>, <span class="s2">&#34;Microsoft&#34;</span><span class="o">}</span>
</span></span></code></pre></div><p>We can also use loop to add element to a set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">companies</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Google&#34;</span><span class="p">,</span> <span class="s2">&#34;Facebook&#34;</span><span class="p">,</span> <span class="s2">&#34;Amazon&#34;</span><span class="p">,</span> <span class="s2">&#34;Oracle&#34;</span><span class="p">,</span> <span class="s2">&#34;Microsoft&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">setOfCompanies</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">company</span> <span class="k">of</span> <span class="nx">companies</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setOfCompanies</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">company</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>5<span class="o">)</span> <span class="o">{</span><span class="s2">&#34;Google&#34;</span>, <span class="s2">&#34;Facebook&#34;</span>, <span class="s2">&#34;Amazon&#34;</span>, <span class="s2">&#34;Oracle&#34;</span>, <span class="s2">&#34;Microsoft&#34;</span><span class="o">}</span>
</span></span></code></pre></div><h3 id="deleting-an-element-a-set-1">Deleting an element a set</h3>
<p>We can delete an element from a set using a delete method.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s2">&#34;Google&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 4 elements left in the set
</span></span></span></code></pre></div><h3 id="checking-an-element-in-the-set-1">Checking an element in the set</h3>
<p>The has method can help to know if a certain element exists in a set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&#34;Apple&#34;</span><span class="p">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&#34;Facebook&#34;</span><span class="p">));</span> <span class="c1">// true
</span></span></span></code></pre></div><h3 id="clearing-the-set-1">Clearing the set</h3>
<p>It removes all the elements from a set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">companies</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">companies</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">{}</span>
</span></span></code></pre></div><p>See the example below to learn how to use set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">languages</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finnish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Spanish&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;English&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;French&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">langSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">languages</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">langSet</span><span class="p">);</span> <span class="c1">// Set(4) {&#34;English&#34;, &#34;Finnish&#34;, &#34;French&#34;, &#34;Spanish&#34;}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">langSet</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">counts</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">l</span> <span class="k">of</span> <span class="nx">langSet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">filteredLang</span> <span class="o">=</span> <span class="nx">languages</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">lng</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">lng</span> <span class="o">===</span> <span class="nx">l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filteredLang</span><span class="p">);</span> <span class="c1">// [&#34;English&#34;, &#34;English&#34;, &#34;English&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">counts</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">lang</span><span class="o">:</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="nx">filteredLang</span><span class="p">.</span><span class="nx">length</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counts</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">lang</span><span class="o">:</span> <span class="s2">&#34;English&#34;</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">3</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">lang</span><span class="o">:</span> <span class="s2">&#34;Finnish&#34;</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">lang</span><span class="o">:</span> <span class="s2">&#34;French&#34;</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">2</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">lang</span><span class="o">:</span> <span class="s2">&#34;Spanish&#34;</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span></code></pre></div><p>Other use case of set. For instance to count unique item in an array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">setOfNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">numbers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">setOfNumbers</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>5<span class="o">)</span> <span class="o">{</span>5, 3, 2, 9, 4<span class="o">}</span>
</span></span></code></pre></div><h3 id="union-of-sets">Union of sets</h3>
<p>To find a union to two sets can be achieved using spread operator. Lets find the union of set A and set B (A U B)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">a</span><span class="p">,</span> <span class="p">...</span><span class="nx">b</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">B</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">C</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">C</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>6<span class="o">)</span> <span class="o">{</span>1, 2, 3, 4, 5,6<span class="o">}</span>
</span></span></code></pre></div><h3 id="intersection-of-sets">Intersection of sets</h3>
<p>To find an intersection of two sets can be achieved using filter. Lets find the union of set A and set B (A ∩ B)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">B</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">num</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">B</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">num</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">C</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">C</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>3<span class="o">)</span> <span class="o">{</span>3, 4, 5<span class="o">}</span>
</span></span></code></pre></div><h3 id="difference-of-sets">Difference of sets</h3>
<p>To find an the difference between two sets can be achieved using filter. Lets find the different of set A and set B (A \ B)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">B</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">num</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="o">!</span><span class="nx">B</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">num</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">C</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">C</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Set<span class="o">(</span>2<span class="o">)</span> <span class="o">{</span>1, 2<span class="o">}</span>
</span></span></code></pre></div><h2 id="map">Map</h2>
<h3 id="creating-an-empty-map">Creating an empty Map</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Map<span class="o">(</span>0<span class="o">)</span> <span class="o">{}</span>
</span></span></code></pre></div><h3 id="creating-an-map-from-array">Creating an Map from array</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;Sweden&#34;</span><span class="p">,</span> <span class="s2">&#34;Stockholm&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="s2">&#34;Norway&#34;</span><span class="p">,</span> <span class="s2">&#34;Oslo&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="nx">countries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Map<span class="o">(</span>3<span class="o">)</span> <span class="o">{</span><span class="s2">&#34;Finland&#34;</span> <span class="o">=</span>&gt; <span class="s2">&#34;Helsinki&#34;</span>, <span class="s2">&#34;Sweden&#34;</span> <span class="o">=</span>&gt; <span class="s2">&#34;Stockholm&#34;</span>, <span class="s2">&#34;Norway&#34;</span> <span class="o">=</span>&gt; <span class="s2">&#34;Oslo&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="m">3</span>
</span></span></code></pre></div><h3 id="adding-values-to-the-map">Adding values to the Map</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countriesMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span> <span class="c1">// 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;Sweden&#34;</span><span class="p">,</span> <span class="s2">&#34;Stockholm&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&#34;Norway&#34;</span><span class="p">,</span> <span class="s2">&#34;Oslo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesMap</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Map<span class="o">(</span>3<span class="o">)</span> <span class="o">{</span><span class="s2">&#34;Finland&#34;</span> <span class="o">=</span>&gt; <span class="s2">&#34;Helsinki&#34;</span>, <span class="s2">&#34;Sweden&#34;</span> <span class="o">=</span>&gt; <span class="s2">&#34;Stockholm&#34;</span>, <span class="s2">&#34;Norway&#34;</span> <span class="o">=</span>&gt; <span class="s2">&#34;Oslo&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="m">3</span>
</span></span></code></pre></div><h3 id="getting-a-value-from-map">Getting a value from Map</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&#34;Finland&#34;</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Helsinki
</span></span></code></pre></div><h3 id="checking-key-in-map">Checking key in Map</h3>
<p>Check if a key exist in a map using <em>has</em> method. It returns <em>true</em> or <em>false</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countriesMap</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s2">&#34;Finland&#34;</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">true</span>
</span></span></code></pre></div><p>Getting all values from map using loop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">country</span> <span class="k">of</span> <span class="nx">countriesMap</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">(</span>2<span class="o">)</span> <span class="o">[</span><span class="s2">&#34;Finland&#34;</span>, <span class="s2">&#34;Helsinki&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>2<span class="o">)</span> <span class="o">[</span><span class="s2">&#34;Sweden&#34;</span>, <span class="s2">&#34;Stockholm&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>2<span class="o">)</span> <span class="o">[</span><span class="s2">&#34;Norway&#34;</span>, <span class="s2">&#34;Oslo&#34;</span><span class="o">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span>const <span class="o">[</span>country, city<span class="o">]</span> of countriesMap<span class="o">){</span>
</span></span><span class="line"><span class="cl">console.log<span class="o">(</span>country, city<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Finland Helsinki
</span></span><span class="line"><span class="cl">Sweden Stockholm
</span></span><span class="line"><span class="cl">Norway Oslo
</span></span></code></pre></div><h3 id="exercises-set-and-map">Exercises: Set and Map</h3>
<h3 id="exerciseslevel-1">Exercises:Level 1</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Finland&#39;</span><span class="p">,</span> <span class="s1">&#39;Sweden&#39;</span><span class="p">,</span> <span class="s1">&#39;Norway&#39;</span><span class="p">]</span>
</span></span></code></pre></div><ol>
<li>create an empty set</li>
<li>Create a set containing 0 to 10 using loop</li>
<li>Remove an element from a set</li>
<li>Clear a set</li>
<li>Create a set of 5 string elements from array</li>
<li>Create a map of countries and number of characters of a country</li>
</ol>
<h3 id="exerciseslevel-2">Exercises:Level 2</h3>
<ol>
<li>Find a union b</li>
<li>Find a intersection b</li>
<li>Find a with b</li>
</ol>
<h3 id="exerciseslevel-3">Exercises:Level 3</h3>
<ol>
<li>
<p>How many languages are there in the countries object file.</p>
</li>
<li>
<p>*** Use the countries data to find the 10 most spoken languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Your output should look like this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mostSpokenLanguages</span><span class="p">(</span><span class="nx">countries</span><span class="p">,</span> <span class="mi">10</span><span class="p">))[</span>
</span></span><span class="line"><span class="cl">  <span class="p">({</span> <span class="nx">English</span><span class="o">:</span> <span class="mi">91</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">French</span><span class="o">:</span> <span class="mi">45</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Arabic</span><span class="o">:</span> <span class="mi">25</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Spanish</span><span class="o">:</span> <span class="mi">24</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Russian</span><span class="o">:</span> <span class="mi">9</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Portuguese</span><span class="o">:</span> <span class="mi">9</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Dutch</span><span class="o">:</span> <span class="mi">8</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">German</span><span class="o">:</span> <span class="mi">7</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Chinese</span><span class="o">:</span> <span class="mi">5</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Swahili</span><span class="o">:</span> <span class="mi">4</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">Serbian</span><span class="o">:</span> <span class="mi">4</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Your output should look like this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mostSpokenLanguages</span><span class="p">(</span><span class="nx">countries</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span></span></code></pre></div></li>
</ol>
<p>[
{&lsquo;English&rsquo;:91},
{&lsquo;French&rsquo;:45},
{&lsquo;Arabic&rsquo;:25}
]````</p>
<h2 id="document-object-model-dom">Document Object Model (DOM)</h2>
<p>HTML document is structured as a JavaScript Object. Every HTML element has a different properties which can help to manipulate it. It is possible to get, create, append or remove HTML elements using JavaScript. Check the examples below. Selecting HTML element using JavaScript is similar to select CSS. To select an HTML element, we use tag name, id, class name. To create an HTML element we use tag name.</p>
<h3 id="getting-element">Getting Element</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document Object Model/title&gt;
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">class</span><span class="o">=</span><span class="s">&#39;title&#39;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#39;first-title&#39;</span><span class="p">&gt;</span>First Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">class</span><span class="o">=</span><span class="s">&#39;title&#39;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#39;second-title&#39;</span><span class="p">&gt;</span>Second Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">class</span><span class="o">=</span><span class="s">&#39;title&#39;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#39;third-title&#39;</span><span class="p">&gt;</span>Third Title<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h4 id="getting-elements-by-tag-name">Getting elements by tag name</h4>
<p><strong><em>getElementsByTagName()</em></strong> method returns an HTMLCollection object. An HTMLCollection is an array like list of HTML elements. The length property provides the size of the collection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">allTitles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">);</span> <span class="c1">//HTMCollections
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allTitles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="c1">// prints each elements in the HTMLCollection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h4 id="getting-elements-by-class-name">Getting elements by class name</h4>
<p><strong><em>getElementsByClassName()</em></strong> method returns an HTMLCollection object. An HTMLCollection is an array like list of HTML elements. The length property provides the size of the collection. It is possible to loop through all the HTMLCollection elements. See the example below</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">allTitles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&#34;title&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">);</span> <span class="c1">//HTMCollections
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allTitles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="c1">// prints each elements in the HTMLCollection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h4 id="getting-an-element-by-id">Getting an element by id</h4>
<p><strong><em>getElementsById()</em></strong> targets a single HTML element. We pass the id without # as an argument.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;first-title&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstTitle</span><span class="p">);</span> <span class="c1">// &lt;h1&gt;First Title&lt;/h1&gt;
</span></span></span></code></pre></div><h4 id="getting-elements-by-using-queryselector-using-tag-class-and-id">Getting elements by using querySelector using tag, class and id:</h4>
<p><strong><em>querySelector</em></strong>: can be used to select HTML element by its tag name, id or class. If the tag name is used it selects only the first element.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelect</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span> <span class="c1">// select the first available h2 element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">firstTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#first-title&#34;</span><span class="p">);</span> <span class="c1">// select id with first-title
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">firstTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;.title&#34;</span><span class="p">);</span> <span class="c1">// select the first available h2 element with class title
</span></span></span></code></pre></div><p><strong><em>querySelectorAll</em></strong>: can be used to select html element by its tag name or class. It return a nodeList which is an array like object which support array methods. We can use <strong><em>for loop</em></strong> or <strong><em>forEach</em></strong> to loop through each nodeList elements.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">allTitles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectAll</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allTitles</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allTitles</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">allTitles</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">title</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">title</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">allTitles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;.title&#34;</span><span class="p">);</span> <span class="c1">// the same goes for selecting using class
</span></span></span></code></pre></div><h3 id="adding-attribute">Adding attribute</h3>
<p>An attribute is added in the opening tag of HTML which gives additional information about the element. Common HTML attributes: id, class, src, style, href,disabled, title, alt. Lets add id and class for the fourth title.</p>
<h4 id="adding-attribute-using-setattribute">Adding attribute using setAttribute</h4>
<p>The <strong><em>setAttribute()</em></strong> method set any html attribute. It takes two parameters the type of the attribute and the name of the attribute.
Let&rsquo;s add class and id attribute for the fourth title.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">titles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">titles</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;class&#34;</span><span class="p">,</span> <span class="s2">&#34;title&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">titles</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">,</span> <span class="s2">&#34;fourth-title&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="adding-attribute-without-setattribute">Adding attribute without setAttribute</h4>
<p>Some attributes are DOM object property and they can be set directly. For instance id and class</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//another way to setting an attribute
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">titles</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&#34;title&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">titles</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">id</span> <span class="o">=</span> <span class="s2">&#34;fourth-title&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="adding-class-using-classlist">Adding class using classList</h4>
<p>The class list method is a good method to append additional class. It doesn&rsquo;t override the original class if a class exists</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">//another way to setting an attribute: append the class, doesn&#39;t over ride
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">titles</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;title&#34;</span><span class="p">,</span> <span class="s2">&#34;header-title&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="adding-text-content">Adding Text content</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">titles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">titles</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">&#34;Fourth Title&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="adding-style">Adding style</h3>
<p>Lets add some style to our titles. If the element has even index we give it green color else red.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">titles</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">titles</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">title</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s2">&#34;24px&#34;</span><span class="p">;</span> <span class="c1">// all titles will have 24px font size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">title</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&#34;green&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">title</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&#34;red&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="creating-an-element">Creating an Element</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;first-title&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="creating-elements">Creating elements</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">firstTitle</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;first-title&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&#34;title&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s2">&#34;24px&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="appending-to-a-parent-element">Appending to a parent element</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// creating multiple elements and appending to parent element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;h1&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&#34;title&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="s2">&#34;24px&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">title</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="event-listeners">Event Listeners</h3>
<p>Common HTML events:onclick, onchange, onmouseover, onmouseout, onkeydown, onkeyup, onload.
We can add event listener method to any DOM object. Use use <strong><em>addEventListener()</em></strong> method to listen different event types on HTML elements.
The following is an example of click type event.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">button</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="getting-value-from-an-input-element">Getting value from an input element</h3>
<p>We usually fill forms and forms accept data. Form fields are created using input HTML element.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Mass in Kilogram&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Height in meters&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span>Calculate BMI<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mass</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#mass&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">height</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#height&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;button&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">bmi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">button</span><span class="p">.</span><span class="nx">addEventListen</span><span class="p">(</span><span class="s2">&#34;click&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">bmi</span> <span class="o">=</span> <span class="nx">mass</span><span class="p">.</span><span class="nx">value</span> <span class="o">*</span> <span class="nx">height</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bmi</span><span class="p">);</span>
</span></span></code></pre></div><h4 id="exercisesdocument-object-model">Exercises:Document Object Model</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript for Everyone:DOM<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>First Paragraph<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Second Paragraph<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Third Paragraph<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><ol>
<li>Create an index.html file and put four p elements as above: Get the first paragraph by using <strong><em>document.querySelector(tagname)</em></strong> and tag name</li>
<li>Get get each of the the paragraph using <strong><em>document.querySelector(&rsquo;#id&rsquo;)</em></strong> and by their id</li>
<li>Get all the p as nodeList using <strong><em>document.querySelectorAll(tagname)</em></strong> and by their tag name</li>
<li>Loop through the nodeList and get the text content of each paragraph</li>
<li>Set a text content to paragraph the fourth paragraph,<strong><em>Fourth Paragraph</em></strong></li>
<li>Set id and class attribute for all the paragraphs using different attribute setting methods</li>
<li>Change stye of each paragraph using JavaScript(eg. color, background, border, font-size, font-family)</li>
<li>Select all paragraphs and loop through each elements and give the first and third paragraph a color of color, and the second and the fourth paragraph a red color</li>
<li>Remove all the paragraph and create them using JavaScript</li>
<li>Set text content, id and class to each paragraph</li>
<li>Create a div container on HTML document and create 100 numbers dynamically and append to the container div. Put each number in 150px by 150px box. If the number is even the background will be lightgreen else lightblue.</li>
<li>Use the rgb color generator function or hexaColor generator to create 10 divs with random background colors</li>
<li>Use the countries.js to visualize all the countries on the HTML document. You need one wrapper div and box for each countries. In the box display, the letter the country starts with, the name of the country and the number of characters for the country name.</li>
</ol>
<h4 id="dom-mini-projects">DOM: Mini Projects</h4>
<ol>
<li>BMI calculator</li>
<li>Hexadecimal or RGB color Generator</li>
<li>World Countries List</li>
</ol>
<h2 id="classes">Classes</h2>
<p>JavaScript is an object oriented programming language. Everything in JavScript is an object, with its properties and methods. We create class to create an object. A Class is like an object constructor, or a &ldquo;blueprint&rdquo; for creating objects. We instantiate a class to create an object. The class defines attributes and the behavior of the object, while the object, on the other hand, represents the class.</p>
<p>Once we create a class we can create object from it whenever we want. Creating an object from a class is called class instantiation.</p>
<p>In the object section, we saw how to create an object literal. Object literal is a singleton. If we want to get a similar object , we have to write it. However, class allows to create many objects. This helps to reduce amount of code and repetition of code.</p>
<h3 id="defining-a-classes">Defining a classes</h3>
<p>To define a class in JavaScript we need the keyword <em>class</em> , the name of a class in <strong>CamelCase</strong> and block code(two curly brackets). Let us create a class name Person.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">// syntax
</span></span><span class="line"><span class="cl">class ClassName <span class="o">{</span>
</span></span><span class="line"><span class="cl">    //  code goes here
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>Example:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>We have created an Person class but it does not have any thing inside.</p>
<h3 id="class-instantiation">Class Instantiation</h3>
<p>Instantiation class means creating an object from a class. We need the keyword <em>new</em> and we call the name of the class after the word new.</p>
<p>Let us create a dog object from our Person class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Person <span class="o">{}</span>
</span></span></code></pre></div><p>As you can see, we have created a person object. Since the class did not have any properties yet the object is also empty.</p>
<p>Let use the class constructor to pass different properties for the class.</p>
<h3 id="class-constructor">Class Constructor</h3>
<p>The constructor is a builtin function which allows as to create a blueprint for our object. The constructor function starts with a keyword constructor followed by a parenthesis. Inside the parenthesis we pass the properties of the object as parameter. We use the <em>this</em> keyword to attach the constructor parameters with the class.</p>
<p>The following Person class constructor has firstName and lastName property. These properties are attached to the Person class using <em>this</em> keyword. <em>This</em> refers to the class itself.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Check the output from here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Person <span class="o">{</span>firstName: undefined, lastName<span class="o">}</span>
</span></span></code></pre></div><p>All the keys of the object are undefined. When ever we instantiate we should pass the value of the properties. Let us pass value at this time when we instantiate the class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span><span class="o">}</span>
</span></span></code></pre></div><p>As we have stated at the very beginning that once we create a class we can create many object using the class. Now, let us create many person objects using the Person class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Check the output from here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Abraham&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person3</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Lidiya&#34;</span>, lastName: <span class="s2">&#34;Tekle&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Abraham&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span><span class="o">}</span>
</span></span></code></pre></div><p>Using the class Person we created three persons object. As you can see our class did not many properties let us add more properties to the class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// Check the output from here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span>, age: 250, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Helsinki&#34;</span><span class="o">}</span>
</span></span></code></pre></div><h3 id="default-values-with-constructor">Default values with constructor</h3>
<p>The constructor function properties may have a default value like other regular functions.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">age</span> <span class="o">=</span> <span class="mi">250</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">country</span> <span class="o">=</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">city</span> <span class="o">=</span> <span class="s2">&#34;Helsinki&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span> <span class="c1">// it will take the default values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Espoo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span>, age: 250, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Helsinki&#34;</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">Person <span class="o">{</span>firstName: <span class="s2">&#34;Lidiya&#34;</span>, lastName: <span class="s2">&#34;Tekle&#34;</span>, age: 28, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Espoo&#34;</span><span class="o">}</span>
</span></span></code></pre></div><h3 id="class-methods">Class methods</h3>
<p>The constructor inside a class is a builtin function which allow us to create a blueprint for the object. In a class we can create class methods. Methods are JavaScript functions inside the class. Let us create some class methods.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Espoo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Asabeneh Yetayeh
</span></span><span class="line"><span class="cl">test.js:19 Lidiya Tekle
</span></span></code></pre></div><h3 id="properties-with-initial-value">Properties with initial value</h3>
<p>When we create a class for some properties we may have an initial value. For instance if you are playing a game, you starting score will be zero. So, we may have a starting score or score which is zero. In other way, we may have an initial skill and we will acquire some skill after some time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Espoo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">skills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">skills</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[]</span>
</span></span><span class="line"><span class="cl"><span class="o">[]</span>
</span></span></code></pre></div><p>A method could be regular method or a getter or a setter. Let us see, getter and setter.</p>
<h3 id="getter">getter</h3>
<p>The get method allow us to access value from the object. We write a get method using keyword <em>get</em> followed by a function. Instead of accessing properties directly from the object we use getter to get the value. See the example bellow</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getscore</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getSkills</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Espoo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">getScore</span><span class="p">);</span> <span class="c1">// We do not need parenthesis to call a getter method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">getScore</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">getSkills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">getSkills</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[]</span>
</span></span><span class="line"><span class="cl"><span class="o">[]</span>
</span></span></code></pre></div><h3 id="setter">setter</h3>
<p>The setter method allow us to modify the value of certain properties. We write a setter method using keyword <em>set</em> followed by a function. See the example bellow.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getScore</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getSkills</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setScore</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setSkill</span><span class="p">(</span><span class="nx">skill</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">skill</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Espoo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setScore</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;HTML&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;CSS&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setScore</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Planning&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Managing&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Organizing&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">skills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">skills</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;HTML&#34;</span>, <span class="s2">&#34;CSS&#34;</span>, <span class="s2">&#34;JavaScript&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;Planning&#34;</span>, <span class="s2">&#34;Managing&#34;</span>, <span class="s2">&#34;Organizing&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p>Do not be puzzled by the difference between regular method and a getter. If you know how to make a regular method you are good. Let us add regular method called getPersonInfo in the Person class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getScore</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getSkills</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setScore</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setSkill</span><span class="p">(</span><span class="nx">skill</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">skill</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getPersonInfo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">skills</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="sb">` and </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">formattedSkills</span> <span class="o">=</span> <span class="nx">skills</span> <span class="o">?</span> <span class="sb">`He knows </span><span class="si">${</span><span class="nx">skills</span><span class="si">}</span><span class="sb">`</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="si">}</span><span class="sb">. He lives </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">city</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">country</span><span class="si">}</span><span class="sb">. </span><span class="si">${</span><span class="nx">formattedSkills</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Espoo&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="s2">&#34;Doe&#34;</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="s2">&#34;Mars&#34;</span><span class="p">,</span> <span class="s2">&#34;Mars city&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setScore</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;HTML&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;CSS&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setScore</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Planning&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Managing&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">person2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Organizing&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">getScore</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">getScore</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">getSkills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">getSkills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person3</span><span class="p">.</span><span class="nx">getSkills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">.</span><span class="nx">getPersonInfo</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person2</span><span class="p">.</span><span class="nx">getPersonInfo</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person3</span><span class="p">.</span><span class="nx">getPersonInfo</span><span class="p">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;HTML&#34;</span>, <span class="s2">&#34;CSS&#34;</span>, <span class="s2">&#34;JavaScript&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;Planning&#34;</span>, <span class="s2">&#34;Managing&#34;</span>, <span class="s2">&#34;Organizing&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[]</span>
</span></span><span class="line"><span class="cl">Asabeneh Yetayeh is 250. He lives Helsinki, Finland. He knows HTML, CSS and JavaScript
</span></span><span class="line"><span class="cl">Lidiya Tekle is 28. He lives Espoo, Finland. He knows Planning, Managing and Organizing
</span></span><span class="line"><span class="cl">John Doe is 50. He lives Mars city, Mars.
</span></span></code></pre></div><h3 id="static-method">Static method</h3>
<p>The static keyword defines a static method for a class. Static methods are not called on instances of the class. Instead, they are called on the class itself. These are often utility functions, such as functions to create or clone objects. An example of static method is <em>Date.now()</em>. The <em>now</em> method is called directly from the class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">city</span> <span class="o">=</span> <span class="nx">city</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getFullName</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getScore</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">get</span> <span class="nx">getSkills</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setScore</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">score</span> <span class="o">+=</span> <span class="nx">score</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">set</span> <span class="nx">setSkill</span><span class="p">(</span><span class="nx">skill</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">skill</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getPersonInfo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">skills</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="sb">` and </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">formattedSkills</span> <span class="o">=</span> <span class="nx">skills</span> <span class="o">?</span> <span class="sb">`He knows </span><span class="si">${</span><span class="nx">skills</span><span class="si">}</span><span class="sb">`</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="si">}</span><span class="sb">. He lives </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">city</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">country</span><span class="si">}</span><span class="sb">. </span><span class="si">${</span><span class="nx">formattedSkills</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">favoriteSkill</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">skills</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JS&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="s2">&#34;Python&#34;</span><span class="p">,</span> <span class="s2">&#34;Node&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">skills</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">skills</span><span class="p">[</span><span class="nx">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kr">static</span> <span class="nx">showDateTime</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">year</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">date</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getDate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">hours</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getHours</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">minutes</span> <span class="o">=</span> <span class="nx">now</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">hours</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">hours</span> <span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">+</span> <span class="nx">hours</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">minutes</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">minutes</span> <span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">+</span> <span class="nx">minutes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">dateMonthYear</span> <span class="o">=</span> <span class="nx">date</span> <span class="o">+</span> <span class="s2">&#34;.&#34;</span> <span class="o">+</span> <span class="nx">month</span> <span class="o">+</span> <span class="s2">&#34;.&#34;</span> <span class="o">+</span> <span class="nx">year</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">hours</span> <span class="o">+</span> <span class="s2">&#34;:&#34;</span> <span class="o">+</span> <span class="nx">minutes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">fullTime</span> <span class="o">=</span> <span class="nx">dateMonthYear</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="nx">time</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">fullTime</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">favoriteSkill</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Person</span><span class="p">.</span><span class="nx">showDateTime</span><span class="p">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Node
</span></span><span class="line"><span class="cl">15.1.2020 23:56
</span></span></code></pre></div><p>The static methods are methods which can be used as utility functions.</p>
<h2 id="inheritance">Inheritance</h2>
<p>Using inheritance we can access all the properties and the methods of the parent class. This reduces repetition of code. If you remember, we have a Person parent class and we will create children from it. Our children class could be student, teach etc.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// syntax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">class</span> <span class="nx">ChildClassName</span> <span class="kr">extends</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// code goes here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p>Let us create a Student child class from Person parent class.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Student</span> <span class="kr">extends</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">saySomething</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;I am a child of the person class&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span> <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">saySomething</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">getPersonInfo</span><span class="p">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Student <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span>, age: <span class="s2">&#34;Finland&#34;</span>, country: 250, city: <span class="s2">&#34;Helsinki&#34;</span>, …<span class="o">}</span>
</span></span><span class="line"><span class="cl">I am a child of the person class
</span></span><span class="line"><span class="cl">Asabeneh Yetayeh
</span></span><span class="line"><span class="cl">Student <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span>, age: <span class="s2">&#34;Finland&#34;</span>, country: 250, city: <span class="s2">&#34;Helsinki&#34;</span>, …<span class="o">}</span>
</span></span><span class="line"><span class="cl">Asabeneh Yetayeh is Finland. He lives Helsinki, 250.
</span></span></code></pre></div><h3 id="overriding-methods">Overriding methods</h3>
<p>As you can see, we manage to access all the methods in the Person Class and we used it in the Student child class. We can customize the parent methods, we can add additional properties to a child class. If we want to customize, the methods and if we want to add extra properties, we need to use the constructor function the child class too. In side the constructor function we call the super() function to access all the properties from the parent class. The Person class didn&rsquo;t have gender but now let us give gender property for the child class, Student. If the same method name used in the child class, the parent method will be overridden.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Student</span> <span class="kr">extends</span> <span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">constructor</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">,</span> <span class="nx">gender</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">country</span><span class="p">,</span> <span class="nx">city</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="nx">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">saySomething</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;I am a child of the person class&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">getPersonInfo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">skills</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&#34;, &#34;</span><span class="p">)</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">        <span class="sb">` and </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">formattedSkills</span> <span class="o">=</span> <span class="nx">skills</span> <span class="o">?</span> <span class="sb">`He knows </span><span class="si">${</span><span class="nx">skills</span><span class="si">}</span><span class="sb">`</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">pronoun</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">gender</span> <span class="o">==</span> <span class="s2">&#34;Male&#34;</span> <span class="o">?</span> <span class="s2">&#34;He&#34;</span> <span class="o">:</span> <span class="s2">&#34;She&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="sb">`</span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb"> is </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="si">}</span><span class="sb">. </span><span class="si">${</span><span class="nx">pronoun</span><span class="si">}</span><span class="sb"> lives in </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">city</span><span class="si">}</span><span class="sb">, </span><span class="si">${</span><span class="k">this</span><span class="p">.</span><span class="nx">country</span><span class="si">}</span><span class="sb">. </span><span class="si">${</span><span class="nx">formattedSkills</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">info</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Asabeneh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Yetayeh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">250</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Finland&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Helsinki&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Male&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="s2">&#34;Lidiya&#34;</span><span class="p">,</span> <span class="s2">&#34;Tekle&#34;</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="s2">&#34;Finland&#34;</span><span class="p">,</span> <span class="s2">&#34;Helsinki&#34;</span><span class="p">,</span> <span class="s2">&#34;Female&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">s1</span><span class="p">.</span><span class="nx">setScore</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;HTML&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;CSS&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s1</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">s2</span><span class="p">.</span><span class="nx">setScore</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Planning&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Managing&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">s2</span><span class="p">.</span><span class="nx">setSkill</span> <span class="o">=</span> <span class="s2">&#34;Organizing&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">saySomething</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">getPersonInfo</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s2</span><span class="p">.</span><span class="nx">saySomething</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s2</span><span class="p">.</span><span class="nx">getFullName</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s2</span><span class="p">.</span><span class="nx">getPersonInfo</span><span class="p">());</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">Student <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span>, age: 250, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Helsinki&#34;</span>, …<span class="o">}</span>
</span></span><span class="line"><span class="cl">Student <span class="o">{</span>firstName: <span class="s2">&#34;Lidiya&#34;</span>, lastName: <span class="s2">&#34;Tekle&#34;</span>, age: 28, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Helsinki&#34;</span>, …<span class="o">}</span>
</span></span><span class="line"><span class="cl">I am a child of the person class
</span></span><span class="line"><span class="cl">Asabeneh Yetayeh
</span></span><span class="line"><span class="cl">Student <span class="o">{</span>firstName: <span class="s2">&#34;Asabeneh&#34;</span>, lastName: <span class="s2">&#34;Yetayeh&#34;</span>, age: 250, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Helsinki&#34;</span>, …<span class="o">}</span>
</span></span><span class="line"><span class="cl">Asabeneh Yetayeh is 250. He lives in Helsinki, Finland. He knows HTML, CSS and JavaScript
</span></span><span class="line"><span class="cl">I am a child of the person class
</span></span><span class="line"><span class="cl">Lidiya Tekle
</span></span><span class="line"><span class="cl">Student <span class="o">{</span>firstName: <span class="s2">&#34;Lidiya&#34;</span>, lastName: <span class="s2">&#34;Tekle&#34;</span>, age: 28, country: <span class="s2">&#34;Finland&#34;</span>, city: <span class="s2">&#34;Helsinki&#34;</span>, …<span class="o">}</span>
</span></span><span class="line"><span class="cl">Lidiya Tekle is 28. She lives in Helsinki, Finland. He knows Planning, Managing and Organizing
</span></span></code></pre></div><p>Now, the getPersonInfo method has been overridden and it identifies if the person is male or female.</p>
<h2 id="exercises-2">Exercises</h2>
<h3 id="exercises-level-1-1">Exercises Level 1</h3>
<ol>
<li>Create an Animal class. The class will have name, age, color, legs properties and create different methods</li>
<li>Create a Dog and Cat child class from the Animal Class.</li>
</ol>
<h3 id="exercises-level-2-1">Exercises Level 2</h3>
<ol>
<li>Override the method you create in Animal class</li>
</ol>
<h3 id="exercises-level-3-1">Exercises Level 3</h3>
<ol>
<li>Let&rsquo;s try to develop a program which calculate measure of central tendency of a sample(mean, median, mode) and measure of variability(range, variance, standard deviation). In addition to those measures find the min, max, count, percentile, and frequency distribution of the sample. You can create a class called Statistics and create all the functions which do statistical calculations as method for the Statistics class. Check the output below.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JS" data-lang="JS"><span class="line"><span class="cl"><span class="nx">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">31</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">26</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Count:&#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">count</span><span class="p">())</span> <span class="c1">// 25
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Sum: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">sum</span><span class="p">())</span> <span class="c1">// 744
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Min: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">min</span><span class="p">())</span> <span class="c1">// 24
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Max: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">max</span><span class="p">())</span> <span class="c1">// 38
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Range: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">range</span><span class="p">()</span> <span class="c1">// 14
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Mean: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">mean</span><span class="p">())</span> <span class="c1">// 30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Median: &#39;</span><span class="p">,</span><span class="nx">statistics</span><span class="p">.</span><span class="nx">median</span><span class="p">())</span> <span class="c1">// 29
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Mode: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">mode</span><span class="p">())</span> <span class="c1">// {&#39;mode&#39;: 26, &#39;count&#39;: 5}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Variance: &#39;</span><span class="p">,</span><span class="nx">statistics</span><span class="p">.</span><span class="kd">var</span><span class="p">())</span> <span class="c1">// 17.5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Standard Deviation: &#39;</span><span class="p">,</span> <span class="nx">statistics</span><span class="p">.</span><span class="nx">std</span><span class="p">())</span> <span class="c1">// 4.2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Variance: &#39;</span><span class="p">,</span><span class="nx">statistics</span><span class="p">.</span><span class="kd">var</span><span class="p">())</span> <span class="c1">// 17.5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Frequency Distribution: &#39;</span><span class="p">,</span><span class="nx">statistics</span><span class="p">.</span><span class="nx">freqDist</span><span class="p">())</span> <span class="c1">// [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)]
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">// you output should look like this
</span></span><span class="line"><span class="cl">console.log<span class="o">(</span>statistics.describe<span class="o">())</span>
</span></span><span class="line"><span class="cl">Count: <span class="m">25</span>
</span></span><span class="line"><span class="cl">Sum:  <span class="m">744</span>
</span></span><span class="line"><span class="cl">Min:  <span class="m">24</span>
</span></span><span class="line"><span class="cl">Max:  <span class="m">38</span>
</span></span><span class="line"><span class="cl">Range:  <span class="m">14</span>
</span></span><span class="line"><span class="cl">Mean:  <span class="m">30</span>
</span></span><span class="line"><span class="cl">Median:  <span class="m">29</span>
</span></span><span class="line"><span class="cl">Mode:  <span class="o">(</span>26, 5<span class="o">)</span>
</span></span><span class="line"><span class="cl">Variance:  17.5
</span></span><span class="line"><span class="cl">Standard Deviation:  4.2
</span></span><span class="line"><span class="cl">Frequency Distribution: <span class="o">[(</span>20.0, 26<span class="o">)</span>, <span class="o">(</span>16.0, 27<span class="o">)</span>, <span class="o">(</span>12.0, 32<span class="o">)</span>, <span class="o">(</span>8.0, 37<span class="o">)</span>, <span class="o">(</span>8.0, 34<span class="o">)</span>, <span class="o">(</span>8.0, 33<span class="o">)</span>, <span class="o">(</span>8.0, 31<span class="o">)</span>, <span class="o">(</span>8.0, 24<span class="o">)</span>, <span class="o">(</span>4.0, 38<span class="o">)</span>, <span class="o">(</span>4.0, 29<span class="o">)</span>, <span class="o">(</span>4.0, 25<span class="o">)]</span>
</span></span></code></pre></div><ol>
<li>Create a class called PersonAccount. It has firstname, lastname, incomes, expenses properties and it has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance methods. Incomes is a set of incomes and its description and expenses is also a set of expenses and its description.</li>
</ol>
<h2 id="regular-expressions">Regular Expressions</h2>
<p>A regular expression or RegEx is a small programming language that helps to find pattern in data. A RegEx can be used to check if some pattern exists in a different data types. To use RegEx in JavaScript either we use RegEx constructor or we can declare a RegEx pattern using two forward slashes followed by a flag. We can create a pattern in two ways.</p>
<p>To declare a string we use a single quote, double quote a backtick to declare a regular expression we use two forward slashes and an optional flag. The flag could be g, i, m, s, u or y.</p>
<h3 id="regex-parameters">RegEx parameters</h3>
<p>A regular expression takes two parameters. One required search pattern and an optional flag.</p>
<h4 id="pattern">Pattern</h4>
<p>A pattern could be a text or any form of pattern which some sort of similarity. For instance the word spam in an email could be a pattern we are interested to look for in an email or a phone number format number might be our interest to look for.</p>
<h4 id="flags">Flags</h4>
<p>Flags are optional parameters in a regular expression which determine the type of searching. Let see some of the flags:</p>
<ul>
<li>g:is a global flag which means looking for a pattern in whole text</li>
<li>i: case insensitive flag(it searches for both lowercase and uppercase)</li>
<li>m: multiline</li>
</ul>
<h3 id="creating-a-pattern-with-regex-constructor">Creating a pattern with RegEx Constructor</h3>
<p>Declaring regular expression without global flag and case insensitive flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// without flag
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="s2">&#34;love&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RegEx</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span></code></pre></div><p>Declaring regular expression with global flag and case insensitive flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="s2">&#34;love&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">flag</span> <span class="o">=</span> <span class="s2">&#34;gi&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RegEx</span><span class="p">(</span><span class="nx">pattern</span><span class="p">,</span> <span class="nx">flag</span><span class="p">);</span>
</span></span></code></pre></div><p>Declaring a regex pattern using RegEx object. Writing the pattern and the flag inside the RegEx constructor</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RegEx</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">,</span> <span class="s2">&#34;gi&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="creating-a-pattern-without-regex-constructor">Creating a pattern without RegEx Constructor</h3>
<p>Declaring regular expression with global flag and case insensitive flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="sr">/love/gi</span><span class="p">;</span>
</span></span></code></pre></div><p>The above regular expression is the same as the one which we created with RegEx constructor</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">regEx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RegEx</span><span class="p">(</span><span class="s2">&#34;love&#34;</span><span class="p">,</span> <span class="s2">&#34;gi&#34;</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="regexp-object-methods">RegExp Object Methods</h3>
<p>Let see some of RegEx methods</p>
<h4 id="testing-for-a-match">Testing for a match</h4>
<p><em>test()</em>:Tests for a match in a string. It returns true or false.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;I love JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/love/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">true</span>
</span></span></code></pre></div><h4 id="array-containing-all-of-the-match">Array containing all of the match</h4>
<p><em>match()</em>:Returns an array containing all of the matches, including capturing groups, or null if no match is found.
If we do not use a global flag, match() returns an array containing the pattern, index, input and group.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;I love JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/love/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;love&#34;</span>, index: 2, input: <span class="s2">&#34;I love JavaScript&#34;</span>, groups: undefined<span class="o">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;I love JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/love/g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;love&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p><em>search()</em>: Tests for a match in a string. It returns the index of the match, or -1 if the search fails.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;I love JavaScript&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/love/g</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="m">2</span>
</span></span></code></pre></div><h4 id="replacing-a-substring">Replacing a substring</h4>
<p><em>replace()</em>: Executes a search for a match in a string, and replaces the matched substring with a replacement substring.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Python is the most beautiful language that a human begin has ever created.\
</span></span></span><span class="line"><span class="cl"><span class="s2">I recommend python for a first programming language&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">matchReplaced</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/Python|python/</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matchReplaced</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">JavaScript is the most beautiful language that a human begin has ever created.I recommend python <span class="k">for</span> a first programming language
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Python is the most beautiful language that a human begin has ever created.\
</span></span></span><span class="line"><span class="cl"><span class="s2">I recommend python for a first programming language&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">matchReplaced</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/Python|python/g</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matchReplaced</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">JavaScript is the most beautiful language that a human begin has ever created.I recommend JavaScript <span class="k">for</span> a first programming language
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Python is the most beautiful language that a human begin has ever created.\
</span></span></span><span class="line"><span class="cl"><span class="s2">I recommend python for a first programming language&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">matchReplaced</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/Python/gi</span><span class="p">,</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matchReplaced</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">JavaScript is the most beautiful language that a human begin has ever created.I recommend JavaScript <span class="k">for</span> a first programming language
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;%I a%m te%%a%%che%r% a%n%d %% I l%o%ve te%ach%ing.\
</span></span></span><span class="line"><span class="cl"><span class="s2">T%he%re i%s n%o%th%ing as m%ore r%ewarding a%s e%duc%at%i%ng a%n%d e%m%p%ow%er%ing \
</span></span></span><span class="line"><span class="cl"><span class="s2">p%e%o%ple.\
</span></span></span><span class="line"><span class="cl"><span class="s2">I fo%und te%a%ching m%ore i%n%t%er%%es%ting t%h%an any other %jobs.\
</span></span></span><span class="line"><span class="cl"><span class="s2">D%o%es thi%s m%ot%iv%a%te %y%o%u to b%e a t%e%a%cher.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%/g</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">I am teacher and  I love teaching.There is nothing as more rewarding as educating and empowering people.I found teaching more interesting than any other jobs.Does this motivate you to be a teacher.
</span></span></code></pre></div><ul>
<li>[]: A set of characters
<ul>
<li>[a-c] means, a or b or c</li>
<li>[a-z] means, any letter a to z</li>
<li>[A-Z] means, any character A to Z</li>
<li>[0-3] means, 0 or 1 or 2 or 3</li>
<li>[0-9] means any number 0 to 9</li>
<li>[A-Za-z0-9] any character which is a to z, A to Z, 0 to 9</li>
</ul>
</li>
<li>\: uses to escape special characters
<ul>
<li>\d mean:match where the string contains digits (numbers from 0-9)</li>
<li>\D mean: match where the string does not contain digits</li>
</ul>
</li>
<li>. : any character except new line character(\n)</li>
<li>^: starts with
<ul>
<li>r&rsquo;^substring&rsquo; eg r&rsquo;^love&rsquo;, a sentence which starts with a word love</li>
<li>r&rsquo;[^abc] mean not a, not b, not c.</li>
</ul>
</li>
<li>$: ends with
<ul>
<li>r&rsquo;substring$&rsquo; eg r&rsquo;love$&rsquo;, sentence ends with a word love</li>
</ul>
</li>
<li>*: zero or more times
<ul>
<li>r&rsquo;[a]*&rsquo; means a optional or it can be occur many times.</li>
</ul>
</li>
<li>+: one or more times
<ul>
<li>r&rsquo;[a]+&rsquo; mean at least once or more times</li>
</ul>
</li>
<li>?: zero or one times
<ul>
<li>r&rsquo;[a]?&rsquo; mean zero times or once</li>
</ul>
</li>
<li>{3}: Exactly 3 characters</li>
<li>{3,}: At least 3 character</li>
<li>{3,8}: 3 to 8 characters</li>
<li>|: Either or
<ul>
<li>r&rsquo;apple|banana&rsquo; mean either of an apple or a banana</li>
</ul>
</li>
<li>(): Capture and group</li>
</ul>
<p><img loading="lazy" src="../../images/1/regex.png" alt="Regular Expression cheat sheet"  />
</p>
<p>Let&rsquo;s use example to clarify the above meta characters</p>
<h3 id="square-bracket">Square Bracket</h3>
<p>Let&rsquo;s use square bracket to include lower and upper case</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="s2">&#34;[Aa]pple&#34;</span><span class="p">;</span> <span class="c1">// this square bracket mean either A or a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away. &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;Apple&#34;</span>, index: 0, input: <span class="s2">&#34;Apple and banana are fruits. An old cliche says an…by a banana a day keeps the doctor far far away. &#34;</span>, groups: undefined<span class="o">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[Aa]pple/g</span><span class="p">;</span> <span class="c1">// this square bracket mean either A or a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away. &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;Apple&#34;</span>, <span class="s2">&#34;apple&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p>If we want to look for the banana, we write the pattern as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[Aa]pple|[Bb]anana/g</span><span class="p">;</span> <span class="c1">// this square bracket mean either A or a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away. Banana is easy to eat too.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[</span><span class="s2">&#34;Apple&#34;</span>, <span class="s2">&#34;banana&#34;</span>, <span class="s2">&#34;apple&#34;</span>, <span class="s2">&#34;banana&#34;</span>, <span class="s2">&#34;Banana&#34;</span><span class="o">]</span>
</span></span></code></pre></div><p>Using the square bracket and or operator , we manage to extract Apple, apple, Banana and banana.</p>
<h3 id="escape-character-in-regex">Escape character(\) in RegEx</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/\d/g</span><span class="p">;</span> <span class="c1">// d is a special character which means digits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in January 12,  2020.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#34;1&#34;, &#34;2&#34;, &#34;2&#34;, &#34;0&#34;, &#34;2&#34;, &#34;0&#34;], this is not what we want
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/\d+/g</span><span class="p">;</span> <span class="c1">// d is a special character which means digits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in January 12,  2020.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#34;12&#34;, &#34;2020&#34;], this is not what we want
</span></span></span></code></pre></div><h3 id="one-or-more-times">One or more times(+)</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/\d+/g</span><span class="p">;</span> <span class="c1">// d is a special character which means digits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in January 12,  2020.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#34;12&#34;, &#34;2020&#34;], this is not what we want
</span></span></span></code></pre></div><h3 id="period">Period(.)</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[a]./g</span><span class="p">;</span> <span class="c1">// this square bracket means a and . means any character except new line
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;Apple and banana are fruits&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#34;an&#34;, &#34;an&#34;, &#34;an&#34;, &#34;a &#34;, &#34;ar&#34;]
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[a].+/g</span><span class="p">;</span> <span class="c1">// . any character, + any character one or more times
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;Apple and banana are fruits&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#39;and banana are fruits&#39;]
</span></span></span></code></pre></div><h3 id="zero-or-more-times">Zero or more times(*)</h3>
<p>Zero or many times. The pattern could may not occur or it can occur many times.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[a].*/g</span><span class="p">;</span> <span class="c1">//. any character, + any character one or more times
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;Apple and banana are fruits&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#39;and banana are fruits&#39;]
</span></span></span></code></pre></div><h3 id="zero-or-one-times">Zero or one times(?)</h3>
<p>Zero or one times. The pattern could may not occur or it may occur once.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;I am not sure if there is a convention how to write the word e-mail.\
</span></span></span><span class="line"><span class="cl"><span class="s2">Some people write it email others may write it as Email or E-mail.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[Ee]-?mail/g</span><span class="p">;</span> <span class="c1">// ? means optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#34;e-mail&#34;, &#34;email&#34;, &#34;Email&#34;, &#34;E-mail&#34;]
</span></span></span></code></pre></div><h3 id="quantifier-in-regex">Quantifier in RegEx</h3>
<p>We can specify the length of the substring we look for in a text, using a curly bracket. Lets imagine, we are interested in substring that their length are 4 characters</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in December 6,  2019.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/\d{4}/g</span><span class="p">;</span> <span class="c1">// exactly four times
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#39;2019&#39;]
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in December 6,  2019.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/\d{1,4}/g</span><span class="p">;</span> <span class="c1">// 1 to 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#39;6&#39;, &#39;2019&#39;]
</span></span></span></code></pre></div><h3 id="cart-">Cart ^</h3>
<ul>
<li>Starts with</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in December 6,  2019.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/^This/</span><span class="p">;</span> <span class="c1">// ^ means starts with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#39;This&#39;]
</span></span></span></code></pre></div><ul>
<li>Negation</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">txt</span> <span class="o">=</span> <span class="s2">&#34;This regular expression example was made in December 6,  2019.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/[^A-Za-z,. ]+/g</span><span class="p">;</span> <span class="c1">// ^ in set character means negation, not A to Z, not a to z, no space, no coma no period
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">pattern</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">matches</span><span class="p">);</span> <span class="c1">// [&#34;6&#34;, &#34;2019&#34;]
</span></span></span></code></pre></div><h3 id="exact-match">Exact match</h3>
<p>It should have ^ starting and $ which is an end.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="sr">/^[A-Z][a-z]{3,12}$/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span> <span class="c1">// true
</span></span></span></code></pre></div><h2 id="-exercises">💻 Exercises</h2>
<h3 id="exercises-level-1-2">Exercises: Level 1</h3>
<ol>
<li>Calculate the total annual income of the person from the following text. ‘He earns 4000 euro from salary per month, 10000 euro annual bonus, 5500 euro online courses per month.’</li>
<li>The position of some particles on the horizontal x-axis -12, -4, -3 and -1 in the negative direction, 0 at origin, 4 and 8 in the positive direction. Extract these numbers and find the distance between the two furthest particles.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">points</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;-1&#34;</span><span class="p">,</span> <span class="s2">&#34;2&#34;</span><span class="p">,</span> <span class="s2">&#34;-4&#34;</span><span class="p">,</span> <span class="s2">&#34;-3&#34;</span><span class="p">,</span> <span class="s2">&#34;-1&#34;</span><span class="p">,</span> <span class="s2">&#34;0&#34;</span><span class="p">,</span> <span class="s2">&#34;4&#34;</span><span class="p">,</span> <span class="s2">&#34;8&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">sortedPoints</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">distance</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span></span></code></pre></div><ol>
<li>
<p>Write a pattern which identify if a string is a valid JavaScript variable</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">is_valid_variable<span class="o">(</span><span class="s1">&#39;first_name&#39;</span><span class="o">)</span> <span class="c1"># True</span>
</span></span><span class="line"><span class="cl">is_valid_variable<span class="o">(</span><span class="s1">&#39;first-name&#39;</span><span class="o">)</span> <span class="c1"># False</span>
</span></span><span class="line"><span class="cl">is_valid_variable<span class="o">(</span><span class="s1">&#39;1first_name&#39;</span><span class="o">)</span> <span class="c1"># False</span>
</span></span><span class="line"><span class="cl">is_valid_variable<span class="o">(</span><span class="s1">&#39;firstname&#39;</span><span class="o">)</span> <span class="c1"># True</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="exercises-level-2-2">Exercises: Level 2</h3>
<ol>
<li>
<p>Write a function called <em>tenMostFrequentWords</em> which get the ten most frequent word from a string?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">paragraph</span> <span class="o">=</span> <span class="sb">`I love teaching. If you do not love teaching what else can you love. I love Python if you do not love something which can give you all the capabilities to develop an application what else can you love.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tenMostFrequentWords</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">    <span class="o">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;love&#39;</span>, count:6<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;you&#39;</span>, count:5<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;can&#39;</span>, count:3<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;what&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;teaching&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;not&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;else&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;do&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;I&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;which&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;to&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;the&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;something&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;if&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;give&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;develop&#39;</span>,count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;capabilities&#39;</span>,count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;application&#39;</span>, count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;an&#39;</span>,count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;all&#39;</span>,count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;Python&#39;</span>,count:1<span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="o">{</span>word:<span class="s1">&#39;If&#39;</span>,count:1<span class="o">}]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tenMostFrequentWords</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">[{</span>word:<span class="s1">&#39;love&#39;</span>, count:6<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;you&#39;</span>, count:5<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;can&#39;</span>, count:3<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;what&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;teaching&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;not&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;else&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;do&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;I&#39;</span>, count:2<span class="o">}</span>,
</span></span><span class="line"><span class="cl"><span class="o">{</span>word:<span class="s1">&#39;which&#39;</span>, count:1<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">]</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="exercises-level-3-2">Exercises: Level 3</h3>
<ol>
<li>Writ a function which cleans text. Clean the following text. After cleaning, count three most frequent words in the string.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">sentence</span> <span class="o">=</span> <span class="sb">`%I $am@% a %tea@cher%, &amp;and&amp; I lo%#ve %tea@ching%;. There $is nothing; &amp;as&amp; mo@re rewarding as educa@ting &amp;and&amp; @emp%o@wering peo@ple. ;I found tea@ching m%o@re interesting tha@n any other %jo@bs. %Do@es thi%s mo@tivate yo@u to be a tea@cher!?`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">cleanText</span><span class="p">(</span><span class="nx">sentence</span><span class="p">));</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> I am a teacher and I love teaching There is nothing as more rewarding as educating and empowering people I found teaching more interesting than any other <span class="nb">jobs</span> Does this motivate you to be a teacher
</span></span><span class="line"><span class="cl"> <span class="sb">```</span>
</span></span><span class="line"><span class="cl">1. Write a <span class="k">function</span> which find the most frequent words. After cleaning, count three most frequent words in the string.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="sb">```</span>js
</span></span><span class="line"><span class="cl"> console.log<span class="o">(</span>mostFrequentWords<span class="o">(</span>cleanedText<span class="o">))</span>
</span></span><span class="line"><span class="cl"> <span class="o">[{</span>word:<span class="s1">&#39;I&#39;</span>, count:3<span class="o">}</span>, <span class="o">{</span>word:<span class="s1">&#39;teaching&#39;</span>, count:2<span class="o">}</span>, <span class="o">{</span>word:<span class="s1">&#39;teacher&#39;</span>, count:2<span class="o">}]</span>
</span></span><span class="line"><span class="cl"> <span class="sb">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## Promises and Callbacks</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">From the following code blocks you will notice, the difference between callback and promises:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sb">```</span>js
</span></span><span class="line"><span class="cl">   //Callback
</span></span><span class="line"><span class="cl"> const <span class="nv">doSomething</span> <span class="o">=</span> <span class="nv">callback</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span></span><span class="line"><span class="cl"> setTimeout<span class="o">(()</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span></span><span class="line"><span class="cl">   const <span class="nv">skills</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;HTML&#39;</span>, <span class="s1">&#39;CSS&#39;</span>, <span class="s1">&#39;JS&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">   callback<span class="o">(</span><span class="s1">&#39;It didnt go well&#39;</span>, skills<span class="o">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">}</span>, 2000<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">doSomething<span class="o">((</span>err, result<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span> <span class="o">(</span>err<span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> console.log<span class="o">(</span>err<span class="o">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">}</span>
</span></span><span class="line"><span class="cl"> <span class="k">return</span> console.log<span class="o">(</span>result<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl">// after <span class="m">2</span> seconds it will print
</span></span><span class="line"><span class="cl">// <span class="o">=</span>&gt; It didnt go well
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> const <span class="nv">doSomething</span> <span class="o">=</span> <span class="nv">callback</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span></span><span class="line"><span class="cl"> setTimeout<span class="o">(()</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span></span><span class="line"><span class="cl">   const <span class="nv">skills</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;HTML&#39;</span>, <span class="s1">&#39;CSS&#39;</span>, <span class="s1">&#39;JS&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">   callback<span class="o">(</span>false, skills<span class="o">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">}</span>, 2000<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">doSomething<span class="o">((</span>err, result<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span> <span class="o">(</span>err<span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> console.log<span class="o">(</span>err<span class="o">)</span>
</span></span><span class="line"><span class="cl"> <span class="o">}</span>
</span></span><span class="line"><span class="cl"> <span class="k">return</span> console.log<span class="o">(</span>result<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl">// after <span class="m">2</span> seconds it will print the skills
</span></span><span class="line"><span class="cl">// <span class="o">=</span>&gt; <span class="o">[</span><span class="s2">&#34;HTML&#34;</span>, <span class="s2">&#34;CSS&#34;</span>, <span class="s2">&#34;JS&#34;</span><span class="o">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Promise
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">doPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">skills</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JS&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">skills</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">resolve</span><span class="p">(</span><span class="nx">skills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">reject</span><span class="p">(</span><span class="s2">&#34;Something wrong has happened&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">doPromise</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myPromise</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">resolve</span><span class="p">(</span><span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">reject</span><span class="p">(</span><span class="s2">&#34;You need to pass an argument&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">square</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">myPromise</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">square</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></span></code></pre></div><h2 id="async-and-await">Async and Await</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&#34;https://restcountries.eu/rest/v2/alll&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">fetchData</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countries</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;===== async and await&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">fetchData</span><span class="p">();</span>
</span></span></code></pre></div><h2 id="localstorage">localStorage</h2>
<p>Local storage is the para of the web storage API which is used to store data on the browser with no expiration data. The data will be available on the browser even after the browser is closed. There are five methods to work on local storage:
<em>setItem(), getItem(), removeItem(), clear(), key()</em></p>
<h3 id="setting-item-to-the-localstorage">Setting item to the localStorage</h3>
<p>When we set data to be stored in a localStorage, it will be stored as a string. If we are storing an array or an object, we should stringify it first to keep the format unless otherwise we lose the array structure or the object structure of the original data</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span> <span class="s2">&#34;Asabeneh&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">);</span> <span class="c1">//Storage {name: &#39;Asabeneh&#39;, length: 1}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;age&#34;</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">);</span> <span class="c1">//Storage {age: &#39;200&#39;, name: &#39;Asabeneh&#39;, length: 2}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">skills</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="s2">&#34;JS&#34;</span><span class="p">,</span> <span class="s2">&#34;React&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="c1">//Skills array has to be stringified first to keep the format.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">skillsJSON</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">skills</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;skills&#34;</span><span class="p">,</span> <span class="nx">skillsJSON</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">);</span> <span class="c1">//Storage {age: &#39;200&#39;, name: &#39;Asabeneh&#39;, skills: &#39;HTML,CSS,JS,React&#39;, length: 3}
</span></span></span></code></pre></div><p>If we are storing an array, an object or object array, we should stringify the object first. See the example below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">skills</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;HTML&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;CSS&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">9</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;JS&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">8</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;React&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">9</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;Redux&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;Node&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">8</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="nx">tech</span><span class="o">:</span> <span class="s2">&#34;MongoDB&#34;</span><span class="p">,</span> <span class="nx">level</span><span class="o">:</span> <span class="mi">8</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">skillJSON</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">skills</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s2">&#34;skills&#34;</span><span class="p">,</span> <span class="nx">skillJSON</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="getting-item-from-localstorage">Getting item from localStorage</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">&#34;age&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">skills</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">&#34;skills&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">skills</span><span class="p">);</span> <span class="c1">// &#39;Asabeneh&#39;, &#39;200&#39;, &#39;[&#39;HTML&#39;,&#39;CSS&#39;,&#39;JS&#39;,&#39;React&#39;]&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">skillsObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="s2">&#34;skills&#34;</span><span class="p">),</span> <span class="kc">undefined</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">skillsObj</span><span class="p">);</span>
</span></span></code></pre></div><h3 id="clearing-the-localstorage">Clearing the localStorage</h3>
<p>The clear method, will clear everything stored in the local storage</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">localStorage</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span></span></code></pre></div><h3 id="exerciseslocal-storage">Exercises:Local Storage</h3>
<h2 id="cookies">Cookies</h2>
<h3 id="exercisescookies">Exercises:Cookies</h3>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python 3 tricks by alexghergh</title>
      <link>https://shenlong616.github.io/posts/github/python-3-tricks-by-alexghergh/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/python-3-tricks-by-alexghergh/</guid>
      <description>Disclaimer: This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.
Looping over a range of numbers Using range() is better than using a list (ex.</description>
      <content:encoded><![CDATA[<p><strong><em>Disclaimer:</em></strong> This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.</p>
<h3 id="looping-over-a-range-of-numbers">Looping over a range of numbers</h3>
<p>Using <code>range()</code> is better than using a list (ex. <code>[1, 2, 3]</code>), because the list takes up memory space, whereas the <code>range()</code> function generates values on demand, thus taking a fixed amount of memory whatever the size of the elements is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p>takes the same memory space as:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> This function used to create a list in python2, and <code>xrange()</code> used to do what <code>range()</code> currently does, but it got changed, so <code>range()</code> in python3 is <code>xrange()</code> in python2.</p>
<h3 id="looping-backwards">Looping backwards</h3>
<p>Use the function <code>reversed()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints rust, kotlin, c++, java, python, c</span>
</span></span></code></pre></div><h3 id="looping-over-a-collection-and-indices">Looping over a collection and indices</h3>
<p>Use the function <code>enumerate()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">lang</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">lang</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0 --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 --&gt; python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 --&gt; java</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3 --&gt; c++</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4 --&gt; kotlin</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 5 --&gt; rust</span>
</span></span></code></pre></div><h3 id="looping-over-two-collections">Looping over two collections</h3>
<p>Use the function <code>zip()</code>. It returns tuples of the elements until one of the iterables is exahusted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">number</span><span class="p">,</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">lang</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1 --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2 --&gt; python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3 --&gt; java</span>
</span></span></code></pre></div><p><strong>Note:</strong> It takes any number of iterables and &ldquo;zips&rdquo; them into tuples.</p>
<p><strong>Note 2:</strong> It&rsquo;s important to note that it generates tuples on demand, so it reuses memory space (it used to create a third list in python2, and <code>izip()</code> used to do what <code>zip()</code> does now in python3).</p>
<h3 id="looping-in-sorted-order">Looping in sorted order</h3>
<p>Use the function <code>sorted()</code> or the method <code>sort()</code> of iterables.</p>
<p>By default, it sorts the iterable in ascending order:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">langs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints c c++ java kotlin python rust</span>
</span></span></code></pre></div><p>The second method sorts the iterable IN-PLACE, whilst the first returns a different iterable.</p>
<p>Both the functions can take 2 extra parameters which can specify a comparison function and if the iterable should be reversed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">langs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints kotlin python java rust c++ c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># notice that kotlin and python might be interchanged because they have the same size, same java and rust</span>
</span></span></code></pre></div><h3 id="partial-functions">Partial functions</h3>
<p>A partial function is a function who has some parameters &ldquo;frozen&rdquo;, in the sense that they are preset. The other parameters must be given when the partial function is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">z</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_func</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># assign (preset) 2 to x, 3 to y</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1">#   equivalent to func(2, 3, 3)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   prints 17</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1">#   equivalent to func(2, 3, 4)</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   prints 20</span>
</span></span></code></pre></div><h3 id="fastest-way-to-format-multiple-strings">Fastest way to format multiple strings</h3>
<p>Going from fastest to slowest, they are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="s1"> </span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s1">&#39;</span>  <span class="c1"># fastest</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">((</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="si">%s</span><span class="s1"> </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Template</span><span class="p">(</span><span class="s1">&#39;$s $t&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>  <span class="c1"># slowest</span>
</span></span></code></pre></div><p><strong>Note:</strong> f-strings were added in Python 3.6.</p>
<h3 id="iterating-until-a-sentinel-value">Iterating until a sentinel value</h3>
<p>This method has 2 forms:</p>
<ol>
<li><code>iter(iterable)</code> - this form simply returns an iterator from the iterable. You can call <code>next()</code> on the iterator and iterate through the iterable.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ir</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">))</span> <span class="c1"># prints c</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">))</span> <span class="c1"># prints python</span>
</span></span></code></pre></div><ol start="2">
<li><code>iter(callable, sentinel)</code> - this form executes the function <code>callable</code> until it returns <code>sentinel</code> value.</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">langs</span> <span class="o">=</span> <span class="p">[]):</span>
</span></span><span class="line"><span class="cl">    <span class="n">langs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ir</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># prints 4</span>
</span></span><span class="line"><span class="cl"><span class="nb">next</span><span class="p">(</span><span class="n">ir</span><span class="p">)</span>    <span class="c1"># raise StopIteration</span>
</span></span></code></pre></div><p>Read 80 characters from file <code>f</code> into <code>line</code> and append to <code>text</code> until <code>f.read()</code> returns <code>''</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">partial</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">,</span> <span class="mi">80</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">text</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="for-else-in-python">For else in Python</h3>
<p>Search a certain value in an iterable and do something if it is not there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">lang</span> <span class="ow">in</span> <span class="n">langs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">lang</span> <span class="o">==</span> <span class="s1">&#39;scala&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;We found Scala!&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Scala is not in the list...&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> Careful if you ever come back to this kind of code. Don&rsquo;t indent the <code>else</code> statement by accident!!!</p>
<h3 id="looping-over-dictionary-keys">Looping over dictionary keys</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># cannot mutate dictionary here</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># free to mutate the keys and values</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">keys</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="s1">&#39;foo&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>d.keys()</code> used to make a list copy of the keys, so there was no problem iterating and mutating the original dictionary at the same time. In modern Python3, <code>d.keys()</code> returns an iterable and can no longer be used to iterate and mutate a dictionary at the same time. To go around this, just wrap the method into a list as in the example.</p>
<p><strong>Note 2:</strong> There is an &lsquo;alternative&rsquo; to this, but it has worse performance and memory usage:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t do this, performance is bad as it copies every element in a dictionary and can be really bad for really big dictionaries</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="o">!=</span> <span class="s1">&#39;foo&#39;</span><span class="p">}</span>
</span></span></code></pre></div><h3 id="looping-over-dictionary-keys-and-values">Looping over dictionary keys and values</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>The <code>items()</code> method returns and iterator, so it uses the same amount of memory no matter how big the dictionary is.</p>
<p><strong>Note:</strong> In python2, the <code>items()</code> method used to return a list of tuples, and the <code>iteritems()</code> used to do what <code>items()</code> does now in python3.</p>
<h3 id="construct-a-dictionary-from-2-iterables">Construct a dictionary from 2 iterables</h3>
<p>Use the <code>zip()</code> method to pack 2 iterables into a zip object, then use the <code>dict()</code> method to make that into a dictionary.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">langs</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>    <span class="c1"># prints {&#39;c&#39;: &#39;blue&#39;, &#39;python&#39;: &#39;green&#39;, &#39;java&#39;: &#39;red&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">colors</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>    <span class="c1"># prints {1: &#39;blue&#39;, 2: &#39;green&#39;, 3: &#39;red&#39;}</span>
</span></span></code></pre></div><h3 id="populating-a-dictionary-with-default-data-counting-with-dictionary">Populating a dictionary with default data (Counting with dictionary)</h3>
<p>Use the <code>defaultdict()</code> method imported from <code>collections</code>. When a key is not in the dictionary, it creates a new key that has the default value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {&#39;blue&#39;: 1, &#39;green&#39;: 2, &#39;red&#39;: 3}</span>
</span></span></code></pre></div><p><strong>Note:</strong> This is a faster approach than <code>setdefault()</code> on most cases and faster than <code>get()</code> in all cases. Also, <code>defaultdict()</code> seems to work faster on native types like <code>int</code> or <code>string</code> and slower on <code>dict</code> or <code>list</code>. That being said, there are times when you cannot use <code>defaultdict()</code> and have to use either <code>setdefault()</code> or <code>get()</code>, for example when the default value of a certain key depends on the key itself, so <code>defaultdict()</code> cannot be used from the beginning to have a default value for every new key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;red&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">colors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">color</span> <span class="o">==</span> <span class="s1">&#39;red&#39;</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>    <span class="c1"># prints {&#39;blue&#39;: 1, &#39;green&#39;: 2, &#39;red&#39;: 5}</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> A case where <code>get()</code> accomplishes nicely what <code>setdefault()</code> and <code>defaultdict()</code> would do in a more complicated manner is when you have to return a default value from a dictionary if the key is not in it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;Alice&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">2</span><span class="p">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mi">3</span><span class="p">:</span> <span class="s1">&#39;Carla&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s1">&#39;Hi, </span><span class="si">{</span><span class="n">d</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="s2">&#34;random person&#34;</span><span class="p">)</span><span class="si">}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="c1"># prints Hi, Alice</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hello</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># prints Hi, random person</span>
</span></span></code></pre></div><h3 id="creating-a-list-with-n-elements">Creating a list with n elements</h3>
<p>Say you want to create a list with 100 elements of 0. You can just do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="ternary-operator-in-python">Ternary operator in Python</h3>
<p>This:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>can be written like this in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="grouping-data-with-dictionaries">Grouping data with dictionaries</h3>
<p>Say you want to group the items in a list based on some comparison function, for example <code>len()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;julia&#39;</span><span class="p">,</span> <span class="s1">&#39;mark&#39;</span><span class="p">,</span> <span class="s1">&#39;thomas&#39;</span><span class="p">,</span> <span class="s1">&#39;rachel&#39;</span><span class="p">,</span> <span class="s1">&#39;alex&#39;</span><span class="p">,</span> <span class="s1">&#39;maria&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {5: [&#39;julia&#39;, &#39;maria&#39;], 4: [&#39;mark&#39;, &#39;alex&#39;], 6: [&#39;thomas&#39;, &#39;rachel&#39;]}</span>
</span></span></code></pre></div><p>All you have to do to group based on some other function is change the <code>key</code> to something else.</p>
<h3 id="unpacking-sequences">Unpacking sequences</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="s1">&#39;alex&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span>         <span class="c1"># same as p = (&#39;alex&#39;, &#39;blue&#39;, 20, &#39;c&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">lang</span> <span class="o">=</span> <span class="n">p</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>                            <span class="c1"># prints a tuple - (&#39;alex&#39;, &#39;blue&#39;, 20, &#39;c&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>       <span class="c1"># prints alex blue 20 c</span>
</span></span></code></pre></div><p><strong>Note:</strong> In the same manner, swapping 2 variables in python might be the most elegant way out of all the languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># swap x and y</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="c1"># prints 2 1</span>
</span></span></code></pre></div><h3 id="concatenating-strings">Concatenating strings</h3>
<p>Use the <code>join()</code> method to concatenate strings from an iterable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># join the strings from langs, having &#39;, &#39; as separator</span>
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="c1"># prints c, python, java, c++, kotlin, rust</span>
</span></span></code></pre></div><h3 id="atomicity-of-builtin-data-types">Atomicity of builtin data types</h3>
<p>Most (!not all) of the builtin data types methods are implemented using C function calls, so that makes it atomic.</p>
<p>For a better explanaton check <a href="https://webcache.googleusercontent.com/search?q=cache:9ATPT7NPHg0J:effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm+&amp;cd=4&amp;hl=en&amp;ct=clnk&amp;gl=in">here</a>.</p>
<p>Also, dictionaries&rsquo; <code>popitem()</code> is atomic, while <code>pop()</code> may not, based on the key type (if the key is not a builtin data type, Python has to call that object&rsquo;s <code>__hash__()</code> implementation), so better use <code>popitem()</code> where atomicity is needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;baz&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">d</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s1"> --&gt; </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># foo --&gt; c</span>
</span></span><span class="line"><span class="cl"><span class="c1"># bar --&gt; java</span>
</span></span><span class="line"><span class="cl"><span class="c1"># baz --&gt; rust</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># d is empty at the end</span>
</span></span></code></pre></div><p><strong>Note:</strong> If unsure, don&rsquo;t hesitate to use mutexes!</p>
<h3 id="linking-and-overriding-dictionaries-with-defaults">Linking and overriding dictionaries with defaults</h3>
<p>When you have a dictionary that has some default values and you want to override it with another dictionary, use <code>ChainMap()</code>. <code>ChainMap()</code> has the advantage that it doesn&rsquo;t copy anything, it just &ldquo;links&rdquo; the dictionaries, using the initial memory (this also means that any change in the initial dictionary will be reflected in the <code>ChainMap()</code> as well).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">ChainMap</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">overwritten</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;barn&#39;</span><span class="p">:</span> <span class="s1">&#39;c++&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">ChainMap</span><span class="p">(</span><span class="n">overwritten</span><span class="p">,</span> <span class="n">defaults</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>    <span class="c1"># prints {&#39;foo&#39;: &#39;rust&#39;, &#39;barn&#39;: &#39;c++&#39;, &#39;bar&#39;: &#39;c&#39;}</span>
</span></span></code></pre></div><p><strong>Note:</strong> Don&rsquo;t use <code>copy()</code> and then <code>update()</code>, it is really bad performance-wise and can be replaced in 99% of the cases by a <code>ChainMap()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d1</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d2</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;rust&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;barn&#39;</span><span class="p">:</span> <span class="s1">&#39;c++&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t do this!!</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> For a better example when this is useful, see <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap">this</a>.</p>
<h3 id="ordered-dictionary">Ordered dictionary</h3>
<p>A dictionary is not guaranteed to preserve the order of insertion. It actually optimizes keys for faster lookup. However there is one way to have a dictionary preserve insertion order, using <code>OrderedDict()</code> from <code>collections</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;bar&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;java&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="s1">&#39;baz&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;rust&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>  <span class="c1"># prints {&#39;bar&#39;: &#39;c&#39;, &#39;foo&#39;: &#39;java&#39;, &#39;baz&#39;: &#39;rust&#39;}</span>
</span></span></code></pre></div><p><strong>Note:</strong> Since Python 3.7, regular <code>dict</code>s have guaranteed ordering. More <a href="https://docs.python.org/3/library/stdtypes.html#dict">here</a>. Note however that they don&rsquo;t <strong><em>completely</em></strong> replace <code>OrderedDict</code>s, since they have extra features:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>   <span class="c1"># returns True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="p">)</span>   <span class="c1"># returns False since OrderedDicts are order-sensitive, and regular dicts are not</span>
</span></span></code></pre></div><p>Also, <code>OrderedDict</code>s have methods to change order of elements, while regular <code>dict</code>s don&rsquo;t.</p>
<h3 id="using-deque-instead-of-a-list-when-updating">Using deque instead of a list when updating</h3>
<p>Deques (double ended queues) are really fast in python3. They are implemented using doubly-linked lists, so inserting and removing at the end or at the beginning is O(1) complexity. Lists are implemented as normal arrays, so they have to sometimes <code>realloc()</code> to accomodate for the number of elements (only sometimes because by default it <code>realloc()</code>s more memory at the time than necessary&rsquo;), so that makes them have O(n) complexity when inserting or removing at the beginning because they have to copy the rest of the elements.</p>
<p>Generally, updating a sequence is MUCH faster when using a <code>deque()</code> as opposed to using a <code>list()</code> (though keep in mind that accessing a random element in a <code>deque()</code> is expensive, whereas accessing a random element in a <code>list()</code> is O(1)).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Wrong!</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;scala&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Right!</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">popleft</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;scala&#39;</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="temporary-contexts">Temporary contexts</h3>
<p>Usually there is the case that code like this is written in other languages:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">getcontext</span><span class="p">,</span> <span class="n">setcontext</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">old_context</span> <span class="o">=</span> <span class="n">getcontext</span><span class="p">()</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">getcontext</span><span class="p">()</span><span class="o">.</span><span class="n">prec</span> <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="mi">355</span><span class="p">)</span> <span class="o">/</span> <span class="n">Decimal</span><span class="p">(</span><span class="mi">113</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">setcontext</span><span class="p">(</span><span class="n">old_context</span><span class="p">)</span>
</span></span></code></pre></div><p>This can easily be replaced with contexts:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="n">localcontext</span><span class="p">,</span> <span class="n">Context</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">localcontext</span><span class="p">(</span><span class="n">Context</span><span class="p">(</span><span class="n">prec</span><span class="o">=</span><span class="mi">50</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="mi">355</span><span class="p">)</span> <span class="o">/</span> <span class="n">Decimal</span><span class="p">(</span><span class="mi">113</span><span class="p">))</span>
</span></span></code></pre></div><p>Other examples:</p>
<ol>
<li>Writing or reading from file</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something with data</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something with data</span>
</span></span></code></pre></div><ol start="2">
<li>Deleting a file (getting rid of the try-except-pass idiom):</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;sometempfile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">suppress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">suppress</span><span class="p">(</span><span class="ne">FileNotFoundError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;sometempfile.tmp&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>suppress()</code> is a reentrant context manager. More info <a href="https://docs.python.org/3/library/contextlib.html#reentrant-context-managers">here</a>.</p>
<ol start="3">
<li>Using a lock</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># critical section</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># critical section</span>
</span></span></code></pre></div><p><strong>Note:</strong> For reentrant lock context manager, see <a href="https://docs.python.org/3/library/threading.html#threading.RLock">threading.RLock</a>.</p>
<ol start="4">
<li>Redirecting output from stdout to file</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">sldstdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">oldstdout</span>
</span></span></code></pre></div><p>can be replaced with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Note:</strong> <code>redirect_stdout()</code> is also a reentrant context manager.</p>
<p>More on context managers <a href="https://docs.python.org/3/library/contextlib.html">here</a>.</p>
<h3 id="using-the-cache-for-optimized-function-calls">Using the cache for optimized function calls</h3>
<p>For example, looking up a webpage numerous times is expensive, and usually the result is the same. So use the <code>lru_cache()</code> decorator:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@lru_cache</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">web_lookup</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span></code></pre></div><p>More can be found <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache">here</a>.</p>
<h3 id="test-a-sequence-or-generator-for-truthness">Test a sequence or generator for truthness</h3>
<p>Using the <code>any()</code> function, you can check if at least one value in the iterable is <code>True</code>. It applies the <code>bool()</code> function to every element.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">false_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="kc">False</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="p">[],</span> <span class="p">{},</span> <span class="kc">None</span><span class="p">]</span>   <span class="c1"># all of these return False when using bool() on them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">false_lst</span><span class="p">))</span>   <span class="c1"># prints False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">true_lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="mf">3.14</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">}]</span>  <span class="c1"># all of these return True when using bool() on them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">true_lst</span><span class="p">))</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">falst_lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>    <span class="c1"># any integer different from 0 is considered True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">false_lst</span><span class="p">))</span>   <span class="c1"># prints True</span>
</span></span></code></pre></div><p><strong>Note:</strong> This function shortcircuits, meaning the first time it finds <code>True</code> it returns; it does <strong>NOT</strong> check for the rest of the values to be <code>True</code>.</p>
<p><strong>Note 2:</strong> It is really useful with generators:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">))</span>   <span class="c1"># prints True after 2 values evaluated, as range() is a generator</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">any</span><span class="p">([</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)]))</span>   <span class="c1"># prints True after the whole list of 1000000 elements has been initialized, as range() has to populate the list first</span>
</span></span></code></pre></div><p>There is another function, <code>all()</code>, that does what it says: it tests for all the elements in the sequence to be <code>True</code>, and works much in the same way as <code>any()</code>.</p>
<h3 id="use-namedtuples-instead-of-tuples">Use namedtuples instead of tuples</h3>
<p>Aside from the fact that <code>namedtuple()</code>s are more verbose, they also offer better usage, as they can be treated as regular tuples, classes or even dictionaries.</p>
<p>For example, having a point:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pt1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">pt1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>   <span class="c1"># prints 2 3</span>
</span></span></code></pre></div><p>can be replaced with the better alternative <code>namedtuple()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Point</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Point&#39;</span><span class="p">,</span> <span class="s1">&#39;x y&#39;</span><span class="p">)</span>  <span class="c1"># a tuple named &#39;Point&#39; with attributes &#39;x&#39; and &#39;y&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># alternatively this means the exact same thing</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Point = namedtuple(&#39;Point&#39;, [&#39;x&#39;, &#39;y&#39;])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pt1</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">)</span>                  <span class="c1"># prints Point(x=2, y=3)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">pt1</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>         <span class="c1"># prints 2 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">pt1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>       <span class="c1"># prints 2 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">_asdict</span><span class="p">()))</span>  <span class="c1"># prints {&#39;x&#39;: 2, &#39;y&#39;: 3}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">pt1</span><span class="o">.</span><span class="n">_replace</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">50</span><span class="p">))</span>   <span class="c1"># prints Point(x=50, y=3)</span>
</span></span><span class="line"><span class="cl">                            <span class="c1"># Note however that _replace() returns a modified copy. The original is still a tuple, so it cannot be modified</span>
</span></span></code></pre></div><p>Another common example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="s1">&#39;age color lang&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>   <span class="c1"># prints Person(age=31, color=&#39;blue&#39;, lang=&#39;c&#39;)</span>
</span></span></code></pre></div><p><strong>Note:</strong> When the values from a <code>namedtuple()</code> are invalid (e.g. having one of the fields named <code>class</code> or having the same field twice), it throws a <code>ValueError</code>. To avoid this you can possibly provide a third parameter named <code>rename</code>. If set to <code>True</code>, it will rename the field that is incorrect.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">namedtuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="o">=</span> <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;Person&#39;</span><span class="p">,</span> <span class="s1">&#39;age color age&#39;</span><span class="p">,</span> <span class="n">rename</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">Person</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;whatever&#39;</span><span class="p">))</span>   <span class="c1"># prints Person(age=31, color=&#39;blue&#39;, _2=&#39;whatever&#39;)</span>
</span></span></code></pre></div><p><strong>Note 2:</strong> Since Python 3.8, <code>_asdict()</code> method returns a regular dictionary, as regular <code>dict</code>s now have guaranteed ordering based on insertion (since Python 3.7).</p>
<h3 id="profiling-code-with-cprofile">Profiling code with cProfile</h3>
<p>Since Python 3.8, cProfile can be used as a context manager, making it extremely easy to profile code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cProfile</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">cProfile</span><span class="o">.</span><span class="n">Profile</span><span class="p">()</span> <span class="k">as</span> <span class="n">profiler</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># code to be profiled</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">profiler</span><span class="o">.</span><span class="n">print_stats</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="pretty-print-stuff">Pretty print stuff</h3>
<p>One way to format the output is to use the <code>pprint</code> module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s2">&#34;Here is a long string&#34;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">compact</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># { &#39;a&#39;: [ &#39;Here&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;is&#39;, &#39;a&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;long&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;string&#39;],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;b&#39;: [ 0, 1, 2, 3,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          4],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;c&#39;: []}</span>
</span></span></code></pre></div><p><strong>Note</strong>: Since Python 3.8, the parameter <code>sort_dicts</code> was added (<code>True</code> by default):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="s2">&#34;Here is a long string&#34;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">compact</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">sort_dicts</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># { &#39;b&#39;: [ 0, 1, 2, 3,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          4],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;c&#39;: [],</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#39;a&#39;: [ &#39;Here&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;is&#39;, &#39;a&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;long&#39;,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#          &#39;string&#39;]}</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/pprint.html#module-pprint">here</a>.</p>
<h3 id="the-is-operator-vs--operator">The &ldquo;is&rdquo; operator vs &ldquo;==&rdquo; operator</h3>
<p>The <code>is</code> operator checks if 2 objects point to the same memory address. The equality operator <code>==</code> checks if 2 objects are equal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span>    <span class="c1"># now copy and langs point to the same memory object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="o">==</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">other_copy</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># other_copy has a copy of langs, but point to different memory objects</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">other_copy</span> <span class="o">==</span> <span class="n">langs</span><span class="p">)</span>  <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">other_copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>  <span class="c1"># prints False</span>
</span></span></code></pre></div><h3 id="list-slices">List slices</h3>
<p>You can use slices to replace elements, delete elements or make a copy of a list.</p>
<ol>
<li>Delete items:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">langs</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints [&#39;c++&#39;, &#39;kotlin&#39;, &#39;rust&#39;]</span>
</span></span></code></pre></div><ol start="2">
<li>Replace elements of a list without creating a new list object</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">,</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">43</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span><span class="p">)</span>             <span class="c1"># prints [41, 42, 43]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">copy</span> <span class="ow">is</span> <span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints False, langs points to new list (new memory object)</span>
</span></span></code></pre></div><ol start="3">
<li>Make a (shallow) copy of a list</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">langs</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">],</span> <span class="s1">&#39;c++&#39;</span><span class="p">,</span> <span class="s1">&#39;kotlin&#39;</span><span class="p">,</span> <span class="s1">&#39;rust&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">copy</span> <span class="o">=</span> <span class="n">langs</span><span class="p">[:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">copy</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;some other lang&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">langs</span><span class="p">)</span>    <span class="c1"># prints [&#39;c&#39;, [&#39;some other lang&#39;, &#39;java&#39;], &#39;c++&#39;, &#39;kotlin&#39;, &#39;rust&#39;]</span>
</span></span></code></pre></div><p><strong>Note:</strong> If you need a deep copy consider using the function <code>deepcopy()</code> from the module <code>copy</code>.</p>
<h3 id="deep-and-shallow-copies">Deep and shallow copies</h3>
<p>There are 2 types of copies in Python. One is the shallow copy, that works very similar to how assigning to pointers works in C (they only reference the object they point to, changing one also changes the other), and the other is the deep copy, which makes a perfect copy of the object.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">copy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list2</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list2</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl"><span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># shallow copy, list2 holds references to objects in list1, changing one also changes the other</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>    <span class="c1"># prints [1, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list2</span><span class="p">)</span>    <span class="c1"># prints [7, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list3</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list3</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># deep copy, list3 is a perfect copy of list1 with no references to it, changing one doesn&#39;t change the other</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span>    <span class="c1"># prints [1, 2, [3, 6], 5]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span>    <span class="c1"># prints [9, 2, [3, 8], 5]</span>
</span></span></code></pre></div><p>More about deep and shallow copies <a href="https://www.geeksforgeeks.org/copy-python-deep-copy-shallow-copy/">here</a>.</p>
<h3 id="pythons-built-in-http-server">Python&rsquo;s built-in http server</h3>
<p>Python has a built-in http server; it can be super useful if you want to preview a website without going the hurdle of starting an apache or nginx server.</p>
<p>This serves the website in the current directory at address <code>localhost:8000</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python3 -m http.server
</span></span></code></pre></div><h3 id="type-annotations">Type annotations</h3>
<p>Python 3.5 supports type annotations, which can ensure better readability. <strong>Note however that they are only there for the programmer to acknowledge, Python does not care and won&rsquo;t change anything based on them</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">s1</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">s2</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">42</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">s2</span>
</span></span></code></pre></div><p>They can be changed to anything you want:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func2</span><span class="p">(</span><span class="n">page</span><span class="p">:</span> <span class="s1">&#39;web page&#39;</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span> <span class="s1">&#39;web request&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s1">&#39;web response&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return response</span>
</span></span></code></pre></div><p><strong>Note:</strong> Passing 2 strings to <code>func()</code> is perfectly valid, as Python does <strong><em>NOT</em></strong> care at all about these annotations (in this case the function would return the 2 strings concatenated).</p>
<p><strong>Note 2:</strong> You can use stuff like <a href="http://mypy-lang.org">Mypy</a> to enforce this kind of behaviour, so Python becomes statically-typed!</p>
<p>More info about type annotations can be found in <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>.</p>
<p><strong>Note 3:</strong> Since Python 3.6, <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526</a>, more support for type annotations was added. Again, <strong>Python will always be a dynamically-typed language</strong>, but tools can be used to ensure static typing.</p>
<h3 id="counter-for-iterables">Counter for iterables</h3>
<p>This is an easy method to find the most common elements in an iterable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">collections</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">count</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">(</span><span class="s1">&#39;some random string&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;s&#39;, 2), (&#39;o&#39;, 2), (&#39;m&#39;, 2), (&#39; &#39;, 2), (&#39;r&#39;, 2), (&#39;n&#39;, 2), (&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;d&#39;, 1), (&#39;t&#39;, 1), (&#39;i&#39;, 1), (&#39;g&#39;, 1)]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">most_common</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;s&#39;, 2), (&#39;o&#39;, 2), (&#39;m&#39;, 2)]</span>
</span></span></code></pre></div><p>More info can be found <a href="https://docs.python.org/3/library/collections.html#collections.Counter">in the Python docs for the Counter class</a>.</p>
<h3 id="permutations-of-an-iterable">Permutations of an iterable</h3>
<p>Get permutations of an iterable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">itertools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">permutations</span><span class="p">(</span><span class="s1">&#39;abc&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;a&#39;), (&#39;b&#39;, &#39;c&#39;), (&#39;c&#39;, &#39;a&#39;), (&#39;c&#39;, &#39;b&#39;)]</span>
</span></span></code></pre></div><p>The function takes an iterable and another optional argument specifying the length of one permutation.</p>
<h3 id="getting-the-representation-of-an-object-as-a-string">Getting the representation of an object as a string</h3>
<p>Python has 2 methods to transform an object into a string (similar to other languages <code>toString()</code> methods); those are <code>str()</code> and <code>repr()</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">now</span><span class="p">))</span>     <span class="c1"># prints &#39;2020-02-12&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">now</span><span class="p">))</span>    <span class="c1"># prints &#39;datetime.date(2020, 2, 12)&#39;</span>
</span></span></code></pre></div><p>The function <code>str()</code> is made for clarity, while the function <code>repr()</code> is made to be unambiguos about what the object represents.</p>
<p>The python console uses <code>repr()</code>.</p>
<h3 id="python-disassembler">Python disassembler</h3>
<p>Python has a built-in disassembler. It is very rudimentary, but it can help debug some code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">dis</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;This is some text </span><span class="se">\&#39;</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\&#39;</span><span class="s1">.&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  4           0 LOAD_CONST               1 (&#34;This is some text &#39;&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              2 LOAD_GLOBAL              0 (str)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              4 LOAD_FAST                0 (text)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              6 CALL_FUNCTION            1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#              8 BINARY_ADD</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             10 LOAD_CONST               2 (&#34;&#39;.&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             12 BINARY_ADD</span>
</span></span><span class="line"><span class="cl"><span class="c1">#             14 RETURN_VALUE</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/dis.html">in the docs</a>.</p>
<h3 id="lambda-functions">Lambda functions</h3>
<p>Lambda functions, as in other functional programming languages, are anonymous functions that don&rsquo;t have a name. They are useful for small code that doesn&rsquo;t require more than a line or two, and they are generally passed as arguments to other functions.</p>
<p>One such example that applies to all functional programming languages is the <code>map()</code> function. It takes a callable as the first argument (read function, lambda function, something that can be called), and an iterable as the second argument, and applies the function to each of the elements of the iterable, returning a new iterable.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">string</span><span class="p">:</span> <span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="p">[</span><span class="s1">&#39;StRiNg&#39;</span><span class="p">,</span> <span class="s1">&#39;ANOTHER string&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [&#39;string&#39;, &#39;another string&#39;]</span>
</span></span></code></pre></div><p>This code does the exact same thing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">stringlower</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;StRiNg&#39;</span><span class="p">,</span> <span class="s1">&#39;ANOTHER string&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">obj</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stringlower</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints [&#39;string&#39;, &#39;another string&#39;]</span>
</span></span></code></pre></div><p>Another example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">power_func</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">power_func</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># prints 8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">)(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>   <span class="c1"># prints 1</span>
</span></span></code></pre></div><h3 id="ip-addresses-in-python">Ip addresses in Python</h3>
<p>Python has an interesting module to work with Ip addresses:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ipaddress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">address</span> <span class="o">=</span> <span class="n">ipaddress</span><span class="o">.</span><span class="n">ip_address</span><span class="p">(</span><span class="s1">&#39;192.168.100.14&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints IPv4Address(&#39;192.168.100.14&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># you can even have arithmetic operations done on this address</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">address</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints 192.168.100.17</span>
</span></span></code></pre></div><p>More info <a href="https://docs.python.org/3/library/ipaddress.html">here</a>.</p>
<h3 id="subclasses-and-subinstances">Subclasses and subinstances</h3>
<p>In Python, you can check if a class is a subclass of some other class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">))</span>  <span class="c1"># prints True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">issubclass</span><span class="p">(</span><span class="n">SubClass</span><span class="p">,</span> <span class="nb">object</span><span class="p">))</span>     <span class="c1"># prints True</span>
</span></span></code></pre></div><p>You can also check if some instance is an instance of the specified class or another sublass of that class:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BaseClass</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">SubClass</span><span class="p">(</span><span class="n">BaseClass</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">SubClass</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">BaseClass</span><span class="p">))</span>   <span class="c1"># prints True</span>
</span></span></code></pre></div><h3 id="asterisk--and-slash--in-function-definition-positional--and-keyword-only-function-parameters">Asterisk (*) and slash (\) in function definition (positional- and keyword-only function parameters)</h3>
<p>In Python 3, you can add an asterisk and a slash to a function definition with special meaning. Asterisk marks keyword-only parameters (that means parameters that can be given to the function just by keyword, not by position), while slash marks positional-only parameters (meaning parameters cannot be given by keyword, but by position only).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">positional_only_argument</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">positional_and_keyword_argument</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keyword_only_argument</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">positional_only_argument</span> <span class="o">+</span> <span class="n">positional_and_keyword_argument</span> <span class="o">+</span> <span class="n">keyword_only_argument</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Type error, third parameter should be keyword</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">positional_only_argument</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Type error, first parameter is positional only</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">keyword_only_argument</span> <span class="o">=</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># fine, prints 6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">positional_and_keyword_argument</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">keyword_only_argument</span> <span class="o">=</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># fine, prints 6</span>
</span></span></code></pre></div><p>Info and rationale about these 2 types of parameters can be found in <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102 - keyword-only parameters</a> and in <a href="https://www.python.org/dev/peps/pep-0570/">PEP 570 - positional-only parameters</a>.</p>
<p><strong>Note:</strong> Until Python 3.8, positional-only arguments could only be used in library functions. Starting from Python 3.8, they can be used in programmer constructions too.</p>
<h3 id="python-interactive-shell">Python interactive shell</h3>
<p>Say you wrote some Python code like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="k">else</span> <span class="n">b</span>
</span></span></code></pre></div><p>You can launch it in an interactive shell with <code>python -i main.py</code>, which is similar to calling only <code>python</code> in the command line, with the key difference that the python shell contains your function in the global scope as well. Go ahead, try it!</p>
<h3 id="python-debugger">Python debugger</h3>
<p>Python has a debugger, similar to gdb. One way to use it is to simply add <code>import pdb; pdb.set_trace()</code> in your program wherever u want the debugger to stop program execution.</p>
<p>In Python 3.7, the debugger can also be called on a script like this: <code>python -m pdb script.py</code>, and it stops when the module loads, just before executing the first line of the script.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pdb</span>
</span></span><span class="line"><span class="cl"><span class="n">pdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># code execution will stop here, and the program will enter the debugger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></div><p>For more information on how to operate the python debugger, visit <a href="https://docs.python.org/3/library/pdb.html#debugger-commands">this</a>.</p>
<p><strong>Note:</strong> Since Python 3.7, instead of <code>import pdb; pdb.set_trace()</code>, you can simply add a <code>breakpoint()</code> function call whenever you want the program to stop execution.</p>
<h3 id="the-walrus-operator-">The walrus operator (:=)</h3>
<p>Python 3.8 introduced assignment expressions through the use of a new operator, called the walrus operator (if you look sideways, the operator looks like a walrus).</p>
<p>Assignment expressions allow you to assign and return a value in the same expression, similar to how things work in a language like C.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;What is your age?&#34;</span><span class="p">)))</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You are a grown-up!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;You are a kid!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>It can be useful, for example in list comprehensions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s1">&#39;abcd&#39;</span> <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">:=</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># instead of having to compute f(x) twice</span>
</span></span><span class="line"><span class="cl"><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="s1">&#39;abcd&#39;</span> <span class="k">if</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">]</span>
</span></span></code></pre></div><p>Arguably, the operator is a little confusing, and most of the times not needed and can be replaced with more expressive syntax. There are good arguments to why this operator is not needed in Python <a href="https://www.reddit.com/r/Python/comments/8ex72p/pep_572_assignment_expressions/">here</a>.</p>
<p>Nonetheless, Python 3.8 adopted assignment expressions through the use of the walrus operator :=.</p>
<p>For more info on the walrus operator and assignment expressions, see <a href="https://www.python.org/dev/peps/pep-0572/">PEP 572</a>.</p>
<h3 id="formatted-strings-f-strings">Formatted strings (f-strings)</h3>
<p>Formatted string literals (or f-strings) are a construct added in Python 3.6 and have since become very popular due to the speed (see tip 7) and simplicity.</p>
<p>Some examples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">number</span> <span class="o">=</span> <span class="mf">3.1415</span>
</span></span><span class="line"><span class="cl"><span class="n">width</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">precision</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;This is </span><span class="si">{</span><span class="n">number</span><span class="si">:{</span><span class="n">width</span><span class="si">}</span><span class="s1">.</span><span class="si">{</span><span class="n">precision</span><span class="si">}}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># This is       3.14</span>
</span></span></code></pre></div><p>There are three conversion fields; <code>r</code>, <code>s</code> and <code>a</code>. What they do is call the functions <code>repr()</code>, <code>str()</code> and <code>ascii()</code> respectively on the formatted parameter.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;My name is </span><span class="si">{</span><span class="n">name</span><span class="si">!r}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># prints</span>
</span></span><span class="line"><span class="cl"><span class="c1"># My name is &#39;Alex&#39;</span>
</span></span></code></pre></div><p>Since Python 3.8, there is a new specifier (=), that expands to the representation of the expression, making it useful for debugging and self-documenting.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">name</span><span class="si">=}</span><span class="s1">&#39;</span><span class="p">)</span>               <span class="c1"># prints name=&#39;Alex&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">now</span><span class="si">=}</span><span class="s1">&#39;</span><span class="p">)</span>                <span class="c1"># prints now=datetime.date(2020, 2, 14)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># f-string specifiers still work</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">now</span><span class="si">=!s}</span><span class="s1">&#39;</span><span class="p">)</span>              <span class="c1"># prints now=2020-02-14</span>
</span></span><span class="line"><span class="cl"><span class="n">number</span> <span class="o">=</span> <span class="mf">3.1415</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Careful when adding format specifiers</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="si">=:</span><span class="s1">10.2f</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>   <span class="c1"># prints number + 1=      4.14</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">number</span> <span class="o">+</span> <span class="mi">1</span><span class="si">=:</span><span class="s1">10.2</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>    <span class="c1"># prints number + 1=       4.1</span>
</span></span></code></pre></div><p>More info about f-strings <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">in the docs</a>.</p>
<p><strong>Note:</strong> Formatted strings have a &lsquo;formatting&rsquo; option similar to how <code>printf()</code> works in other languages. Python&rsquo;s implementation of formatted print is <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language">a little more advanced though</a>.</p>
<h3 id="decorators-and-the-functoolswraps-helper-function">Decorators and the functools.wraps helper function</h3>
<p>Say you have a function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span></code></pre></div><p>But now we want to log this function call. Of course, adding this code in the implementation of the function is bad, since we&rsquo;re polluting the function code. Even more so, what if we want to log another 10 function calls?</p>
<p>For this purpose, we can easily use a decorator.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Wrapper function.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do some logging</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wrapper</span>
</span></span></code></pre></div><p>Now it is easy to use the decorator on whatever function we want to log.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@log</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span> <span class="c1"># this function call will be logged</span>
</span></span></code></pre></div><p>However, one problem arises when decorating a function like this. If we now try to get the doc or the function name, we notice that we get the information of the wrapper function, rather than that of our initial function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>      <span class="c1"># prints &#34;Wrapper function&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>     <span class="c1"># prints &#34;wrapper&#34;</span>
</span></span></code></pre></div><p>This is not ideal, considering that debuggers and other introspection tools use this. To fix this, we can use functools.wraps.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">functools</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Wrapper function.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do some logging</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">wrapper</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@log</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;This function adds 2 numbers and returns the result.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__doc__</span><span class="p">)</span>      <span class="c1"># prints &#34;This function adds 2 numbers and returns the result.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">sum</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>     <span class="c1"># prints &#34;sum&#34;</span>
</span></span></code></pre></div><h3 id="static-function-variables">Static function variables</h3>
<p>Python does not have a built-in method to have a static variable in a function like C or other languages do through the use of the <code>static</code> keyword.</p>
<p>Instead, we can use the fact that functions are first-class objects in Python and we can assign variables to them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">func</span><span class="o">.</span><span class="n">number_of_times_called</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">func</span><span class="o">.</span><span class="n">number_of_times_called</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># some really interesting code</span>
</span></span></code></pre></div><p>This is better than having a global variable pollute the global namespace, and is better than having a decorator that does that (because the decorator runs when the python module is loaded even if the function might never be called, so the decorator will still do some work and initialize some value; instead here the code runs only when the function is called, if ever).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>JAVASCRIPT TIPS &amp; TRICKS by catalinpit</title>
      <link>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-catalinpit/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-catalinpit/</guid>
      <description>A collection of JavaScript tips and tricks 🔥🚀⚡</description>
      <content:encoded><![CDATA[<p>A collection of JavaScript tips and tricks.</p>
<p>No particular order or path.</p>
<p>I add things as I discover them.</p>
<p><em>Check <a href="https://codinghub.tips/">Codinghub.tips</a>, too, for JavaScript tips. It&rsquo;s not my project but I like it.</em> 🔥</p>
<h1 id="optional-chaining">Optional chaining</h1>
<p>&ldquo;Shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">socialMedia</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">twitter</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">instagram</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">linkedin</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">experience</span><span class="o">:</span> <span class="s2">&#34;Junior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">employed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">person</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">twitter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">twitter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// The same thing with optional chaining
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">person</span><span class="o">?</span><span class="p">.</span><span class="nx">socialMedia</span><span class="o">?</span><span class="p">.</span><span class="nx">twitter</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">twitter</span><span class="p">);</span> <span class="c1">// outputs @catalinmpit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="o">?</span><span class="p">.</span><span class="nx">socialMedia</span><span class="o">?</span><span class="p">.</span><span class="nx">twitter</span><span class="p">);</span>
</span></span></code></pre></div><h1 id="nullish-coalescing-operator">Nullish coalescing operator</h1>
<p>&ldquo;The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">socialMedia</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">twitter</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">instagram</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">linkedin</span><span class="o">:</span> <span class="s2">&#34;@catalinmpit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">experience</span><span class="o">:</span> <span class="s2">&#34;Junior&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">employed</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">facebook</span> <span class="o">??</span> <span class="s2">&#34;No Facebook account found!&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;No Facebook account found!&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">socialMedia</span><span class="p">.</span><span class="nx">instagram</span> <span class="o">??</span> <span class="s2">&#34;No Instagram account found!&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;@catalinmpit&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">/// Another example ///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">??</span> <span class="s2">&#34;No name assigned&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;No name assigned&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span> <span class="o">??</span> <span class="s2">&#34;No name assigned&#34;</span><span class="p">);</span> <span class="c1">// Outputs &#39;Catalin Pit&#39;
</span></span></span></code></pre></div><h1 id="merge-objects-together---spread-operator">Merge objects together - spread operator</h1>
<p>&ldquo;Shallow-cloning (excluding prototype) or merging of objects is now possible using a shorter syntax than Object.assign().&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;Junior Fullstack Developer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uses</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">machine</span><span class="o">:</span> <span class="s2">&#34;MacBook Pro 15 inch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">editor</span><span class="o">:</span> <span class="s2">&#34;VS Code&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">language</span><span class="o">:</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">phone</span><span class="o">:</span> <span class="s2">&#34;Samsung Note 10&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">summary</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">user</span><span class="p">,</span> <span class="p">...</span><span class="nx">uses</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">summary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Outputs //
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">summary</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">role</span><span class="o">:</span> <span class="s2">&#34;Junior Fullstack Developer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">age</span><span class="o">:</span> <span class="mi">23</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">machine</span><span class="o">:</span> <span class="s2">&#34;MacBook Pro 15 inch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">editor</span><span class="o">:</span> <span class="s2">&#34;VS Code&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">language</span><span class="o">:</span> <span class="s2">&#34;JavaScript&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">phone</span><span class="o">:</span> <span class="s2">&#34;Samsung Note 10&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h1 id="two-ways-to-convert-a-string-to-a-character-array">Two ways to convert a string to a character array</h1>
<p>These are two quick ways to convert your string to an array of characters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&#34;Catalin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstNameArr1</span> <span class="o">=</span> <span class="nx">firstName</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNameArr1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">firstNameArr2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">firstName</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstNameArr2</span><span class="p">);</span>
</span></span></code></pre></div><h1 id="default-parameters">Default parameters</h1>
<p>&ldquo;Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">add</span><span class="p">();</span> <span class="c1">// Returns 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// Returns 12
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Returns 10
</span></span></span></code></pre></div><h1 id="filter-unique-values--remove-duplicate-values">Filter unique values / remove duplicate values</h1>
<p>&ldquo;Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur once; it is unique in the Set&rsquo;s collection.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// Strings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Catalin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Catalin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Pit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Tom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Tom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;John&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;John&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uniqueNames</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">names</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uniqueNames</span><span class="p">);</span> <span class="c1">// Outputs [&#39;Catalin&#39;, &#39;Pit&#39;, &#39;Tom&#39;, &#39;John&#39;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">examScores</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="mi">50</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">uniqueExamScores</span> <span class="o">=</span> <span class="p">[...</span><span class="k">new</span> <span class="nx">Set</span><span class="p">(</span><span class="nx">examScores</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">uniqueExamScores</span><span class="p">);</span> <span class="c1">// Outputs [50, 75, 100, 99, 95, 67, 43];
</span></span></span></code></pre></div><h1 id="filter-out-falsy-values">Filter out falsy values</h1>
<p>Remove falsy values such as <code>null, undefined, 0, boolean</code> and so on, from an array.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Catalin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Macbook&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Car&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;Peace&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="mi">191</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">filteredArray</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nb">Boolean</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">filteredArray</span><span class="p">);</span> <span class="c1">// Returns [&#34;Catalin&#34;, 1, &#34;Macbook&#34;, true, &#34;Car&#34;, &#34;Peace&#34;, 191]
</span></span></span></code></pre></div><h1 id="required-parameters">Required parameters</h1>
<p>Default parameters allows us to require an argument to be passed to the function.</p>
<p>We can create a function which throws an error and assign it as default value for required parameters.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">required</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="s2">&#34;You did not pass the required argument!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">greet</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">required</span><span class="p">())</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">!`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">greet</span><span class="p">();</span> <span class="c1">// Returns &#34;Uncaught TypeError: You did not pass the required argument!&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">greet</span><span class="p">(</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">);</span> <span class="c1">// Returns &#34;Hello Catalin Pit!&#34;
</span></span></span></code></pre></div><h1 id="pass-an-empty-parameter">Pass an empty parameter</h1>
<p>With the help of the spread syntax, we can now pass an empty parameter to a function.</p>
<p>&ldquo;Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">greet</span><span class="p">(</span><span class="nx">fullName</span><span class="p">,</span> <span class="nx">instagramHandle</span><span class="p">,</span> <span class="nx">twitterHandle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="sb">`Hello, my name is </span><span class="si">${</span><span class="nx">fullName</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">instagramHandle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span> <span class="o">+=</span> <span class="sb">` My Instagram handle is </span><span class="si">${</span><span class="nx">instagramHandle</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">twitterHandle</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">message</span> <span class="o">+=</span> <span class="sb">` My Twitter handle is </span><span class="si">${</span><span class="nx">twitterHandle</span><span class="si">}</span><span class="sb">.`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">message</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit. My Instagram handle is @cpit. My Twitter handle is @catapit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greet</span><span class="p">(</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span> <span class="s2">&#34;@cpit&#34;</span><span class="p">,</span> <span class="s2">&#34;@catapit&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit. My Twitter handle is @cpit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">greet</span><span class="p">(...[</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span> <span class="p">,</span> <span class="s2">&#34;@cpit&#34;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Returns &#34;Hello, my name is Catalin Pit. My Instagram handle is @catapit.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">greet</span><span class="p">(...[</span><span class="s2">&#34;Catalin Pit&#34;</span><span class="p">,</span> <span class="s2">&#34;@catapit&#34;</span><span class="p">]);</span>
</span></span></code></pre></div><h1 id="accept-any-number-of-arguments-in-a-function">Accept any number of arguments in a function</h1>
<p>We are making use of the spread operator again to accept any number of arguments in a function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">accumulator</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">acc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">val</span> <span class="k">of</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">acc</span> <span class="o">+=</span> <span class="nx">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">accumulator</span><span class="p">();</span> <span class="c1">// Outputs 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// Outputs 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// Outputs 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// Outputs 17
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span> <span class="c1">// Outputs 20
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">accumulator</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// Outputs 1020
</span></span></span></code></pre></div><h1 id="check-if-every-item-from-an-array-passes-a-test-condition">Check if every item from an array passes a test condition</h1>
<p>&ldquo;The <code>every()</code> method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">closeOffice</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">closeOffice2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">,</span> <span class="s2">&#34;true&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">closeOffice3</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">,</span> <span class="s2">&#34;false&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">doYouWorkFromHome</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">answer</span> <span class="o">==</span> <span class="s2">&#34;true&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">closeOffice</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">doYouWorkFromHome</span><span class="p">);</span> <span class="c1">// Returns false - We don&#39;t close the office
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">closeOffice2</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">doYouWorkFromHome</span><span class="p">);</span> <span class="c1">// Returns true - We close the office
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">closeOffice3</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span><span class="nx">doYouWorkFromHome</span><span class="p">);</span> <span class="c1">// Returns false - We don&#39;t close the office
</span></span></span></code></pre></div><h1 id="check-if-some-items-from-an-array-pass-a-test-condition">Check if some items from an array pass a test condition</h1>
<p>&ldquo;The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.&rdquo; (Source: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">MDN</a>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">devTeam</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;senior&#34;</span><span class="p">,</span> <span class="s2">&#34;senior&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">devTeam1</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">devTeam2</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;middle&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">,</span> <span class="s2">&#34;senior&#34;</span><span class="p">,</span> <span class="s2">&#34;junior&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">proceedWithProject</span><span class="p">(</span><span class="nx">answer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">answer</span> <span class="o">==</span> <span class="s2">&#34;senior&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">devTeam</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">proceedWithProject</span><span class="p">);</span> <span class="c1">// Returns true - We can proceed with the project
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">devTeam1</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">proceedWithProject</span><span class="p">);</span> <span class="c1">// Returns false - We cannot proceed with the project
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">devTeam2</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">proceedWithProject</span><span class="p">);</span> <span class="c1">// Returns true - We can proceed with the project
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
