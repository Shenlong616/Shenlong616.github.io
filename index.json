[{"content":"Async/await const random = () =\u0026gt; { return Promise.resolve(Math.random()); }; (\u0026#34;Bad Promise Code üí©\u0026#34;); const sumRandomAsyncNums = () =\u0026gt; { let first; let second; let third; return random() .then((v) =\u0026gt; { first = v; return random(); }) .then((v) =\u0026gt; { second = v; return random(); }) .then((v) =\u0026gt; { third = v; return first + second + third; }) .then((v) =\u0026gt; { console.log(`Result ${v}`); }); }; (\u0026#34;Good Promise Code ‚úÖ\u0026#34;); const sumRandomAsyncNums = async () =\u0026gt; { const first = await random(); const second = await random(); const third = await random(); console.log(`Result ${first + second + third}`); if (await random()) { // do something } const randos = Promise.all([random(), random(), random()]); for (const r of await randos) { console.log(r); } }; sumRandomAsyncNums(); console.log() const foo = { name: \u0026#34;tom\u0026#34;, age: 30, nervous: false }; const bar = { name: \u0026#34;dick\u0026#34;, age: 40, nervous: false }; const baz = { name: \u0026#34;harry\u0026#34;, age: 50, nervous: true }; (\u0026#34;Bad Code üí©\u0026#34;); console.log(foo); console.log(bar); console.log(baz); (\u0026#34;Good Code ‚úÖ\u0026#34;); // Computed Property Names console.log(\u0026#34;%c My Friends\u0026#34;, \u0026#34;color: orange; font-weight: bold;\u0026#34;); console.log({ foo, bar, baz }); // Console.table(...) console.table([foo, bar, baz]); // // Console.time console.time(\u0026#34;looper\u0026#34;); let i = 0; while (i \u0026lt; 1000000) { i++; } console.timeEnd(\u0026#34;looper\u0026#34;); // // Stack Trace Logs const deleteMe = () =\u0026gt; console.trace(\u0026#34;bye bye database\u0026#34;); deleteMe(); deleteMe(); Destructuring assignment const turtle = { name: \u0026#34;Bob üê¢\u0026#34;, legs: 4, shell: true, type: \u0026#34;amphibious\u0026#34;, meal: 10, diet: \u0026#34;berries\u0026#34;, }; (\u0026#34;Bad Code üí©\u0026#34;); function feed(animal) { return `Feed ${animal.name} ${animal.meal} kilos of ${animal.diet}`; } (\u0026#34;Good Code ‚úÖ\u0026#34;); function feed({ name, meal, diet }) { return `Feed ${name} ${meal} kilos of ${diet}`; } // OR function feed(animal) { const { name, meal, diet } = animal; return `Feed ${name} ${meal} kilos of ${diet}`; } console.log(feed(turtle)); loops.js const orders = [500, 30, 99, 15, 223]; (\u0026#34;Bad Loop Code üí©\u0026#34;); const total = 0; const withTax = []; const highValue = []; for (i = 0; i \u0026lt; orders.length; i++) { // Reduce total += orders[i]; // Map withTax.push(orders[i] * 1.1); // Filter if (orders[i] \u0026gt; 100) { highValue.push(orders[i]); } } (\u0026#34;Good Loop Code ‚úÖ\u0026#34;); // Reduce const total = orders.reduce((acc, cur) =\u0026gt; acc + cur); // Map const withTax = orders.map((v) =\u0026gt; v * 1.1); // Filter const highValue = orders.filter((v) =\u0026gt; v \u0026gt; 100); /** * Every * @returns false */ const everyValueGreaterThan50 = orders.every((v) =\u0026gt; v \u0026gt; 50); /** * Every * @returns true */ const everyValueGreaterThan10 = orders.every((v) =\u0026gt; v \u0026gt; 10); /** * Some * @returns false */ const someValueGreaterThan500 = orders.some((v) =\u0026gt; v \u0026gt; 500); /** * Some * @returns true */ const someValueGreaterThan10 = orders.some((v) =\u0026gt; v \u0026gt; 10); Rest parameters \u0026#34;Bad Function Code üí©\u0026#34;; function totalHitPoints(a, b, c, d) { return a + b + c + d; } (\u0026#34;Good Function Code ‚úÖ\u0026#34;); function totalHitPoints(...hits) { return hits.reduce((a, b) =\u0026gt; a + b); } totalHitPoints(1, 2, 3, 4, 5, 6, 7); Spread syntax (\u0026hellip;) // Objects const pikachu = { name: \u0026#34;Pikachu üêπ\u0026#34; }; const stats = { hp: 40, attack: 60, defense: 45 }; (\u0026#34;Bad Object Code üí©\u0026#34;); pikachu[\u0026#34;hp\u0026#34;] = stats.hp; pikachu[\u0026#34;attack\u0026#34;] = stats.attack; pikachu[\u0026#34;defense\u0026#34;] = stats.defense; // OR const lvl0 = Object.assign(pikachu, stats); const lvl1 = Object.assign(pikachu, { hp: 45 }); (\u0026#34;Good Object Code ‚úÖ\u0026#34;); const lvl0 = { ...pikachu, ...stats }; const lvl1 = { ...pikachu, hp: 45 }; // Arrays let pokemon = [\u0026#34;Arbok\u0026#34;, \u0026#34;Raichu\u0026#34;, \u0026#34;Sandshrew\u0026#34;]; (\u0026#34;Bad Array Code üí©\u0026#34;); pokemon.push(\u0026#34;Bulbasaur\u0026#34;); pokemon.push(\u0026#34;Metapod\u0026#34;); pokemon.push(\u0026#34;Weedle\u0026#34;); (\u0026#34;Good Array Code ‚úÖ\u0026#34;); // Push pokemon = [...pokemon, \u0026#34;Bulbasaur\u0026#34;, \u0026#34;Metapod\u0026#34;, \u0026#34;Weedle\u0026#34;]; // Shift pokemon = [\u0026#34;Bulbasaur\u0026#34;, ...pokemon, \u0026#34;Metapod\u0026#34;, \u0026#34;Weedle\u0026#34;]; Template literals const horse = { name: \u0026#34;Topher üê¥\u0026#34;, size: \u0026#34;large\u0026#34;, skills: [\u0026#34;jousting\u0026#34;, \u0026#34;racing\u0026#34;], age: 7, }; (\u0026#34;Bad String Code üí©\u0026#34;); let bio = horse.name + \u0026#34; is a \u0026#34; + horse.size + \u0026#34; horse skilled in \u0026#34; + horse.skills.join(\u0026#34; \u0026amp; \u0026#34;); (\u0026#34;Good String Code ‚úÖ\u0026#34;); const { name, size, skills } = horse; bio = `${name} is a ${size} horse skilled in ${skills.join(\u0026#34; \u0026amp; \u0026#34;)}`; console.log(bio); // Advanced Tag Example function horseAge(str, age) { const ageStr = age \u0026gt; 5 ? \u0026#34;old\u0026#34; : \u0026#34;young\u0026#34;; return `${str[0]}${ageStr} at ${age} years`; } const bio2 = horseAge`This horse is ${horse.age}`; console.log(bio2); Watch the video on YouTube ","permalink":"https://shenlong616.github.io/posts/github/code-this-not-that-javascript-by-codediodeio/","summary":"Async/await const random = () =\u0026gt; { return Promise.resolve(Math.random()); }; (\u0026#34;Bad Promise Code üí©\u0026#34;); const sumRandomAsyncNums = () =\u0026gt; { let first; let second; let third; return random() .then((v) =\u0026gt; { first = v; return random(); }) .then((v) =\u0026gt; { second = v; return random(); }) .then((v) =\u0026gt; { third = v; return first + second + third; }) .then((v) =\u0026gt; { console.log(`Result ${v}`); }); }; (\u0026#34;Good Promise Code ‚úÖ\u0026#34;); const sumRandomAsyncNums = async () =\u0026gt; { const first = await random(); const second = await random(); const third = await random(); console.","title":"Code this, not that - JavaScript by codediodeio"},{"content":"In JS we trust - The best way to learn is by building/coding and teaching. I create the challenges to help my friends learn JavaScript and in return it helps me embrace the language in much deeper level. Feel free to clone, fork and pull.\n1. What\u0026rsquo;s the output? function a(x) { x++; return function () { console.log(++x); }; } a(1)(); a(1)(); a(1)(); let x = a(1); x(); x(); x(); A: 1, 2, 3 and 1, 2, 3 B: 3, 3, 3 and 3, 4, 5 C: 3, 3, 3 and 1, 2, 3 D: 1, 2, 3 and 3, 3, 3 Answer\rAnswer: B This question revisits closure - one of the most confusing concepts in JavaScript. Closure allows us to create a stateful function and such a function can access to the variable outside of its scope. In a nutshell, a closure can have access to the global variable (scope), father function scope and its own scope.\nWe have here, the only one correct answer, 3, 3, 3 and 3, 4, 5 because first we simply call the function a(). It works like a normal function and we have not seen anything so-called stateful yet. In the following code, we declare a variable x and it stores the value of function a(1), that is why we get 3. 4. 5 rather than 3, 3, 3.\nThis kind of gotcha gives me the feeling of static variable in PHP world.\n2. What\u0026rsquo;s the output? function Name(a, b) { this.a = a; this.b = b; } const me = Name(\u0026#34;Vuong\u0026#34;, \u0026#34;Nguyen\u0026#34;); console.log(!(a.length - window.a.length)); A: undefined B: NaN C: true D: false Answer\rAnswer: C We get true in the console. The tricky part is when we create an object from the constructor function Name but we DO NOT USE new keywork. That makes the variable a global one and get the value \u0026ldquo;Vuong\u0026rdquo;. Remember that it is actually a property of the global object window (in the browser) or global in the nodejs.\nWe then get a.length ~ 5 and window.a.length ~ 5 which return 0. !0 returns true.\nImagine what would happen when we create the instance me with the new keywork. That is an interesting inquire!\n3. What\u0026rsquo;s the output? const x = function (...x) { let k = (typeof x).length; let y = () =\u0026gt; \u0026#34;freetut\u0026#34;.length; let z = { y: y }; return k - z.y(); }; console.log(Boolean(x())); A: true B: 1 C: -1 D: false Answer\rAnswer: A The spread operator ...x might help us obtain the parameter in the function in the form of array. Yet, in Javascript the typeof array return \u0026ldquo;object\u0026rdquo; rather than \u0026ldquo;array\u0026rdquo;. It is totally odd if you are coming from PHP.\nThat is said, we now have the length of the string object which returns 6. z.y() simply returns the length of the string \u0026lsquo;freetut\u0026rsquo; (7).\nBe aware that the function x() (in the form of function express or anonymous function (if you are coming from PHP) return -1 when being called and when converted to bool with Boolean(-1) return true instead of false. Noted that Boolean(0) return false.\n4. What\u0026rsquo;s the output? (function js(x) { const y = (j) =\u0026gt; j * x; console.log(y(s())); function s() { return j(); } function j() { return x ** x; } })(3); A: undefined B: 18 C: 81 D: 12 Answer\rAnswer: C The function js() can be automatically executed without calling it and known as IIFE (Immediately Invoked Function Expression). Noted the parameter x of the function js is actuallly passed with the value 3.\nThe value return of the function is y(s())), meaning calling three other functions y(), s() and j() because the function s() returns j().\nj() returns 3^3 = 27 so that s() returns 27.\ny(s()) means y(27) which returns 27*3 = 81.\nNote that we can call declare function BEFORE the function is actually declared but not with expression function.\n5. What\u0026rsquo;s the output? var tip = 100; (function () { console.log(\u0026#34;I have $\u0026#34; + husband()); function wife() { return tip * 2; } function husband() { return wife() / 2; } var tip = 10; })(); A: \u0026ldquo;I have $10\u0026rdquo;; B: \u0026ldquo;I have $100\u0026rdquo;; C: \u0026ldquo;I have $50\u0026rdquo;; D: \u0026ldquo;I have $NaN\u0026rdquo;; Answer\rAnswer: D We have here an IIFE (Immediately Invoked Function Expression). It means we do not have to call it but it will be excuted automatically when declared. The flow is as: husband() returns wife()/2 and wife() returns tip*2.\nWe might think that tip = 100 because it is a global variable when declaring with var keyword. However, it is actually undefined because we also have var tip = 10 INSIDE the function. As the variable tip is hoisted with default value undefined, the final result would be D. We know that undefined returns NaN when we try to divide to 2 or multiple with 2.\nIf we do not re-declare var tip = 10; at the end of the function, we will definately get B.\nJS is fun, right?\n6. What\u0026rsquo;s the output? const js = { language: \u0026#34;loosely type\u0026#34;, label: \u0026#34;difficult\u0026#34; }; const edu = { ...js, level: \u0026#34;PhD\u0026#34; }; const newbie = edu; delete edu.language; console.log(Object.keys(newbie).length); A: 2; B: 3; C: 4; D: 5; Answer\rAnswer: A This challenge revises the ES6\u0026rsquo;s feature regarding spread operator ... Spread operator is quite useful for retrieving parameter in function, to unite or combine object and array in JavaScript. PHP also has this feature.\nIn the variable edu, we use ...js (spread operator here) to combine both objects into one. It works in the same way with array.\nThen we declare another variable named newbie. IMPORTANT note: By declaring the variable like that, both variables point to the SAME POSITION in the memory. We may have known something like $a = \u0026amp;$b in PHP, which let both varibles work in the same way. We might have known about pass by reference in the case.\nThen we have 2 as edu.language is deleted. Both objects now have only two elements.\nNow is time to think about coping an object in JS either shallow or deep one.\n7. What\u0026rsquo;s the output? var candidate = { name: \u0026#34;Vuong\u0026#34;, age: 30, }; var job = { frontend: \u0026#34;Vuejs or Reactjs\u0026#34;, backend: \u0026#34;PHP and Laravel\u0026#34;, city: \u0026#34;Auckland\u0026#34;, }; class Combine { static get() { return Object.assign(candidate, job); } static count() { return Object.keys(this.get()).length; } } console.log(Combine.count()); A: 5; B: 6; C: 7; D: 8; Answer\rAnswer: A The buit-in method Object.assign(candidate, job) merges the two objects candidate and job into one object. Then the method Object.keys counts the number of key in the object.\nNote that two methods get() and count() are defined as static, so they need to be called statically using Class.staticmethod() syntax. Then the final object get 5 elements.\n8. What\u0026rsquo;s the output? var x = 1; (() =\u0026gt; { x += 1; ++x; })(); ((y) =\u0026gt; { x += y; x = x % y; })(2); (() =\u0026gt; (x += x))(); (() =\u0026gt; (x *= x))(); console.log(x); A: 4; B: 50; C: 2; D: 10; Answer\rAnswer: A Initially x is declared with the value 1. In the first IIFE function, there are two operations. First x becomes 2 and then 3.\nIn the second IIFE function, x = x + y then the current value is 5. In the second operation, it returns only 1 as it undergoes 5%2.\nIn the third and fouth IIFE functions, we get 2 x = x + x and then 4 x = x * x. It is more than simple.\n9. What\u0026rsquo;s the output? $var = 10; $f = function($let) use ($var) { return ++$let + $var; }; $var = 15; echo $f(10); var x = 10; const f = (l) =\u0026gt; ++l + x; x = 15; console.log(f(10)); A: 26 and 26; B: 21 and 21; C: 21 and 26; D: 26 and 21; Answer\rAnswer: C This question illustrates the diffences between PHP and JavaScript when handling closure. In the first snippet, we declare a closure with the keyword use. Closure in PHP is simply an anonymous function and the data is passed to the function using the keyword use. Otherwise, it is called as lambda when we do not use the keyword use. You can check the result of the snippet here https://3v4l.org/PSeMY. PHP closure only accepts the value of the variable BEFORE the closure is defined, no matter where it is called. As such, $var is 10 rather than 15.\nOn the contrary, JavaScript treats the variable a bit different when it is passed to anonymous function. We do not have to use the keyword use here to pass variable to the closure. The variable x in the second snippet is updated before the closure is called, then we get 26.\nNote that in PHP 7.4, we have arrow function and we then do not have to use the keyword use to pass the variable to function. Another way to call a global ariable inside a function in PHP is to use the keyword global or employ the built-in GLOBAL variable $GLOBALS.\n10. What\u0026rsquo;s the output? let x = {}; let y = {}; let z = x; console.log(x == y); console.log(x === y); console.log(x == z); console.log(x === z); A: true true true true; B: false false false false; C: true true false false; D: false false true true; Answer\rAnswer: D Technically, x and y have the same value. Both are empty objects. However, we do not use the value to compare objects.\nz is x are two objects referring to the same memory position. In JavaScript, array and object are passed by reference. x and z therefore return true when being compared.\n11. What\u0026rsquo;s the output? console.log(\u0026#34;hello\u0026#34;); setTimeout(() =\u0026gt; console.log(\u0026#34;world\u0026#34;), 0); console.log(\u0026#34;hi\u0026#34;); A: \u0026ldquo;hello\u0026rdquo; -\u0026gt; \u0026ldquo;world\u0026rdquo; -\u0026gt; \u0026ldquo;hi\u0026rdquo; B: \u0026ldquo;hello\u0026rdquo; -\u0026gt; \u0026ldquo;hi\u0026rdquo; -\u0026gt; \u0026ldquo;world\u0026rdquo; C: \u0026ldquo;hi\u0026rdquo; -\u0026gt; \u0026ldquo;world\u0026rdquo; -\u0026gt; \u0026ldquo;hello\u0026rdquo; D: \u0026ldquo;hi\u0026rdquo; -\u0026gt; \u0026ldquo;hello\u0026rdquo; -\u0026gt; \u0026ldquo;world\u0026rdquo; Answer\rAnswer: B Given that the function setTimeout() will be kept in the task queue before jumping back to stack, \u0026ldquo;hello\u0026rdquo; and \u0026ldquo;hi\u0026rdquo; will be printed first, then A is incorrect. That is also the case of the answers C and D.\nNo matter how many seconds you set to the setTimeout() function, it will run after synchronous code. So we will get \u0026ldquo;hello\u0026rdquo; first as it is put into the call stack first. Though the setTimeout() is then being put into the call stack, it will subsequently offload to web API (or Node API) and then being called when other synchronous codes are cleared. It means we then get \u0026ldquo;hi\u0026rdquo; and finally \u0026ldquo;world\u0026rdquo;.\nSo B is the correct answer.\nCredit: @kaitoubg (voz) for your suggestion regarding the timeout throttled by which I have decided to alter the question slightly. It will ensure that readers will not get confused as the previous code might bring out different results when tested on other browsers or environments. The main point of the question is about the discrepancy between the synchronous code and asynchronous code when using setTimeout..\n12. What\u0026rsquo;s the output? String.prototype.lengthy = () =\u0026gt; { console.log(\u0026#34;hello\u0026#34;); }; let x = { name: \u0026#34;Vuong\u0026#34; }; delete x; x.name.lengthy(); A: \u0026ldquo;Vuong\u0026rdquo;; B: \u0026ldquo;hello\u0026rdquo;; C: \u0026ldquo;undefined\u0026rdquo; D: \u0026ldquo;ReferenceError\u0026rdquo; Answer\rAnswer: B String.prototype.someThing = function () {} is the common way to define a new built-in method for String. We can do the same thing with Array, Object or FunctionName where FunctionName is the function designed by ourself.\nThat is not challenging to realise that \u0026quot;string\u0026quot;.lengthy() always returns hello. Yet, the tricky part lies in the delete object where we might think that this expression will entirely delete the object. That is not the case as delete is used to delete the property of the object only. It does not delete the object. Then we get hello rather than ReferenceError.\nNote that if we declare object without let, const or var, we then have a global object. delete objectName then return true. Otherwise, it always returns false.\n13. What\u0026rsquo;s the output? let x = {}; x.__proto__.hi = 10; Object.prototype.hi = ++x.hi; console.log(x.hi + Object.keys(x).length); A: 10 B: 11 C: 12 D: NaN Answer\rAnswer: C First we have an empty object x, then we add another property hi for x with x.__proto__.hi. Note this is equivalent to Object.prototype.hi = 10 and we are adding to the father object Object the property hi. It means every single object will inherit this propety. The property hi becomes a shared one. Say now we declare a new object such as let y = {}, y now has a propery hi inherited from the father Object. Put it simply x.__proto__ === Object.prototype returns true.\nThen we overwrite the property hi with a new value 11. Last we have 11 + 1 = 12. x has one property and x.hi returns 11.\nUpdated (July 27th 2021). If you write Object.prototype.hi = 11; instead of Object.prototype.hi = ++x.hi; as written in the code above, then Object.keys(x) will return an empty array as Object.keys(object) only returns the property of the object itself, not the inherited ones. It means the final result will be 11 rather than 12. For some reason, the code ``Object.prototype.hi = ++x.hi;will create a property for the objectxitself and thenObject.keys(x)gives us the array[\u0026ldquo;hi\u0026rdquo;]`.\nYet, if you run console.log(x.hasOwnProperty(\u0026quot;hi\u0026quot;)) it still returns false. By the way, when you deliberately add a property for x such as x.test = \u0026quot;testing\u0026quot;, then console.log(x.hasOwnProperty(\u0026quot;test\u0026quot;)) returns true.\n14. What\u0026rsquo;s the output? const array = (a) =\u0026gt; { let length = a.length; delete a[length - 1]; return a.length; }; console.log(array([1, 2, 3, 4])); const object = (obj) =\u0026gt; { let key = Object.keys(obj); let length = key.length; delete obj[key[length - 1]]; return Object.keys(obj).length; }; console.log(object({ 1: 2, 2: 3, 3: 4, 4: 5 })); const setPropNull = (obj) =\u0026gt; { let key = Object.keys(obj); let length = key.length; obj[key[length - 1]] = null; return Object.keys(obj).length; }; console.log(setPropNull({ 1: 2, 2: 3, 3: 4, 4: 5 })); A: 333 B: 444 C: 434 D: 343 Answer\rAnswer: C This question examines how the delete operator works in JavaScript. In short, it does nothing when we write delete someObject or delete someArray. It nonetheless completely deletes and removes a property of an object when writing something like delete someObject.someProperty. In the case of array, when we write delete someArray[keyNumber], it only removes the value of the index, keep the index intact and the new value is now set to undefined. For that reason, in the code first snippet, we get (the length) 4 elements as in the original array but only 3 properties left in the object passed when the function object() is called, as in the second snippet.\nThe third snippet gives us 4 as declaring an object\u0026rsquo;s propery to either null or undefined does not completely remove the property. The key is intact. So the length of the object is immutable.\nFor those who are familiar with PHP, we have unset($someArray[index]) that remove the array element, both key and value. When print_r the array, we might not see the key and value that have been unset. However, when we push (using array_push($someArray, $someValue)) a new element in that array, we might see that the previous key is still kept, but no value and not being displayed. That is something you should be aware of. Have a look at https://3v4l.org/7C3Nf\n15. What\u0026rsquo;s the output? var a = [1, 2, 3]; var b = [1, 2, 3]; var c = [1, 2, 3]; var d = c; var e = [1, 2, 3]; var f = e.slice(); console.log(a === b); console.log(c === d); console.log(e === f); A: true true true B: false false true C: true true false D: false true false Answer\rAnswer: D a and b returns false because they point to different memory location even though the values are the same. If you are coming from PHP world, then it will return true obviously when we compare either value or value + type. Check it out: https://3v4l.org/IjaOs.\nIn JavaScript, value is passed by reference in case of array and object. Hence in the second case, d is the copy of c but they both point to the same memory position. Everything changes in c will result in the change in d. In PHP, we might have $a = \u0026amp;$b;, working in the similar way.\nThe third one gives us a hint to copy an array in JavaScript using slice() method. Now we have f, which is the copy of e but they point to different memory locations, thus they have different \u0026ldquo;life\u0026rdquo;. We get false accordingly when they are being compared.\n16. What\u0026rsquo;s the output? var languages = { name: [\u0026#34;elixir\u0026#34;, \u0026#34;golang\u0026#34;, \u0026#34;js\u0026#34;, \u0026#34;php\u0026#34;, { name: \u0026#34;feature\u0026#34; }], feature: \u0026#34;awesome\u0026#34;, }; let flag = languages.hasOwnProperty(Object.values(languages)[0][4].name); (() =\u0026gt; { if (flag !== false) { console.log( Object.getOwnPropertyNames(languages)[0].length \u0026lt;\u0026lt; Object.keys(languages)[0].length ); } else { console.log( Object.getOwnPropertyNames(languages)[1].length \u0026lt;\u0026lt; Object.keys(languages)[1].length ); } })(); A: 8 B: NaN C: 64 D: 12 Answer\rAnswer: 64 The code snippet is quite tricky as it has a couple of different built-in methods handling object in JavaScript. For example, both Object.keys and Object.getOwnPropertyNames are used even thought they are quite similar except that the latter can return non-enumerable properties. You might want to have a look at this thoroughly written reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\nObject.values and Object.keys return the property value and property name of the object, respectively. That is nothing new. object.hasOwnProperty('propertyName') returns a boolean confirming whether a property exists or not.\nWe have flag true because Object.values(languages)[0][4].name returns feature, which is also the name of the property.\nThen we have 4 \u0026laquo; 4 in the if-else flow that returns the bitwise value, equivalent to 4*2^4 ~ 4*16 ~ 64.\n17. What\u0026rsquo;s the output? var player = { name: \u0026#34;Ronaldo\u0026#34;, age: 34, getAge: function () { return ++this.age - this.name.length; }, }; function score(greeting, year) { console.log( greeting + \u0026#34; \u0026#34; + this.name + `! You were born in ${year - this.getAge()}` ); } window.window.window.score.call(window.window.window.player, \u0026#34;Kiora\u0026#34;, 2019); score.apply(player, [\u0026#34;Kiora\u0026#34;, 2009]); const helloRonaldo = window.score.bind(window.player, \u0026#34;Kiora\u0026#34;, 2029); helloRonaldo(); A: \u0026ldquo;Kiora Ronaldo! You were born in 1985\u0026rdquo;, \u0026ldquo;Kiora Ronaldo! You were born in 1985\u0026rdquo;, \u0026ldquo;Kiora Ronaldo! You were born in 1985\u0026rdquo; B: \u0026ldquo;Kiora Ronaldo! You were born in 1991\u0026rdquo;, \u0026ldquo;Kiora Ronaldo! You were born in 1991\u0026rdquo;, \u0026ldquo;Kiora Ronaldo! You were born in 1999\u0026rdquo; C: \u0026ldquo;Kiora Ronaldo! You were born in 1991\u0026rdquo;, NaN, \u0026ldquo;Kiora Ronaldo! You were born in 1980\u0026rdquo; D: \u0026ldquo;Kiora Ronaldo! You were born in 1991\u0026rdquo;, \u0026ldquo;Kiora Ronaldo! You were born in 1980\u0026rdquo;, \u0026ldquo;Kiora Ronaldo! You were born in 1999\u0026rdquo; Answer\rAnswer: D We can use call(), apply() and bind() to apply a function to any object. At first sight, it seems that three functions do the same thing. Yet there are some situations where they are differently employed to handle respective contexts or solve particular problems.\nOf the three, only bind() can be executed after binding. We can create a variable to store the result as helloRonaldo() in the code snippet above. apply() and call() will bind and execute the function at the same time. apply() hints us a ~ array where we need to pass an array as parameter. call() hints us c or comma where we pass parameters with a comma. You might want to have a look at this post https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind\nNote that window.window.window.score or window.score or simply score do the same thing. It points to the score() function in the global scope.\nThe correct anwser is D. The score() and getAge() functions are nothing special. The only tricky part is that this.age is incremented each time you call the funtion getAge();\n18. What\u0026rsquo;s the output? var ronaldo = { age: 34 }; var messi = { age: 32 }; function score(year, tr, t) { if (typeof tr === \u0026#34;function\u0026#34; \u0026amp;\u0026amp; typeof t === \u0026#34;function\u0026#34;) { console.log(`You score ${tr(year, t(this.age))} times`); } } const transform = (x, y) =\u0026gt; x - y; const title = (x) =\u0026gt; ++x + x++; const helloRonaldo = score.bind(ronaldo, 2029, transform, title); helloRonaldo(); const helloMessi = score.bind(messi, 2029, transform, title); helloMessi(); A: \u0026ldquo;You score 1989 times\u0026rdquo; and \u0026ldquo;You score 1963 times\u0026rdquo; B: \u0026ldquo;You score 1959 times\u0026rdquo; and \u0026ldquo;You score 1989 times\u0026rdquo; C: \u0026ldquo;You score 1989 times\u0026rdquo; and \u0026ldquo;You score 1953 times\u0026rdquo; D: \u0026ldquo;You score 1959 times\u0026rdquo; and \u0026ldquo;You score 1963 times\u0026rdquo; Answer\rAnswer: D bind() allows us to bind a function declared with any object. Here we bind score() and both ronaldo and messi.\nIn score() we pass three parameters year, tr and t in which both tr and t are function. They handle simple things as defined afterwards.\nWhen we bind score() with ronaldo and messi, we pass three parameters as declared in the score() function wherein transform and title are functions.\n19. What\u0026rsquo;s the output? var person = {}; Object.defineProperties(person, { name: { value: \u0026#34;Vuong\u0026#34;, enumerable: true, }, job: { value: \u0026#34;developer\u0026#34;, enumerable: true, }, studying: { value: \u0026#34;PhD\u0026#34;, enumerable: true, }, money: { value: \u0026#34;NZD\u0026#34;, enumerable: false, }, }); class Evaluate { static checkFlag(obj) { return Object.getOwnPropertyNames(obj) \u0026gt; Object.keys(obj) ? Object.getOwnPropertyNames(obj) : Object.keys(obj); } } const flag = Evaluate.checkFlag(person); console.log(flag.length); A: 1 B: 2 C: 3 D: 4 Answer\rAnswer: D Object.keys(obj) is almost identical to Object.getOwnPropertyNames(obj) except the fact that the latter returns any type of object\u0026rsquo;s property regardless of enumerable. By default enumerable is true when creating object. Using Object.defineProperties or Object.defineProperty we can manually set this option to false.\nAs such the object person will get 3 usingObject.keys(obj)but 4 with Object.getOwnPropertyNames(obj). In short Object.keys(obj) only returns the property setting the enumerable as true.\n20. What\u0026rsquo;s the output? const id = 10; const getID = (...id) =\u0026gt; { id(id); function id(id) { console.log(typeof id); } }; getID(id); A: ReferenceError B: 10 C: undefined D: \u0026lsquo;function\u0026rsquo; Answer\rAnswer: D When declaring a function inside another function, we are working with Closure in JavaScript. Note that if a function is declared as normal (rather than function expression), it is hoisted. We might see several id in the code snippet above but in fact, some of them does nothing.\nThe result of the code depending on the operator typeof id, which is function. So id in this operation is the id() function.\n21. What\u0026rsquo;s the output? var book1 = { name: \u0026#34;Name of the rose\u0026#34;, getName: function () { console.log(this.name); }, }; var book2 = { name: { value: \u0026#34;Harry Potter\u0026#34; }, }; var bookCollection = Object.create(book1, book2); bookCollection.getName(); A: \u0026lsquo;Harry Potter\u0026rsquo; B: \u0026lsquo;Name of the rose\u0026rsquo; C: ReferenceError D: Object object Answer\rAnswer: A Object.create allows us to create an object which is based on another object. If we do not pass the second parameter - book2 in this case - the name property of the object bookCollection will be Name of the rose inherited from the book1. It means we can provide additional properties when declaring object with Object.create.\nbookCollection has its own property name and another one inherited from book1. In this case its own property name will show up as it has higher priority. That is why we get \u0026lsquo;Harry Potter\u0026rsquo;.\n22. What\u0026rsquo;s the output? (() =\u0026gt; { const a = Object.create({}); const b = Object.create(null); let f1 = a.hasOwnProperty(\u0026#34;toString\u0026#34;); let f2 = \u0026#34;toString\u0026#34; in b; let result = f1 === false \u0026amp;\u0026amp; f2 === false ? console.log((typeof a.toString()).length) : console.log(b.toString()); })(); A: ReferenceError B: undefined C: 0 D: 6 Answer\rAnswer: D The two objects a and b are created using Object.create() operator. There is a bit of difference between them as a inherits from Object prototype but b is totally empty when we pass the null paramater. Yet hasOwnProperty('toString') always returns false neither a nor b given that toString() is not defined inside these objects. The method however is still available as it is inherited from Object prototype.\nBoth f1 and f2 return false. Note that we use object.hasOwnProperty('key') and ('key' in object) to check the availability of a key in an object. There is a bit difference between the two as the latter also returns the key inherited. You might want to have a look here: https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript\nThen typeof a.toString() returns string, which gives us 6 with the .length property.\nIf the syntax is odd to you, you might look for \u0026lsquo;self-invoking function\u0026rsquo; and \u0026lsquo;arrow function\u0026rsquo; in JavaScript.\n23. What\u0026rsquo;s the output? let promise = new Promise((rs, rj) =\u0026gt; { setTimeout(() =\u0026gt; rs(4), 0); Promise.resolve(console.log(3)); console.log(2); }); promise .then((rs) =\u0026gt; { console.log(rs ? rs ** rs : rs); return rs; }) .then((rs) =\u0026gt; console.log(rs == 256 ? rs : rs * rs)); A: 3, 2, 256, 256 B: 3, 2, 256, 16 C: 256, 16, 3, 2 D: 16, 256, 3, 2 Answer\rAnswer: B We first declare a promise-based code with let and then call it. Given that setTimeout() is an asynchronous action, it will run last even the time is set to 0 in setTimeout(() =\u0026gt; rs(4), 0);. Although Promise.resolve(console.log(3)) also returns a promise but it is a Microtasks, then it has a higher priority than Tasks as set by setTimeout(). You might want to have a look at this post https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/.\nIn .then() we chain the result so that we have 4^4 in the first then() and 4*4 in the second then(). Note that return rs returns the original value.\n24. What\u0026rsquo;s the output? async function f() { let promise = new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; resolve(\u0026#34;done!\u0026#34;), 0); }); setTimeout(() =\u0026gt; console.log(\u0026#34;world\u0026#34;), 0); console.log(await promise); console.log(\u0026#34;hello\u0026#34;); } f(setTimeout(() =\u0026gt; console.log(\u0026#34;kiora\u0026#34;), 0)); A: ReferenceError B: done, hello, world C: hello, done, world D: kiora, done, hello, world Answer\rAnswer: D Though we do not declare any paramater for the function f(), we pass setTimeout(()=\u0026gt;console.log(\u0026quot;kiora\u0026quot;),0) when call it. We therefore get \u0026lsquo;kiora\u0026rsquo; first.\nGiven that the variable promise returns a solved promise and it is called with the keyword await, JavaScript will \u0026lsquo;pause\u0026rsquo; at this line console.log(await promise); till the result is resolved. That is why we get \u0026ldquo;done\u0026rdquo; at the next result.\nWhy we do not get \u0026ldquo;world\u0026rdquo; or \u0026ldquo;hello\u0026rdquo; at the second ? As JavaScript \u0026ldquo;pauses\u0026rdquo; at the line with await keyword, we cannot get \u0026ldquo;hello\u0026rdquo; as usual (note that whenever we call setTimeout(), this function will run last because it is an asynchronous task operator), whereas setTimeout(()=\u0026gt; console.log(\u0026quot;world\u0026quot;), 0); should always run last.\nHere we might see a bit of difference when employing await keyword before asynchronous operator (in this case, we use setTimeout() as an example) or when call the function/operator without it.\n25. What\u0026rsquo;s the output? function name() { return new Promise((resolve) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;New Zealand\u0026#34;); }, 10); }); } function fruit() { return new Promise((resolve) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;Kiwi\u0026#34;); }, 20); }); } (async function countryandfruit() { const getName = await name(); const getFruit = await fruit(); console.log(`Kiora: ${getName} ${getFruit}`); })(); (async function fruitandcountry() { const [getName, getFruit] = await Promise.all([name(), fruit()]); console.log(`Hello: ${getName} ${getFruit}`); })(); A: Null B: Kiora C: \u0026ldquo;Hello: New Zealand Kiwi\u0026rdquo; -\u0026gt; \u0026ldquo;Kiora: New Zealand Kiwi\u0026rdquo; D: \u0026ldquo;Kiora: New Zealand Kiwi\u0026rdquo; -\u0026gt; \u0026ldquo;Hello: New Zealand Kiwi\u0026rdquo; Answer\rAnswer: C Both countryandfruit and fruitandcountry are self invoking functions. Both are declared with the keyword async, it means the code inside will run step by step. It helps us control the flow of data much more concise as compared to Promise-based operator or callback way.\nThe first function returns \u0026quot;Kiora: New Zealand Kiwi\u0026quot; and the second one ouputs \u0026quot;Hello: New Zealand Kiwi\u0026quot;. We might think that the order will be the same but actually the order of the result is reversed because the function with await keyword will run step by step rather than in in parallel as Promise.all. It means fruitandcountry will run faster than countryandfruit.\nYou might want to have a look at the difference between the two at https://alligator.io/js/async-functions/\n26. What\u0026rsquo;s the output? class MySort { constructor(object) { this.object = object; } getSort() { return Object.entries(this.object)[0][1].sort()[ Object.values(this.object).length ]; } } const object = { month: [\u0026#34;July\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;January\u0026#34;, \u0026#34;December\u0026#34;], }; const sortMe = new MySort(object); console.log(sortMe.getSort()); A: July B: September C: January D: December Answer\rAnswer: C Object.entries returns an array consisting of both key and value from an object while Object.values retuns an array of the values of object and Object.keys gives us an array of keys of the object. As such, Object.entries(object) in the code snippet above gives us a nested array with just one element in which the values are put in another nested array like that [[\u0026quot;month\u0026quot;, [\u0026quot;July\u0026quot;, \u0026quot;September\u0026quot;, \u0026quot;January\u0026quot;, \u0026quot;December\u0026quot;]]].\nFor that reason, Object.entries(this.object)[0][1].sort() will actually sort the value array and return a new order as \u0026ldquo;December\u0026rdquo; -\u0026gt; \u0026ldquo;January\u0026rdquo; -\u0026gt; \u0026ldquo;July\u0026rdquo; -\u0026gt; \u0026ldquo;September\u0026rdquo;. Hence, when we get the element with the index given by [Object.values(this.object).length] we get January because [Object.values(this.object).length] give us 1 (the length of the array given by Object.values);\n27. What\u0026rsquo;s the output? const flag = [] !== !!!!![]; let f = () =\u0026gt; {}; console.log((typeof f()).length + flag.toString().length); A: NaN B: 12 C: 13 D: 14 Answer\rAnswer: C Comparing two arrays or two objects in JavaScript always return false because both are passed by reference, unlike primitive types such as string, number or boolean. That is why comparing [] and [] using either == or === returns false. The weird part is the !==!!!!! which is equivalent to !==, nothing special. So the flag is true.\nIn the expression function f(), we use arrow function here but and {} is a part of the function rather than an object. In case you want to return an object, you have to write as let f = () =\u0026gt; ({}) or simply using normal way to define function. With the keyword return, we can easily catch the content of the function when using normal way to define function.\nThus, the typeof f() returns undefined rathern object. We then get the length 9 and the flag (true) becomes \u0026rsquo;true\u0026rsquo; (a string, by using toString() function), which returns 3 with the property length. We finally get 13.\n28. What\u0026rsquo;s the output? (function (a, b, c) { arguments[2] = (typeof arguments).length; c \u0026gt; 10 ? console.log(c) : console.log(++c); })(1, 2, 3); A: 4 B: 5 C: 6 D: 7 Answer\rAnswer: D We have a self-invoking function with three parameters declared. Note that arguments inside a function returns an object consisting of the parameters of the function.\nThe key part here is that when we assign a value to that array (it is array-like, as mentioned above) (or any element), the function will use that value rather than the value from the parameter we pass to it when calling the function. Hence, c will be (typeof arguments).length; (6) rather than 3.\nAs c has a new value of 6, it is definitely less than 10, so we get the final result console.log(++c), which returns 7.\nNote that arguments is not available on arrow functions. See more detailed here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\nFrom ES6 onwards, it is recommended to use \u0026hellip;restParameter given that it is a true array. It means you can manipulate the parameter with native JavaScript functions such as map, reduce or filter.\nFor PHP developer, we have func_get_args() in PHP that does the same thing, but it will not override the value passed. Check it by yourself at https://3v4l.org/dMfhW\n29. What\u0026rsquo;s the output? class Calculator { constructor(a, b) { this.a = a; this.b = b; } static getFlag() { return new Array(this.a).length == new Array(this.b).toString().length; } getValue() { return Calculator.getFlag() ? typeof this.a : typeof new Number(this.b); } } const me = new Calculator(5, 5); console.log(me.getValue()); A: NaN B: \u0026ldquo;string\u0026rdquo; C: \u0026ldquo;object\u0026rdquo; D: \u0026ldquo;number\u0026rdquo; Answer\rAnswer: C We have a class named Calculator. When declaring a new instance of the object, we pass two parameters a and b. These two parameters have the same value but new Array(this.a).length is totally different from new Array(this.b).toString().length because the latter returns a string \u0026quot;,,,,\u0026quot; meaning the length 4 while the former returns the length of an array and we therefore get 5.\nFor that reason getFlag() returns false. In getValue() we get typeof new Number(this.b); which returns object. That is a bit different from typeof b, which returns number.\n30. What\u0026rsquo;s the output? var name = \u0026#34;Auckland\u0026#34;; const nz = { name: \u0026#34;Kiwi\u0026#34;, callMe: function () { return this.name; }, }; let me = nz.callMe; let she = nz.callMe.bind(nz); let result = me() === nz.callMe() ? she() : `${me()} ${she()}`; console.log(result); A: undefined B: \u0026ldquo;Auckland\u0026rdquo; C: \u0026ldquo;Kiwi\u0026rdquo; D: \u0026ldquo;Auckland Kiwi\u0026rdquo; Answer\rAnswer: D The key point in this question involves the keyword this in JavaScript. We have a simple object that contains one method and one string property name.\nFirst, it is important to write down is that let me = nz.callMe; and then call me() is totally different from directly calling nz.callMe(). If we assign a variable to a method delared inside an object, this in that method will behave differently (when we call the variable as a method and when dirrectly call that method). In particular, in the first case, this is the window object while in the second one, this inside the function still points to property name in the object nz. It means me() returns \u0026ldquo;Auckland\u0026rdquo; while nz.callMe returns \u0026ldquo;Kiwi\u0026rdquo;.\nThen result will return false and we get the final output value ${me()} ${she()}. Why she() is different from me()? You might easily guess that she still bind to the object nz rather than window object as in me().\n31. What\u0026rsquo;s the output? const club = { name: \u0026#34;Juventus\u0026#34;, player: [\u0026#34;Ronaldo\u0026#34;], showMePlayer: function () { this.player.map(function (thename) { console.log(this.name.length); }, this); }, showMe: function () { this.player.forEach( function (thename) { console.log(this.name.length); }.bind(this) ); }, show: function () { const self = this; this.player.map(function (thename) { console.log(self.name.length); }); }, Me: function () { this.player.map(function (thename) { console.log(this.name.length); }); }, }; club.showMePlayer(); club.showMe(); club.show(); club.Me(); A: 8 - 8 - 8 - 8 B: \u0026ldquo;Juventus\u0026rdquo; - \u0026ldquo;Juventus\u0026rdquo; - \u0026ldquo;Juventus\u0026rdquo; - \u0026ldquo;Juventus\u0026rdquo; C: \u0026ldquo;Ronaldo\u0026rdquo; - \u0026ldquo;Ronaldo\u0026rdquo; - \u0026ldquo;Ronaldo\u0026rdquo; - \u0026ldquo;Ronaldo\u0026rdquo; D: 8 - 8 - 8 - 0 Answer\rAnswer: D The code snippet above is not a big challenge for you I guess. It simply gives you an example of this in different contexts when we declare an anonymous function inside a method of an object. The three first methods are common ways to handle this using this as second parameter in map(), by using bind(this) in forEach (or map()) or by that = thistechnique (you might see people use self = this rather than that= this).\nThe last method Me() will cause unexpected result because this.name does not bind to the object club. Note that you might get another result when testing the code on jsbin.com. On Chrome and Firefox, we get 0.\nFor further information, kindly have a look at http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method\n32. What\u0026rsquo;s the output? ((...a) =\u0026gt; { const b = [\u0026#34;javascript\u0026#34;, \u0026#34;new zealand\u0026#34;]; const c = [...a, typeof a, ...b, \u0026#34;kiwi\u0026#34;]; console.log(c.length + c[0].length); })(new Array(10)); A: 5 B: 10 C: 15 D: 20 Answer\rAnswer: C ... can be used in two ways in JavaScript (and PHP) as either spread operator or rest parameter. You might have to check the following article about the two. They are the same as three dots, but the way they are employed vary considerably between the two. https://javascript.info/rest-parameters-spread-operator\nWe see both spread operator and rest parameter in the code snippet above. First the parameter (...a) in the self-invoking function is of course a rest parameter while the constant c we see the spread operator. In the former case, it simply means that you can pass to the function as many parameter as you want. Note that the typeof a in this case is object even though it is a native array in JavaScript. (I means native array because you might think about array-like if we use arguments. Please have a look at the question 28 or this link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments).\nSpread operator as in the constant c allows us to combine array. So ...a in the code above is rest parameter when it is used as function parameter but in this case it is the syntax of spread operator.\nFinally, we get c with 5 elements (...a is a nested array, so the length is 1) but the first element has 10 child elements (when we pass to the function new Array(10)). The length of both then returns 15.\n33. What\u0026rsquo;s the output? function Kiora(name, ...career) { this.name = name; return Array.isArray(career) === true \u0026amp;\u0026amp; typeof career === \u0026#34;object\u0026#34; ? {} : \u0026#34;\u0026#34;; } var student = new Kiora(\u0026#34;Vuong\u0026#34;); console.log(student.name); A: \u0026ldquo;Vuong\u0026rdquo; B: undefined C: ErrorReference D: false Answer\rAnswer: B We have a function constructor Kiora (written with a capital letter, but that is optional) that can be used to create object, as the student object in the code above. In the function, we have two parameters with the second one is actually a rest parameter. The typeof operator is object but if we check with Array.isArray(array) it also returns true.\nFor that reason, Array.isArray(career) === true \u0026amp;\u0026amp; typeof career === \u0026quot;object\u0026quot; returns true. Hence the return operator finally returns an object {}.\nYou might be surprised when console.log(student.name); outputs undefined given that the constructor function Kiora returns an object. Otherwise, we might simply get the value name.\n34. What\u0026rsquo;s the output? class Filter { constructor(element) { this.element = element; } filter() { return this.type() === \u0026#34;object\u0026#34; ? this.element[0].name : \u0026#34;hello\u0026#34;; } type() { return typeof this.element; } } let countries = [ { name: \u0026#34;New Zealand\u0026#34;, isdeveloped: true }, { name: \u0026#34;Vietnam\u0026#34;, isdeveloped: false }, ]; let x = new Filter(countries); const filter = countries.filter((item) =\u0026gt; { return !item.isdeveloped; }); console.log(x.filter().length + filter[0].name.length); A: 15 B: 16 C: 17 D: 18 Answer\rAnswer: D Apologize that the code snippet is a bit longer than usual. But actually it is not really challenging as you might think. You can easily get the correct result after spending a little of time to debug.\nFirst we declare a class that has two methods. The first method filter() will returns the first element of the array (of the propterty element) or simply returns hello depending on the type() method. We know that typeof of array will return object so the filter() method return this.element[0].name.\nTry to make you feel confused, we then call the built-in filter() method. This native method returns a new array depending on the condition we pass to the call-back function. Note that !item.isdeveloped means false. It means we get Vietnam.\nFinally we get New Zealand.length and Vietnam.length, which in total returns 18.\n35. What\u0026rsquo;s the output? async function abc() { console.log(8); await Promise.resolve(2).then(console.log); console.log(3); } setTimeout(() =\u0026gt; { console.log(1); }, 0); abc(); queueMicrotask(() =\u0026gt; { console.log(0); }); Promise.resolve(4).then(console.log); console.log(6); A: 6 - 8 - 3 - 0 - 4 - 2 - 1 B: 8 - 2 - 3 - 0 - 4 - 6 - 1 C: 6 - 8 - 2 - 0 - 4 - 3 - 1 D: 8 - 6 - 2 - 0 - 4 - 3 - 1 Answer\rAnswer: D D is correct anwser. The order of the asynchronous code\u0026rsquo;s output depends on the MicroTask or MacroTask. MicroTask has a higher priority. Note that the synchronous code always be executed before asynchronous code. So in essense, we have the order as follows:\n1) synchronous code\r2) microtask code (promise, queueMicrotask)\r3) macrotask code (setTimeout, setInterval)\rBe awared that in Nodejs environment, we also have process.nextTick(callback) which has the highest priority but we dont have it in this code.\nSo, first callback in the setTimeout() will be executed last given that this is a MacroTask. That is why we got 1 last.\nSecond, the function abc() is called next. Then we have 8 printed out in the console first. As the next line of code inside that function is an asynchrnous code with the keyword \u0026ldquo;await\u0026rdquo;, we then console.log(6) as Promise.resolve(4).then(console.log) is an asynchrnous code. That is why we got 6.\nNow is the time for Promise.resolve(2), so we get 2. At this point, you might have some sort of confusion. What will happend if we do not pass the keyword \u0026ldquo;await\u0026rdquo; before Promise.resolve(2) ?\nAs we have await, the code will be blocked here. Then what? We get 0 and 4 not 3. Promise and queueMicrotask are both microtask and they are already to run before console.log(3). The reason is that microtask queue need to be emptied before any other codes can be called in the callstack.\nIn the next step, we get 3 and the last one is 1.\nWhat would happend if we do not have the await keyword? Then the order of the output will be 8 - 3 - 6 - 2 - 0 - 4 -1.\n36. What\u0026rsquo;s the output? function myAccount(money) { let myMoney = money; return { status: function () { return `You have $ ${myMoney} in your account`; }, dePoSit: function (amount) { myMoney = myMoney + amount; }, withDraw: function (amount) { if (amount \u0026gt; myMoney) { return `You cannot withdraw money now`; } myMoney = myMoney - amount; }, }; } const vuong = myAccount(1000); vuong.withDraw(500); vuong.withDraw(200); vuong.dePoSit(100); vuong.withDraw(50); console.log(vuong.status()); A: \u0026ldquo;You have $ 950 in your account\u0026rdquo; B: \u0026ldquo;You have $ 1000 in your account\u0026rdquo; C: \u0026ldquo;You have $ 550 in your account\u0026rdquo; D: \u0026ldquo;You have $ 350 in your account\u0026rdquo; Answer\rAnswer: D As the \u0026ldquo;state\u0026rdquo; of the data is preserved each time we call dePoSit() or withDraw(), hence we get $350 after all.\nNoted that that is a kind of \u0026ldquo;factory\u0026rdquo; function with \u0026ldquo;preload\u0026rdquo; data. You might think about another object when pass to myAccount(somedata); some other data. That is a really helpful way to create multiple objects from a factory function.\n37. What\u0026rsquo;s the output? const hoccoban = { x: \u0026#34;youtube.com/hoccoban\u0026#34;.length, getMe() { const inner = function () { console.log(++this.x); }; inner.bind(this)(); }, }; hoccoban.getMe(); A: 20 B: 21 C: 22 D: 23 Answer\rAnswer: B We get 21. First \u0026ldquo;youtube.com/hoccoban\u0026rdquo; returns 20 as we are using the property length of the string. Then it is being added one more value in ++this.x. The question here seems trivial but it is actually not. There is a crucial note we should keep in mind is that console.log(++this.x) will not work as x is undefined when it is called outside of the object.\nWe can solve the problem with this in this case by using arrow function in the inner so that is can become something like const inner = () =\u0026gt; {} as the arrow function does not actually have this. It will automatically look around and call the available object when the function is executed.\nThe second solution is that we can somehow \u0026ldquo;bypass\u0026rdquo; the tricky this by using that/this solution. We just need to declare a new variable const that = this inside getMe() and before declaring inner function. That is a quite common practice.\nThe third solution is to take advantage of call(), bind() and apply() which are native methods of function (yes, function is also an object in JavaScript). In this case, we implement bind(this) to \u0026ldquo;bind\u0026rdquo; the function and the object so that this can actually point to the object when the function is executed. Note that bind() cannot be instantlly executed so that we need to add () after we bridge the function and the object. If we replace bind() with call(), then we do not need to pass () as in the above example. So inner.bind(this)(); will become inner.call(this);. They are technically equal. In practice, we tend to create a new variable to get the result from the binding of the function and the object.\n38. What\u0026rsquo;s the output? function* hocCoBan() { yield \u0026#34;js.edu.vn\u0026#34;; yield \u0026#34;youtube.com/hoccoban\u0026#34;; yield \u0026#34;Vuong Nguyen\u0026#34;; } let data = hocCoBan(); console.log((typeof data).length + data.next().value.length); A: NaN B: 10 C: Error D: 15 Answer\rAnswer: D First, take a closer look at the function. It has a asterisk (*) next to the keyword \u0026ldquo;function\u0026rdquo;. We do not have return keyword inside the function itself. What is going on here?\nIt you have already known about generator, then this code snippet is not a big deal at all. We do not use generator very often, but this native JavaScript feature is the basis for async/await function, which is supported in ES7 that allows us to handle the flow of asynchronous code much easily.\nThe operator typeof data will return object rather than function, which is the same case with typeof hocCoBan(). Of course, typeof hocCoBan still returns function. But it is actually a normal function. Basically, we get 6 in the operator (typeof data).length.\nThen data.next() calls the the built-in method next() which will output the value in the first yield, which is declared in the function. Then we get the length 9 with the string js.edu.vn.\nAfter all, we get 15. Not that understanding generator is quite important if you really want to understand async/await function.\n39. What\u0026rsquo;s the output? const a = [1, 2, \u0026#34;ch√≥\u0026#34;, 3, 1, \u0026#34;ch√≥\u0026#34;, \u0026#34;m√®o\u0026#34;, 3]; const b = [...new Set(a)]; b.length = \u0026#34;ch√≥\u0026#34;.length; console.log(b); A: 4 B: [1, 2, \u0026ldquo;ch√≥\u0026rdquo;, 3, \u0026ldquo;m√®o\u0026rdquo;] C: [1, 2, \u0026ldquo;ch√≥\u0026rdquo;, \u0026ldquo;m√®o\u0026rdquo;] D: [1, 2, \u0026ldquo;ch√≥\u0026rdquo;] Answer\rAnswer: D When using \u0026hellip; in array, it is called spread operator in JavaScript which, technically, is similar to rest parameter (using in the context of function). It provides a more elegant way to concat (combine) or copy array. In the code above, b is a copy of a. However, as we pass a in to a Set, it will return the unique value only in a. It means, now we have `[1, 2, \u0026ldquo;ch√≥\u0026rdquo;, 3, \u0026ldquo;m√®o\u0026rdquo;] in b.\nHowever, we then set the length for b as 3. Note that \u0026ldquo;ch√≥\u0026rdquo;.length returns 3 but in PHP, strlen(\u0026ldquo;ch√≥\u0026rdquo;) returns 4, just in case you are coming from PHP world.\nAs we set the length for the array b, we also cut down the array itselt. That is the reason why we get [1, 2, \u0026ldquo;ch√≥\u0026rdquo;] printing out in the console.\n40. What\u0026rsquo;s the output? const mot = function (m) { return arguments[0]; }; const hai = function (...m) { return arguments[arguments[0]]; }; const a = [mot(123), hai(1, 2, 3)]; console.log(typeof a !== \u0026#34;object\u0026#34; ? a[0] : a[1]); A: 1 B: 2 C: 3 D: 123 Answer\rAnswer: B First, it should be noted that arguments cannot be used in an arrow function, so in order to take advantage of this feature, we have to write the function in the casual form. arguments returns an array-like object that contains any parameter we pass into the function when executing it.\n... is a rest operator. We use this feature in function and array. Noted that in the context of array, it is called spread operator and it behaves differently. When declaring a function with \u0026hellip;, we can pass as many parameters into the function itselt when executing it as we want.\nNote that in the function hai, we return arguments[arguments[0]] which means hai(1, 2, 3) will return 2 rathern than 1 because arguments[0] return 1 and then arguments[1] returns 2.\nThe last thing we have to take note is that the typeof operator of an array will return object, here the trick seems more daunting. The final anwser is 2 as we got it in a[1], or hai(1, 2, 3).\n41. What\u0026rsquo;s the output? class Component { constructor(age) { this.age = age + `${typeof Coder}`.length; } getAge() { return ++this.age; } } class Coder extends Component { constructor(age) { super(age); this.age = age - `${typeof Coder}`.length; } } const a = new Coder(16); console.log(a.getAge()); A: 7 B: 8 C: 9 D: 10 Answer\rAnswer: C We have two simple classes in which Coder extends Component. Nothing fancy. As typeof ClassName returns function rather than class, we then get 8 in the operator \u0026quot;function\u0026quot;.length.\nThough we implement super(age) in the Coder class, we actually overwrite the contructor of the parent class Component in the child class Coder. Therefore, when initiating the object a, the following code is automatically triggered this.age = age -${typeof Coder}.length;. The difference between the child and parent \u0026rsquo;s constructor is minus (-) and plus (+) in the above code.\nAs such, we have 16 - 8 rather than 16 + 8, which returns 8. The function getAge() returns 9, so the corrent answer is C.\nBear in mind that JavaSCript is not a \u0026ldquo;real\u0026rdquo; OOP programming language even though we can now implement class and object as in other languages.\n42. What\u0026rsquo;s the output? class RemoveFalse { constructor(element) { this.element = element; this.length = this.removeFalse().length; } removeFalse() { this.element = this.element.filter(Boolean); return this.element; } } const theArray = [true, false, 1, 0, NaN, undefined, \u0026#34;\u0026#34;, null, \u0026#34;js.edu.vn\u0026#34;]; const a = new RemoveFalse(theArray); console.log(a.length); A: false B: true C: 2 D: 3 Answer\rAnswer: D The key message that can be taken away in the code snippet above is filer(Boolean) which can be taken into consideration in case you want to eliminate falsy values in an array. We can use filter(callback) or filter(Boolean) in particular in this case to do that. Note that we have to pass into the filter function a callback and in this case Boolean is actually a function. You can check typeof Boolean to see it.\nSimilar to map or reduce function, filter always returns a new array from the exisiting one. [true, false, 1, 0, NaN, undefined, \u0026quot;\u0026quot;, null, \u0026quot;js.edu.vn\u0026quot;].filter(Boolean); will return [true, 1, \u0026quot;js.edu.vn\u0026quot;];, hence calling the function removeFalse() gives us 3. So the correct answer is 3.\n43. What\u0026rsquo;s the output? const coderfarm = [1, [], {}, [], 2, 3]; const converted = Number(coderfarm instanceof Array); const result = coderfarm.indexOf(converted + true); console.log(result); A: [] B: {} C: 2 D: 4 Answer\rAnswer: D We have a simple array in the code snippet above that includes some digits, two other arrays and one object. Using the built-in function Number, we can convert any value passing to the function into digit. As coderfarm instanceof Array returns true, then converted get 1. Noted that you can use another way to check the type of an array is Array.isArrray(arrayToBeChecked) which return a boolean value. Suprisingly, the operator typeof [] returns object rather than array.\nThe built-in function indexOf will return the index of the element that is being checked. So as converted + true return 2, we are going to check the index of the element with the value 2 in the array coderfarm.\nWe get 4 in the console.log and the correct answer is D.\n44. What\u0026rsquo;s the output? const converter = (arrayInput) =\u0026gt; { return { ...arrayInput }; }; const content = [\u0026#34;function\u0026#34;, \u0026#34;object\u0026#34;, \u0026#34;decorator\u0026#34;]; const checking = content[Number(false)]; const result = typeof converter(content) === content[1]; console.log(checking ? (result ? (typeof converter).length : false) : false); A: 6 B: NaN C: true D: 8 Answer\rAnswer: D The operator ... in JavaScript is very handy. The function converter is quite trivial, it takes advantege of ... (rest operator || spread operator) to turn an array into an object.\nFirst we have the constant checking with the value function given that Number(false) gives us 0 and that is the first index in the array content.\nSecond, the constant result gives us the value true as the typeof converter(content) is function, which is also the value of content[1].\nThen in the final code, we have checking = true, and then result = true as well, so the final result is (typeof converter).length which is equivalent to \u0026quot;function\u0026quot;.length because the typeof of converter is simply function. We get 8 after all and the correct answer is D.\nSo the key message here is that we can take advantate of the spread operator (or ...) to turn an array to an object. For example: const a = [\u0026quot;hello\u0026quot;, 2], then we can have a go with const b = {...a} and b is now an object with the following value: {0: \u0026quot;hello\u0026quot;, 1: 2}. The key of the object is actually the index of the original array.\n45. What\u0026rsquo;s the output? function* js(length) { for (let i = length.length; i \u0026gt; 0; --i) { yield i; } } let getJS = js(typeof js); let result = getJS.next().value; console.log(result + getJS.next().value); A: 10 B: 14 C: 15 D: 16 Answer\rAnswer: C We have a generator function in the code snippet above, which is defined with the *. Noted that we can \u0026ldquo;store\u0026rdquo; as many result as we want in a generator thanks to the keyword yield.\nAs the typeof js is function, so the length of the string function is 8. So when calling getJS.next().value;, we get 8. However, in the next calling, it returns 7, and in the following calling after that, we get 6. That is why generator can \u0026ldquo;store\u0026rdquo; and \u0026ldquo;release\u0026rdquo; (or return) as many value as we want.\nSo the answer is C, which is 8 (first execution of the generator) + 7 (second execution of the generator).\n46. What\u0026rsquo;s the output? var ages = [10, 15, 20, 25]; let response = []; ages.some(function (currentValue, index, ages) { if (currentValue \u0026gt; ages[ages.length - index]) response.push(currentValue + ages.length); }); console.log(response); A: [20] B: [20, 25] C: [25, 29] D: [29] Answer\rAnswer: D Array.prototype.some() is a built-in function facilitating us to iterate the array using a callback. As in the code snippet above, there are three parameters in the callback, namely currentValue (the value of the current element that is being checked), index (the index of the element in the array that is being checked/evaluated) and ages (the array itself).\nThe function some() returns a boolean value. The code currentValue \u0026gt; ages[ages.length - index] returns true only one time, which is the last element. Let \u0026rsquo;s examine the code when it runs through each element:\n10 \u0026gt; ages[4 - 0]. As ages[4] returns undefined, and 10 \u0026gt; undefined returns false, it stops.\n15 \u0026gt; ages[4 - 1]. As ages[3] returns 25, it breaks as the operator returns false.\n20 \u0026gt; ages[4 - 2]. As ages[2] returns 20, it breaks as the operator returns false.\n25 \u0026gt; ages[4 - 3]. As ages[1] returns 10, it returns true. Only this value is being pushed to the array response.\nSo response.push(currentValue + ages.length) will add the value 25 + 4 to the array response, D is the correct answer.\n47. What\u0026rsquo;s the output? const getSTring = (string, method = false) =\u0026gt; { if (method === true) { return string.slice(1, 4).length; } return string.substr(1, 4).length; }; console.log(getSTring(\u0026#34;hello\u0026#34;, true) + getSTring(\u0026#34;hello\u0026#34;)); A: 6 B: 7 C: 8 D: 9 Answer\rAnswer: B getString() is an arrow function with two parameters. As you can see that the parameter method has the default value false, then if you do not pass any value to it when executing the function, the default value will be used.\nThe key thing to take note from the code above is the difference betweet slice(1, 4) (which returns 3 characters) and substr(1, 4) (which returns 4 ones).\nFinally console.log(getSTring(\u0026quot;hello\u0026quot;, true) + getSTring(\u0026quot;hello\u0026quot;)) returns 7 because slice and substr are both used.\n48. What\u0026rsquo;s the output? (function (a, b, c) { console.log(Boolean([...arguments].slice(2, 3)[0].slice(3, 4))); })(\u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;, \u0026#34;new zealand\u0026#34;); A: \u0026ldquo;new\u0026rdquo; B: true C: \u0026ldquo;land\u0026rdquo; D: false Answer\rAnswer: B The code above is a self-executing function. It runs when it is being declared. We have three parameters and three arguments passed are \u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot; and \u0026quot;new zealand\u0026quot;.\nFirst, arguments returns an object consisting of arguments passed to the function when executing it. However, using spread operator ..., we then convert the object to an array. We can also do it by using Array.from(object).\nSecond, slice(2, 3) extracts the element from the index 2 to the index 3, which returns \u0026quot;new zealand\u0026quot;. It is still an array. We then extract the element with the index [0] and we get the string \u0026quot;new zealand\u0026quot; rather than an array.\nThird, \u0026quot;new zealand\u0026quot;.slice(3, 4) gives us an empty string (with a space between) \u0026quot; \u0026quot;. The Boolean(\u0026quot; \u0026quot;) gives us true. Noted that if there is no space in the empty string, we get false instead.\nSo the correct answer is B.\n49. What\u0026rsquo;s the output? class HocCoBan { name = \u0026#34;hello world\u0026#34;; getSlice(slice) { return this.getName(slice).slice(true, this.name.length); } getName(space) { return this.name.split(space); } } HocCoBan.prototype.split = function (argument) { return this.getSlice(argument); }; const a = new HocCoBan(); console.log(a.split(\u0026#34;\u0026#34;).length); A: NaN B: true C: 10 D: 11 Answer\rAnswer: C The code above is nothing much special. However it is written in a complicated way on purpose. First, we have a class named \u0026ldquo;HocCoBan\u0026rdquo; with two methods and one property. Then we add another method split using the tradional way (via prototype). Note that class in JavaScript is simply a syntactic sugar of function given that typeof ClassName return function.\nWhen we call the method split, we pass the an empty string to it. This method then call other methods. The flow is as follows:\nsplit(\u0026quot;\u0026quot;) ==\u0026gt; this.getSlice(\u0026quot;\u0026quot;) ==\u0026gt; this.getName(\u0026quot;\u0026quot;) ==\u0026gt; this.name.split(\u0026quot;\u0026quot;). Here split is a built-in function that convert a string to an array.\nNoted that in getSlice(), we also use .slice(true, this.name.length) to slice (cut) the array from the index 1 to 11. So the length is 10.\nSo the final answer is C.\nThis code might help us master the concept function prototype in JavaScript and the understand the difference between the built in function String.prototype.split and the function we declare by ourself HocCoBan.prototype.split.\n50. What\u0026rsquo;s the output? function javaScript(node) { let mot = node.includes(\u0026#34;I\u0026#34;) ? \u0026#34;love\u0026#34; : \u0026#34;you\u0026#34;; return function (deno = mot) { let hai = node.replace(deno, \u0026#34;done\u0026#34;); return function (done = hai) { return (node + deno + done).length; }; }; } console.log(javaScript(\u0026#34;I love you\u0026#34;)()()); A: 18 B: 24 C: 20 D: 25 Answer\rAnswer: B Apart from learning some built-in functions to handle string such as replace and inclues, we are reviving the concept of currying function in JavaScript. Say you want to declare a function with three parameters, you may consider refactoring the code by declaring 3 nested functions, each with one parameter you wish to pass to. Basically, both of them work in the same way. However, noted that only the outerest (the main) function has the name as javaScript in the code above. Both nested (inner) functions are declared without the name. We also use three return keywords in the code.\nWhen executing the function, you then have three () as in the javaScript(\u0026quot;I love you\u0026quot;)()(). We do not pass any argument into the second and third functions (both are inner/nested functions without the name) and these functions will take the default value we have alreaded declared when being executing.\nAll in all, we have the final operator return (node + deno + done).length; in which node is \u0026ldquo;I love you\u0026rdquo;, deno is \u0026ldquo;love\u0026rdquo; and done is \u0026ldquo;I done you\u0026rdquo;. The length of these strings is 24, which you can calculate by yourself the concatenated string I love youyou I done you. Be aware of the empty space, which is also taken into account.\n51. What\u0026rsquo;s the output? const www = [\u0026#34;hello\u0026#34;, \u0026#34;coranovirus\u0026#34;, \u0026#34;kiora\u0026#34;, \u0026#34;world\u0026#34;, \u0026#34;new zealand\u0026#34;]; const found = www.find(function (world) { return world \u0026gt; \u0026#34;victory\u0026#34;; }); const result = found[1] \u0026lt; www[0][0] ? www[false ? 1 : 0] : www[true ? 0 : 1]; console.log(result); A: \u0026ldquo;hello\u0026rdquo; B: \u0026ldquo;world\u0026rdquo; C: \u0026ldquo;victory\u0026rdquo; D: \u0026ldquo;w\u0026rdquo; Answer\rAnswer: A The key information in the question above is about the method Array.prototype.find(). It returns the first element in the array that meets the condition declared in the callback function, which is passed to the function. The array is being iterated to check every single element. In the code above, we might easily see that the element world is the first element in the array that has a larger value than victory. Remember that \u0026ldquo;w\u0026rdquo; \u0026gt; \u0026ldquo;v\u0026rdquo; return trues if the two letters are compared. When two words are being compared, only the first letter in each word is being utilised to compare.\nAs the result, found is now world and thus found[1] returns the letter w whereas www[0][0] gives us the letter h in the element hello. It means found[1] \u0026lt; www[0][0] returns false.\nSo the final result is www[true ? 0: 1] or www[0], which is hello. And the correct answer is A.\n52. What\u0026rsquo;s the output? (function (flag) { let age = Boolean(NaN === NaN ? false : flag); console.log(age.toString()[Number(flag)]); })([]); A: \u0026ldquo;f\u0026rdquo; B: \u0026ldquo;t\u0026rdquo; C: true D: false Answer\rAnswer: B We have a self-executing function with the parameter/argument is an empty array. Noted that NaN === NaN returns false, then age gets the value flag, which is an empty array. However, the boolean value is true when we call Boolean([]).\nThe function toString() returns the string true and the Number([]) returns 0. Then we get \u0026ldquo;t\u0026rdquo; in the console.log. The correct answer is B.\nKeep in mind that Boolean([]) ==\u0026gt; true but Number([]) ==\u0026gt; 0. And sadly NaN === NaN returns false.\n53. What\u0026rsquo;s the output? 1) console.log(Boolean([])); 2) console.log(Number([])); 3) console.log(Number(Boolean([]))); 4) console.log(Boolean(Number([]))); 5) console.log(Boolean({})); 6) console.log(Number({})); 7) console.log(Number(Boolean({}))); 8) console.log(Boolean(Number({}))); 9) console.log(Boolean(new Boolean(false))); A: true - 0 - 1 - false - true - 1 - 1 - false - false B: true - 0 - 1 - false - false - NaN - 1 - false - true C: true - 0 - 1 - false - false - false - 1 - false - false D: true - 0 - 1 - false - true - NaN - 1 - false - true Answer\rAnswer: D JavaScript is sometimes tedious to deal with given that it is a loosely type language. The data type of a variable can be changed depending on the value. An unexpected behaviour might unfortunately occur when you change/convert the original value to another one.\nFor example, the code 2 Number([]) returns 0 and 6 (Number({})) returns NaN, although both (Boolean([])) and (Boolean({})) return true.\nIn the code 9 Boolean(new Boolean(false)), we get true even though we pass into the function constructor Boolean() a false (as the) parameter. However, if we do not use the keyword new, then false will return. It seems that in Boolean(new Boolean(false)), we have a valid opreration, so it is true. However, in the Boolean(Boolean(false))) where we do not use the keyword new, we then get false because now a false value is being evaluated rather than an operation.\nSo, the correct answer is D.\nCredit: @tiepphan, Vietnamese Angular Facebook group.\n54. What\u0026rsquo;s the output? const myYoutube = { name: \u0026#34;hoccoban\u0026#34;, address: \u0026#34;youtube.com/hoccoban\u0026#34;, getInfo() { return this; }, content: () =\u0026gt; (this === window ? myYoutube.getInfo() : this), }; console.log(myYoutube.content().name); A: \u0026ldquo;hoccoban\u0026rdquo; B: window (object) C: NaN D: undefined Answer\rAnswer: A To answer the tricky question above, you might want to have a look at the concept of this in JavaScript (on browser environment). By default, this refers to window object. Note that Window (written in capital) is the Function constructor of the window object. In this regard, console.log(this === window) return true but console.log(this === Window) returns false.\nAs content() is an arrow function, this declared inside this function points to window, so myYoutube.content() returns myYoutube.getInfo(). Noted that we have to explicitly write myYoutube.getInfo() to make sure the code will run correctly as this in this case does not work as it does not refer to the currect object. In the function getInfo(), however, this actually refers to the currect object instead of window object because we use a normal function here.\nThen we have the property name with the value \u0026ldquo;hoccoban\u0026rdquo;. So the correct answer is A.\nCredit: Thanks https://github.com/phanvigiaii for fixing the typo. Please make a pull request when you have time bro. Cheer.\n55. What\u0026rsquo;s the output? const myArray = [1, 2, 3]; myArray.someProperty = this; Array.prototype.someOtherProperty = \u0026#34;hello\u0026#34;; let result = []; for (let key in myArray) { result.push(key); } for (let key in myArray) { if (myArray.hasOwnProperty(key)) { result.push(key); } } console.log(result.length); A: 10 B: NaN C: 9 D: 7 Answer\rAnswer: C We have a simple array that consists of 3 elements. If checking the type of the array with the operator typeof, we will have object. (Hint, you can make use of Array.isArray(array)) or array instanceof Array to check its type).\nWhen declaring myArray.someProperty, we now add a new property to that array and when declaring Array.prototype.someOtherProperty = \u0026quot;hello\u0026quot;, we add a new property to every single array.\nAs a result, the for... in loop will iterate through the array in question and return its key/property and the inherited property as well. However, in the second iteration, we take advantage of the method hasOwnProperty(key) to check whether a particular key/property actually belongs to the array in question rather than the inherited one.\nIn short, in the first iteration, we get 5 (3 original ones, 1 property that is directly added to the array, 1 inherited from the Array.prototype. In the second one, we only get 4 as the inherited property is not taken into consideration.\nKeep in mind that, we use for... of to loop through an array or the traditional for loop. It is not a good practice to use for ... in to loop through an array. It is often used to loop through an object.\n56. What\u0026rsquo;s the output? const coderfarm = [1, 2, 3, 4, 5]; const [top, ...bottom] = (function (a) { let result = a; a.unshift(new Array(3)); return result; })(coderfarm); console.log(top.length + bottom.length); A: 8 B: 9 C: 10 D: 11 Answer\rAnswer: A We are using destructure array (or object) technique to extract element of an array (or object). We also take advantage of ... (spread parameter) here.\nThe array we are destructuring is returned from a self-executing function. First we pass the parameter coderfarm, which is the parameter a when declaring the function. Then we update this array with some additional value (an array with three undefined elements using new Array(3)) on the top of the array (using unshift). The array is updated now as [[undefined, undefined, undefined], 1, 2, 3, 4, 5].\nSo top is the first element of the array or [undefined, undefined, undefined], which returns 3 when we check the length.\nThe bottom returns the rest of the array in question, which is 5 when using length property.\nThe final number is 8 and thus the correct answer is A.\n57. What\u0026rsquo;s the output? let age = { number: 10 }; const getAge = (flag) =\u0026gt; { flag ? delete age.number : delete age; return age.number++; }; console.log(getAge(false)); console.log(age.number); console.log(getAge(true)); console.log(age.number); A: 10 - 10 - NaN - NaN B: 10 - 10 - undefined - undefined C: 10 - 11 - undefined - undefined D: 10 - 11 - NaN - NaN Answer\rAnswer: D The operator delete only works on the property of an object, not the object itself. In the code snippet above, we have a simple function getAge with the parameter flag. When the flag is true, we trigger delete age.number and if it is false, we will use the operator delete upon the whole object.\nAs this operator does not work on an object, if we can say that, it turns out that delete age actually does nothing. As such, console.log(getAge(false)) returns 10 and simultanously increases the value of age.number to 11. The value is now being kept in the memory. As such, console.log(age.number) will return 11.\nWhen we pass the argument flag as true in the console.log(getAge(true)), we will trigger delete age.number which removes the value and the property age.number itself. It means age.number is now undefined. However, because we also attempt to increase the value of this undefined property using ++ operator, it returns NaN.\nconsole.log(age.number) also returns NaN as well. So the correct answer is D.\n58. What\u0026rsquo;s the output? const youtube = { name: \u0026#34;hoccoban\u0026#34; }; const copy = Object.create(youtube); const cloneA = Object.assign({}, copy); const cloneB = Object.assign({}, youtube); console.log(cloneA.name); console.log(cloneB.name); console.log(copy.name); A: undefined - \u0026ldquo;hoccoban\u0026rdquo; - \u0026ldquo;hoccoban\u0026rdquo; B: \u0026ldquo;hoccoban\u0026rdquo; - \u0026ldquo;hoccoban\u0026rdquo; - \u0026ldquo;hoccoban\u0026rdquo; C: \u0026ldquo;hoccoban\u0026rdquo; - \u0026ldquo;hoccoban\u0026rdquo; - \u0026ldquo;undefined\u0026rdquo; D: undefined - \u0026ldquo;undefined\u0026rdquo; - \u0026ldquo;hoccoban\u0026rdquo; Answer\rAnswer: A We have three outputs in the code snippet above.\nFirst console.log(cloneA.name); will return undefined but why? We use Object.assign to clone a new object from an empty and from the object copy. The object copy itself is actually created from the original object youtube using Object.create. Noted that because we use Object.create, copy will inherit the data from the original one but it is still an empty object itself.\nSecond, both console.log(cloneB.name) and console.log(copy.name) return \u0026ldquo;hoccoban\u0026rdquo; because cloneB.name will have the actual property name. On the contrary, copy.name outputs the property name inherited from the youtube.\nSo the correct answer is A.\n59. What\u0026rsquo;s the output? ((x) =\u0026gt; { const data = !Array.isArray(x) ? x : x.entries(); console.log(data.next().value[1]); })([\u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;, \u0026#34;vuong\u0026#34;]); A: NaN B: \u0026ldquo;hello\u0026rdquo; C: \u0026ldquo;world\u0026rdquo; D: \u0026ldquo;vuong\u0026rdquo; Answer\rAnswer: B We have a self-invoking function here and we pass an array to it when the function is executed. Note that Array.isArray(x) return true but actually we use ! before Array.isArray(x). It means data will return x.entries().\nThe method array.entries(), as you might have already known, returns a gererator. Here we will call next() to iterate through each element. Note that if you only call next() once, it will only return the first element instead of the whole iterator.\nThen when we call value, it returns an array with the index and the value of the iterator. So what will we get if we call console.log(data.next().value[0]). Sure, it returns 0 as 0 is the index.\nSo the correct answer is B.\n60. What\u0026rsquo;s the output? let x = Symbol(); let y = Symbol(); console.log(x === y ? `${typeof x}`[1] : `${typeof x}`[2]); A: NaN B: \u0026ldquo;object\u0026rdquo; C: \u0026ldquo;y\u0026rdquo; D: \u0026ldquo;m\u0026rdquo; Answer\rAnswer: D As x and y are both instances of symbol, they are unique in our codebase; therefore, the === comparison will return false as expected. In the simple code snippet above, we get the else operation.\nIt should be noted that the typeof x operation gives us symbol, and since a string in JavaScript is iterable, we get m as we pass in the index 2.\nSo the correct answer is D.\n61. What\u0026rsquo;s the output? const frameworks = [\u0026#34;react\u0026#34;, \u0026#34;angular\u0026#34;, \u0026#34;vue\u0026#34;]; const iterator = frameworks[Symbol.iterator](); const i = frameworks.entries(); iterator.next(); i.next(); console.log(iterator.next().value[1]); console.log(i.next().value[1]); A: \u0026ldquo;react\u0026rdquo; - \u0026ldquo;angular\u0026rdquo; B: \u0026ldquo;react\u0026rdquo; - \u0026ldquo;react\u0026rdquo; C: \u0026ldquo;angular\u0026rdquo; - \u0026ldquo;angular\u0026rdquo; D: \u0026ldquo;n\u0026rdquo; - \u0026ldquo;angular\u0026rdquo; Answer\rAnswer: D As frameworks is an array, it has a built-in method named Symbol.iterator. You can hence iterate through the whole array using commonly used methods such as for... of, normal for loop, forEach or map, among others. That is relatively trivial, I suppose.\nThis code challenge above is written to help us understand the concept of iteration better. First, we use the built-in method called entries() to create a new iteration. So does Symbol.iterator. Both seem to do the same thing.\nEach time we call next() method, the iteration will output one element. We then can call value() to get the value. The difference between iterator and i is that the former shows the value itself while the latter outputs an array consisting of the index and the value. It means that in the code above, iterator.next().value returns angular and i.next().value gives us [1, angular].\nSo the correct answer is D.\n62. What\u0026rsquo;s the output? class React { theName = \u0026#34;Not React\u0026#34;; } class Author extends React { static theName = \u0026#34;Real React\u0026#34;; render() { return this.theName; } static render() { return this.theName; } } const me = new Author(); console.log(me.render()); console.log(Author.render()); A: \u0026ldquo;Not React\u0026rdquo; - \u0026ldquo;Real React\u0026rdquo; B: \u0026ldquo;Not React\u0026rdquo; - Error C: Error - Error D: Error - \u0026ldquo;Real React\u0026rdquo; Answer\rAnswer: A We have two classes in the code snippet above. It sounds we are imitating React. The React class has only one property named theName, and no method is declared here. Providing that Author extends the React class, it inherits that property, surely. However, we have also declared another property with the same name in the Author classs. The difference is that the property declared in the child class is given the keyword static.\nThe Author class also has two methods with the same name render(), one as regular methods and another with static keyword. Will that work in JavaScript?\nIt turns out that JavaScript is quite flexible. It supports both property and method if they are declared with the same name as long as they are either regular property (or method) or static property (or method).\nThe last thing you should be aware of is that the method static render() only calls the static property, here is static theName = \u0026quot;Real React\u0026quot;; So does the regular method render(). As such, the code does not run into any issues.\nSo the correct answer is A.\n63. What\u0026rsquo;s the output? class js { say = \u0026#34;hello\u0026#34;; } js.prototype.say = \u0026#34;goodbye\u0026#34;; console.log(new js().say); js.prototype.thename = \u0026#34;google\u0026#34;; console.log(new js().thename); A: Error - Error B: \u0026ldquo;hello\u0026rdquo; - \u0026ldquo;google\u0026rdquo; C: \u0026ldquo;goodbye\u0026rdquo; - \u0026ldquo;google\u0026rdquo; D: Error - \u0026ldquo;google\u0026rdquo; Answer\rAnswer: B js is a standard class declared in the code snippet above that has only one property with the name say. Then we again declare another property with the same name say for it. You might think that the property say has been overwritten with a new value goodbye.\nThat is not the case as we will get hello when we run console.log(new js().say);. It is clear that the JavaScript engine prioritizes the property declared inside the class more than the property declared later using the prototype mechanism.\nIf the property has not been declared inside the class itself, we can then add a new one with the help of prototype as in thename. Without the doubt, the code console.log(new js().thename); gives us google as expected.\nSo the correct answer is B.\n64. What\u0026rsquo;s the output? const App = ([y, x, z]) =\u0026gt; { return () =\u0026gt; { ++x; return () =\u0026gt; { return x++; }; }; }; console.log(App([10, 20, 30, 40])()()); A: 10 B: 32 C: 21 D: 22 Answer\rAnswer: C To answer the question raised on the above code snippet, you might want to revisit two concepts, currying function and destructing array or object.\nFirst, currying function means we convert a function with multiple parameters into multiple functions with a SINGLE parameter. Then you can easily manipulate the flow of the data. Noted that currying function is relevant to higher-order function, you might want to have a look.\ndestructing array or object means we attempt to extract a complex array or object more conveniently. For example, [y, x, z] = [10, 20, 30, 40] will extract y, x and z with the value 10, 20 and 30 respectively.\nThe last thing is incremental operator here ++x returns 21 but x++ does not as it still returns 21.\nSo the correct answer is C.\n65. What\u0026rsquo;s the output? const numbers = [5, 6, 7]; function callback(accumulator, currentValue) { return accumulator + currentValue; } const theCallBack = (accumulator, currentValue) =\u0026gt; accumulator + currentValue; const sum = numbers.reduce( callback, numbers.reduce(theCallBack, numbers.reduce(theCallBack, 7)) ); console.log(sum); A: 54 B: 55 C: 60 D: 61 Answer\rAnswer: D Array.prototype.reduce() is a bit perplexed built-in method that allows you to manipulate data in an array. It returns a single value from the array predefined as in the case with map or filter. The syntaxt of the function is arr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue]), so it accepts a callback function with four arguments including accumulator, currentValue, currentIndex (optional) and array (optional).\nThe second argument of the reduce method, which is optional, is called initialValue that will be counted as the first element with the index 0 when reduce is executing. If initialValue is not provided, then reduce will run with the index 1 instead. reduce() sounds complicated, but truly it is not. In case you want to revise the function, kindly take a look at MDN here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\nThe above code has two callback functions named callback and thecallback, which do the same thing. The seemingly creepy code is the variable sum, which is returned by a couple of nested reduce functions. It turns out that there is only one \u0026ldquo;real\u0026rdquo; reduce function and the other ones give us initialValue only.\nThe first initialValue is 7; The first nested reduce function gives us 7 (initialValue) + 5 + 6 + 7 = 25. The second nested reduce has 25 as the initialValue, which we get from the above. Then it returns 25 + 5 + 6 + 7 = 43; The \u0026ldquo;real\u0026rdquo; reduce function now has 43 as the initialValue, the we get the final result: 43 + 5+ 6 + 7 = 61. So the correct answer is D.\n66. What\u0026rsquo;s the output? const a = { name: \u0026#34;hoccoban.com\u0026#34; }; const b = { name: \u0026#34;youtube.com/hoccoban\u0026#34; }; const first = { ...a }.name.length; const second = { ...a, ...b }.name.length; const third = { ...a, ...b, name: \u0026#34;hello\u0026#34; }.name.length; console.log(first + second + third); A: 12 B: 37 C: 5 D: 20 Answer\rAnswer: B The code snippet above is relatively trivial. What we can learn from it is all about the spread operator (three-dot \u0026hellip;). Sometimes it is also used as a rest operator to extract data from an object or array.\nWe have two simple objects which both have the same key name but different values. The constant first gives us the length of the string value of the keyword name that is copied from a. So, first is now 12.\nThe constant second merges a and b into one object. However, as b has the same key name with a, the object created by merging two objects will have the value of b. It means the constant second gives us the length of youtube.com/hoccoban, which is 20.\nthird does the same thing with first and second as it merges two objects into one. However, it also adds another key-value to the object. Coincidently, the key now is name, which is the same with the key attained from a and b. Hence, this key and value will take over the merged object. That means third is the length of the string hello, which is 5.\nIn total, we have 12 + 20 + 5, and the final result is 37.\nSo the correct answer is B.\n67. What\u0026rsquo;s the output? const hocCoBan = {}; Object.defineProperty(hocCoBan, \u0026#34;domain\u0026#34;, { value: \u0026#34;hoccoban.com\u0026#34;, }); async function App({ year, age }) { return year - age + hocCoBan.domain.length; } App({ year: 2021, age: 30 }).then((r) =\u0026gt; console.log(r)); A: 2051 B: 2001 C: 30 D: 2003 Answer\rAnswer: D The code snippet above seems complicated regarding how we take advantage of Object.defineProperty to add key and value to the object hocCoBan. In fact, Object.defineProperty has a couple of handy features that allow us to control the behavior of the object in some situations where we want to make sure that the object created is mutable or not, whether it is iterable (using for..in) and so for. For example, if we set configurable: false when we declare an object with Object.defineProperty, we cannot use delete operator to delete the object\u0026rsquo;s property. We cannot change the value of that property as well.\nThe second \u0026ldquo;take away\u0026rdquo; message when reading the code above is the unpacking object technique, or a more frequent term is the destructing object. Say you have an object with two keys called year and age, then you can get them by using the destructing object technique as follows: {year, age} = theOBject;. In the code above, when declaring the function App, we also use destructing object technique to get the key from the object and use them as the parameters.\nIf you are familiar with asynchronous code in JavaScript when using the keyword async, it is not a big deal to understand why we need to use then to get the function App being called. It fact, async always returns a promise, so we need to use then method to get the data we want.\nThe flow of the code is: 2021 - 30 + \u0026quot;hoccoban.com\u0026quot;.length (which is 12).\nThe final result is 2003. So the correct answer is D.\n68. What\u0026rsquo;s the output? class hoccoban { #thisyear = 2021; constructor(covidTheFirstYear) { this.covidTheFirstYear = covidTheFirstYear; } getThisYear() { return this.#thisyear; } getCovidFirstYear() { return this.covidTheFirstYear; } } const message = new hoccoban(2019); const result = hoccoban.hello ?? message.getThisYear() - message.getCovidFirstYear(); console.log(result); A: NaN B: 2019 C: undefined D: 2 Answer\rAnswer: D This challenge partly illustrates the newest features of JavaScript detailed in ECMAScript 2020 or ES11.\nNow you can declare a private property in a class thanks to the symbol #. Like other languages, a private property in JavaScript can only be accessed from inside the class. It will trigger an error when you attempt to call it outside the class, surely.\nThe second feature you might see on the code snippet above is the nullish coalescing operator or ??. When declaring some variable such as let myVariable = number ?? 7, if the variable number is either undefined or null, the variable myVariable will be assigned the value 7.\nSo hoccoban.hello means undefined because we have not added any value yet. Then by using nullish coalescing operator with ?? the variable result simply returns 2 as message.getThisYear() gives us 2020 and message.getCovidFirstYear() gives us 2019. Note that we can access the private property outside of the class via a method, as in the method getThisYear().\nSo the correct answer is D.\n69. What\u0026rsquo;s the output? const keyWords = \u0026#34;hello world\u0026#34;; const entries = keyWords.split(\u0026#34; \u0026#34;); const collections = []; entries.forEach((entry, index) =\u0026gt; { collections.push([entry, index]); }); const objectResult = Object.fromEntries(collections); const { world } = objectResult; console.log(world); A: 0 B: true C: 1 D: \u0026ldquo;hello\u0026rdquo; Answer\rAnswer: C The code snippet above is not challenging for those who have had decent experience working with ES6 I suppose. First we turn keywords into an array using split() function. Then we create a variable named collection, which initially is an empty array.\nTake a closer look at the forEach function, which allows us to run a for loop through the whole array entries, you might realize that push([entry, index]); add an array to collections rather than an element.\nThe next step is by taking advantage of Object.fromEntries() that converts an array with at least two elements (the form of key-value) to an object. This built-in method is the reversing version of Object.entries(), which extracts key and value from an object to an array.\nconst { world } = objectResult; is nothing special as we unpack the object using destructing object technique supported since ES6. As the object objectResult has hello and world with two respective values 0 and 1, we get 1 when printing out world, so the correct answer is C.\n70. What\u0026rsquo;s the output? const target = { domainname: \u0026#34;hoccoban.com\u0026#34;, author: \u0026#34;vuong\u0026#34;, }; const handler = { get: function (thetarget, prop, receiver) { if (prop === \u0026#34;domainname\u0026#34;) { return thetarget.author.length; } else { return thetarget.domainname.length; } }, }; const proxyObject = new Proxy(target, handler); console.log(proxyObject.domainname \u0026gt; proxyObject.author); A: true B: false C: 12 D: 5 Answer\rAnswer: B We have implemented a basic use case of Proxy in the code snippet above. Each proxyObject object has two parameters (target and handler). handler is also an object.\nApart from get() as you might see, handler also has a handful of other methods such as set, defineProperty(), has() and so forth. Sometimes, people may say a method is a trap of a proxy object.\nBack to the code above, the get method allows us to modify how the proxy object will display the value of the original object. thetarget is the original object, and prop is the property of that object as you might guess. You might choose another name in the get function if you want when creating your handler.\nThe handler above calculates the length of the string value of the two properties. Based on the flow of if - else code, it swaps the returned value.\nSo proxyObject.domainname now should be understood as target.author.length which means 5 and proxyObject.author means target.domainname.length which gives us 12. So the output is false. The correct answer is B.\nIf you do the same thing with the original, it should be something like console.log(target.domainname.length \u0026gt; target.author.length) which returns true.\nI believe that Proxy is worth to have a closer look. If that is the case, no place is better than MDN. So have a go at: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n71. What\u0026rsquo;s the output? const promise1 = new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; resolve(\u0026#34;hello\u0026#34;), 5000); }); const promise2 = new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; resolve(\u0026#34;world\u0026#34;), 4000); }); (async () =\u0026gt; { console.time(\u0026#34;timeleap\u0026#34;); const p1 = await promise1; const p2 = await promise2; console.log(`${p1} ${p2}`); console.timeEnd(\u0026#34;timeleap\u0026#34;); })(); A: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 5000 ms B: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 9000 ms C: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 4000 ms D: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 1000 ms Answer\rAnswer: A We have already had a couple of questions regarding asynchronous code in general and handling the data flow with promise in particular. If you understand how JS works, I am sure that the code challenge above is not difficult.\nWe have two promises; each takes 5 or 4 seconds to complete the code and returns \u0026ldquo;hello\u0026rdquo; (in promise1) and \u0026ldquo;world\u0026rdquo; (in promise2) in the resolve methods, respectively.\nThen we take advantage of the async function to chain the two promises to get the result we want. As async function returns a promise so to get the returned value from async function, we have to use then() method. As we do not do that here, then we get Promise { \u0026lt;pending\u0026gt; }.\nThe question is, does p2 have to wait and only run after p1 complete? It turns out that it does not. Both p1 and p2 run simultaneously in the task queue thanks to web API or nodejs API (the environments by which JavaScript engine runs). So it will not take 9 seconds to finish the code but solely around 5. It means promise1 takes 5 seconds to complete and at the same time, promise2 reaches the bottom within only 4 seconds.\nThat is why A is the correct answer.\nUpdated: What happens if promise2 takes 6 seconds instead of 4 ? Well, as promise2 runs almost at the same time with promise1, it will only take 1 second after the promise1 completes. So in total, it takes approximately 6 seconds.\n72. What\u0026rsquo;s the output? const promise1 = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; resolve(\u0026#34;hello\u0026#34;), 5000); }); }; const promise2 = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; resolve(\u0026#34;world\u0026#34;), 4000); }); }; (async () =\u0026gt; { console.time(\u0026#34;timeleap\u0026#34;); const p1 = await promise1(); const p2 = await promise2(); console.log(`${p1} ${p2}`); console.timeEnd(\u0026#34;timeleap\u0026#34;); })(); A: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 5000 ms B: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 9000 ms C: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 4000 ms D: Promise { } - \u0026ldquo;hello world\u0026rdquo; - timeleap: ~ 1000 ms Answer\rAnswer: B The 72nd challenge is almost identical to the 71st. Please take a closer look.\nThe difference lies in the way we declare a promise. In question 71st, we use two constants, and both return promise, but in question 72, we declare functions and each returns a promise.\nIf you run the code, you might be surprised with the result as it takes around 9 seconds to complete the code in place of 5 seconds as in the previous question.\nIt means that const p1 = await promise1; and const p1 = await promise1(); are different as the latter (a function) might block the callstack and const p2 = await promise2(); can only be called after the p1 completes. The two do not run in parallel as the two promises in the previous question.\nAs it takes 9 seconds to finish, B is the correct answer.\n73. What\u0026rsquo;s the output? let history = { year: 2021, getYear: function () { console.log(this.year); }, }; setTimeout(history.getYear, 0); setTimeout(history.getYear.bind(history), 10); const { year, getYear } = history; getYear(); A: undefined - undefined - 2021 B: undefined - 2021 - 2021 C: 2021 - undefined - 2021 D: 2021 - 2021 - 2021 Answer\rAnswer: A We have three outputs on the code above. First, we have a simple object with one property and one method. Noted that the method point to the property year using this keyword. The problem now happens when we attempt to extract data from the object.\nBe aware of the setTimeout method, which will create a separated context that is different from the original object\u0026rsquo;s context. Even though in setTimeout(history.getYear, 0); we have explicitly called the object history, setTimeout will still execute the function history.getYear withthis pointing to the global object. So it returns undefined.\ngetYear(); is extracted from the object we have defined in the beginning. But as this is out of the original context when executing the function, it returns undefined. This code is called last, but the output is displayed first on the console window as it is a synchronous code.\nsetTimeout(history.getYear.bind(history), 10); runs last and will give us 2021 as it is bound to the object history. Finally, we get undefined - undefined - 2021, and A is the correct answer.\n74. What\u0026rsquo;s the output? class handleCovid { constructor(start) { this.start = start; } calculate(someValue) { this.start = this.start + someValue; return this.start; } vaccine() { ++this.start; return this; } delaying() { ++this.start; return this; } static getFinal(result) { return result * 2; } } const now = new handleCovid(2019); console.log(handleCovid.getFinal(now.vaccine().delaying().calculate(2020))); A: 2019 B: 8082 C: 8080 D: 8084 Answer\rAnswer: B The code snippet above is ugly and sounds complicated at first. Yet, you might encounter a situation when some good \u0026ldquo;take away\u0026rdquo; messages might be given. The flow of the code is not hard to understand, I suppose.\nFirst, a function in JavaScript can accept another function as its parameter. With regard to the static keyword, it means we can directly call a static method in the form of className.staticmethod without invoking the object created by the normal way new ClassName.\nBesides, you might want to have a look at how we chain more than one method together. That is possible if these methods return this.\nNow let break it down:\ncalculate(2020) \u0026ndash;\u0026gt; 2019 + 2020 = 4039; delaying().calculate(2020) \u0026ndash;\u0026gt; 4040; now.vaccine().delaying().calculate(2020) \u0026ndash;\u0026gt; 4041; handleCovid.getFinal(now.vaccine().delaying().calculate(2020) \u0026ndash;\u0026gt; 4041 * 2 = 8082; So the correct answer is B.\n75. What\u0026rsquo;s the output? function HappyNewYear() { return \u0026#34;hello\u0026#34;; } const year2021 = new HappyNewYear(); year2021.__proto__.greeting = \u0026#34;happy\u0026#34;; HappyNewYear.prototype.say = \u0026#34;new year\u0026#34;; console.log(year2021.__proto__ === HappyNewYear.prototype); console.log(Object.getPrototypeOf(year2021) === HappyNewYear.prototype); console.log(Reflect.getPrototypeOf(year2021) === HappyNewYear.prototype); console.log(year2021.__proto__ === Object.prototype); console.log(year2021 instanceof HappyNewYear); console.log(year2021 instanceof Object); const thisyear = new HappyNewYear(); console.log(`${thisyear.greeting} ${thisyear.say}`); A: true - true - true - false - true - false - \u0026ldquo;happy new year\u0026rdquo; B: true - true - true - false - false - true - \u0026ldquo;happy new year\u0026rdquo; C: true - true - true - true - true - true - \u0026ldquo;happy new year\u0026rdquo; D: true - true - true - false - true - true - \u0026ldquo;happy new year\u0026rdquo; Answer\rAnswer: D The code snippet above helps us revise the concept of prototype in JavaScript with two essential keywords: __proto__ and FunctionName.prototype. I believe that the code console.log(year2021.__proto__ === HappyNewYear.prototype); is the key to understand the difference between the two. So, in short, every single object in JavaScript has a built-in property __proto__ that gives us an overview of the built-in (internal) [[Prototype]]. They are the things (property and method) the object inherits from the \u0026ldquo;parent\u0026rdquo; function constructor or class).\nFor example, if you declare a literal object such as const a = {} then a.__proto__ === Object.prototype returns true because a inherits the prototype from the \u0026ldquo;parent\u0026rdquo; Object. However, if an object is created using function constructor then the \u0026ldquo;parent\u0026rdquo; prototype is function constructor itself instead of the Object. So while console.log(year2021.__proto__ === HappyNewYear.prototype); returns true, console.log(year2021.__proto__ === Object.prototype); gives us false.\nBe aware of Object.getPrototypeOf (object) and Reflect.getPrototypeOf(object). The two are recommended to use as __proto__ is being deprecated.\nYou might want to read more about __proto__ at MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\nThe correct answer is D, and btw \u0026ldquo;happy new year\u0026rdquo;!\n76. What\u0026rsquo;s the output? const address = { name: \u0026#34;hoccoban.com\u0026#34;, author: \u0026#34;Vuong Nguyen\u0026#34;, }; const key = Reflect.has(address, \u0026#34;author\u0026#34;) ? Reflect.ownKeys(address)[0] : \u0026#34;hello\u0026#34;; Reflect.set(address, \u0026#34;language\u0026#34;, \u0026#34;JavaScript\u0026#34;); const totalKeys = Reflect.ownKeys(address).length; const name = Reflect.get(address, key).length; const language = Reflect.get(address, \u0026#34;language\u0026#34;).length; console.log(totalKeys + name + language); A: 22 B: 10 C: 20 D: 25 Answer\rThe correct answer is D. Why? Now let break it down:\nReflect.has(address, 'author') gives us true given that the object address has the key author. Simple as it is. So the value of the variable key is now Reflect.ownKeys(address)[0], which in fact is the key name.\nReflect.set(address, 'language', 'JavaScript'); set another key-value to the object address.\nReflect.ownKeys(address).length; gives us 3 because now it has three keys, so totalKeys is now 3.\nReflect.get(address, key).length; gives us the length of the string hoccoban.com which is 12.\nReflect.get(address, 'language').length is the length of the string JavaScript, which is 10.\nThe final answer is 3 + 12 + 10 = 25.\nAnswer: D 77. What\u0026rsquo;s the output? const myModule = (function () { const covidYear = 2019; const year = 2021; function getYear() { return year; } function getCovidYear() { return covidYear; } function exposeYear() { return getYear(); } function exposeCovidYear() { return getCovidYear(); } return { nothing: undefined ?? null ?? null ?? undefined, exposeYear, exposeCovidYear, }; })(); const result = myModule.nothing ?? myModule.exposeYear() + myModule.exposeCovidYear(); console.log(result); A: 2021 B: 2019 C: 4040 D: undefined Answer\rThe challenge above will help you revise the revealing pattern and thanks to it you can declare a private variable in JavaScript. Note that we can now declare a private property in a class in modern JavaScript, so the above way of writing a private variable seems old-fashioned.\nFirst, we have an IIFE function - immediately invoked function expressions. There are two variables and two functions as well. However, in the return, there are three key-values. We can not directly access the two variables covidYear and year except for using some already-built functions inside the IIFE.\nIf you feel the keyword ?? is odd, then you might want to have a look at the latest syntax supported in modern JavaScript called \u0026ldquo;Nullish Coalescing Operator\u0026rdquo;. It means, if the left element is either undefined or null, the value of the right element will be assigned.\nIn short, we have myModule.exposeYear() (2021) and myModule.exposeCovidYear() (2019). In total, the final result is 4040. So the correct answer is C.\nAnswer: C 78. What\u0026rsquo;s the output? class HocCoban { constructor(address) { this.address = address; this.youtube = \u0026#34;\u0026#34;; } get getAddress() { return this.address; } set setYoutube(channel) { this.youtube = channel; } getYoutube() { return this.youtube.length; } } const web = new HocCoban(\u0026#34;hoccoban.com\u0026#34;); web.setYoutube = \u0026#34;youtube.com/hoccoban\u0026#34;; console.log(web.getAddress); console.log(web.youtube); console.log(web.getYoutube()); A: \u0026ldquo;hoccoban.com\u0026rdquo; - \u0026ldquo;youtube.com/hoccoban\u0026rdquo; - 20 B: \u0026ldquo;hoccoban.com\u0026rdquo; - function() - 20 C: function() - \u0026ldquo;youtube.com/hoccoban\u0026rdquo; - 20 D: function() - function() - 20 Answer\rset and get are commonly called setter and getter. When declaring a method in a class and putting the keyword set or get before it, you can then call them without using parenthesis - (). Put another way, when using get and set, you can directly get or set the value of/for the properties. Somehow it might be convenient in some cases.\nBe aware of the methods declared with a getter as we just need to call the method as we call a property (without using parenthesis).\nIf you know how a traditional method works in JavaScript, then the code challenge above is not difficult, I suppose. The answer is A.\nAnswer: A 79. What\u0026rsquo;s the output? const result = [\u0026#34;ronaldo\u0026#34;, \u0026#34;messi\u0026#34;, \u0026#34;neymar\u0026#34;, \u0026#34;Ronaldo\u0026#34;, \u0026#34;LuKaKUUUU\u0026#34;].sort(); console.log(result); A: [\u0026ldquo;LuKaKUUUU\u0026rdquo;, \u0026ldquo;Ronaldo\u0026rdquo;, \u0026ldquo;messi\u0026rdquo;, \u0026ldquo;neymar\u0026rdquo;, \u0026ldquo;ronaldo\u0026rdquo;] B: [\u0026ldquo;LuKaKUUUU\u0026rdquo;, \u0026ldquo;messi\u0026rdquo;, \u0026ldquo;neymar\u0026rdquo;, \u0026ldquo;Ronaldo\u0026rdquo;,\u0026ldquo;ronaldo\u0026rdquo;] C: [\u0026ldquo;LuKaKUUUU\u0026rdquo;, \u0026ldquo;messi\u0026rdquo;, \u0026ldquo;neymar\u0026rdquo;, \u0026ldquo;ronaldo\u0026rdquo;, \u0026ldquo;Ronaldo\u0026rdquo;] D: [\u0026ldquo;messi\u0026rdquo;, \u0026ldquo;neymar\u0026rdquo;, \u0026ldquo;ronaldo\u0026rdquo;, \u0026ldquo;Ronaldo\u0026rdquo;, \u0026ldquo;LuKaKUUUU\u0026rdquo;] Answer\rIn JavaScript, the built-in sort() method sorts the elements of an array. It returns a sorted array in ascending order. Note that each element will be converted to strings and then compared according to the sequences of UTF-16 code unit values. What does it mean?\nIt means, \u0026ldquo;banana\u0026rdquo; \u0026lt; \u0026ldquo;cherry\u0026rdquo; or 80 \u0026lt; 9 (because \u0026ldquo;80\u0026rdquo; \u0026lt; \u0026ldquo;9\u0026rdquo; in the Unicode order).\nIf you run the following code const result = [9, 11, 89].sort();, the constant result will be sorted as [11, 8, 9] rather than [9, 11, 89] because the engine will convert the number value to string.\nThe following codes might give you a hint about the relationship between character and number. Ultimately, as the computer can only understand 0 and 1, all characters and even decimal numbers are then converted to 1 and 0. charCodeAt() gives us the decimal value of any string evaluated.\nconsole.log(\u0026quot;LuKaKUUUU\u0026quot;.charCodeAt(0)) or console.log(\u0026quot;LuKaKUUUU\u0026quot;.charCodeAt()) ==\u0026gt; 76 console.log(\u0026quot;Ronaldo\u0026quot;.charCodeAt(0)) or console.log(\u0026quot;Ronaldo\u0026quot;.charCodeAt()) ==\u0026gt; 82 console.log(\u0026quot;messi\u0026quot;.charCodeAt(0)) or console.log(\u0026quot;messi\u0026quot;.charCodeAt()) ==\u0026gt; 109 console.log(\u0026quot;neymar\u0026quot;.charCodeAt(0)) or console.log(\u0026quot;neymar\u0026quot;.charCodeAt()) ==\u0026gt; 110 console.log(\u0026quot;ronaldo\u0026quot;.charCodeAt(0)) or console.log(\u0026quot;ronaldo\u0026quot;.charCodeAt()) ==\u0026gt; 114 console.log(\u0026quot;9\u0026quot;.charCodeAt()) or console.log(\u0026quot;99\u0026quot;.charCodeAt()) ==\u0026gt; 57 console.log(\u0026quot;80\u0026quot;.charCodeAt()) or console.log(\u0026quot;8\u0026quot;.charCodeAt()) ==\u0026gt; 56\nNoted that if index is not a number, it defaults to 0. The answer is A.\nAnswer: A 80. What\u0026rsquo;s the output? const anArray = typeof []; const aTypeOfNull = typeof null; const weirdFirst = null instanceof Object; const weirdSecond = [] instanceof Object; const weirdThird = [] instanceof Array; console.log(anArray); console.log(aTypeOfNull); console.log(weirdFirst); console.log(weirdSecond); console.log(weirdThird); A: \u0026ldquo;array\u0026rdquo; - \u0026ldquo;null\u0026rdquo; - false - true - true B: \u0026ldquo;array\u0026rdquo; - \u0026ldquo;object\u0026rdquo; - false - true - true C: \u0026ldquo;object\u0026rdquo; - \u0026ldquo;object\u0026rdquo; - false - false - true D: \u0026ldquo;object\u0026rdquo; - \u0026ldquo;object\u0026rdquo; - false - true - true Answer\rIn the 80th challenge question, we will review some fundamental \u0026ldquo;issue\u0026rdquo; or \u0026ldquo;weird\u0026rdquo; features in JavaScript relating to the typeof and instance operators. Given that the original version of the JavaScript language was designed in just 10 days, there are a bundle of inconsistent behaviors that cannot be fixed. They are permanent features existing in the modern language. If we fix it, a lot of websites might crash.\nThe above code shows us some of the weird features in JavaScript. For example, [] is an array but the typeof [] gives us object. Note that you might take advantage of Array.isArray([]) rather than typeof to examine whether a variable is an array or not.\ntypeof null; is another weird operator as it returns object. However null instanceof Object; returns false. ~WhatTheHell~!!!\nMan, [] instanceof Object; and [] instanceof Array; both return true. How inconsistent it is.\nThe answer is D.\nAnswer: D 81. What\u0026rsquo;s the output? class Dog { speak() { return this.say(); } say() { console.log(\u0026#34;hello world\u0026#34;); } } class Cat { speak() { return this.say(); } say() { console.log(\u0026#34;kia ora\u0026#34;); } } const animal = new Dog(); animal.speak(); Object.setPrototypeOf(animal, Cat.prototype); animal.speak(); A: \u0026ldquo;hello world\u0026rdquo; - undefined B: \u0026ldquo;kia ora\u0026rdquo; - \u0026ldquo;kia ora\u0026rdquo; C: \u0026ldquo;hello world\u0026rdquo; - \u0026ldquo;kia ora\u0026rdquo; D: \u0026ldquo;hello world\u0026rdquo; - \u0026ldquo;hello world\u0026rdquo; Answer\rThe central issue/concept mentioned in the code above is the method Object.setPrototypeOf(object, prototype). It is one of the features in ES6, or ECMAScript 2015. Another way to set the prototype of an object is Object.prototype.__proto__ but the latter is controversial.\nAt first, animal.speak(); gives us \u0026ldquo;hello world\u0026rdquo; which is no surprise. Yet, in the second call, we get \u0026ldquo;kia ora\u0026rdquo; instead of \u0026ldquo;hello world\u0026rdquo;. When checking the prototype with Object.getPrototypeOf(animal), you might see that Cat is the prototype of the object animal rather than Dog.\nThe answer is C.\nBy the way, kia ora means hello in the MƒÅori language.\nAnswer: C 82. What\u0026rsquo;s the output? const js = [9, 10]; function mutate(a, b) { a.push(b); } mutate(js, 1); console.log(js); A: [9, 10] B: [9, 10, 1] C: [1, 9, 10] D: ReferenceError Answer\rThe code snippet might be pretty trivial if you have already obtained a solid understanding of the two different concepts: reference and value. In JavaScript, non-primitive type such as array and object does not store the value but the reference.\nAlso, as the arguments in function are passed by the reference, the function mutate will push another element into the array js. Finally, the initial variable \u0026lsquo;js\u0026rsquo; is updated with the new value [9, 10, 1].\nIf the variable js is assigned a primitive value such as string or number, no matter how the function mutate, it will not mutate the initial variable \u0026lsquo;js\u0026rsquo;. However, if the variable is an object, then it will also be mutated, as in the case of an array in the code above.\nB is the correct answer.\nAnswer: B 83. What\u0026rsquo;s the output when running the code on a browser? console.log(this === window); console.log(this === frames); console.log(this === globalThis); console.log(this === self); console.log(this === global); A: true - true - true - true - \u0026ldquo;ReferenceError\u0026rdquo; B: true - false - true - true - \u0026ldquo;ReferenceError\u0026rdquo; C: true - true - true - true - true D: true - true - \u0026ldquo;ReferenceError\u0026rdquo; - true - \u0026ldquo;ReferenceError\u0026rdquo; Answer\rThe code snippet above might output different results if running on other environments than the browser. For example, there is no self, window, or frames on Nodejs.\nglobal plays the role of the global object in Nodejs, but that is not the case in the browser environment. In contrast, globalThis is available in both browser and Nodejs environments.\nThe first takeaway message is that Nodejs does have this, global, and globalThis. Browser environment has 5 ones including this, globalThis, window, frames, and self.\nThe second takeaway message is that Web Worker only has self as the global object.\nUltimately, A is the correct answer.\nAnswer: A 84. What\u0026rsquo;s the output ? class StackHocCoBan { constructor() { this.stack = []; } push(thing) { return this.stack.push(thing); } pop() { return this.stack.pop(); } peek() { return this.stack[this.length - 1]; } get length() { return this.stack.length; } isEmpty() { return this.length === 0; } } const firstThing = new StackHocCoBan(); firstThing.push(firstThing.length); firstThing.push(firstThing.length); !firstThing.isEmpty() ? firstThing.push(firstThing.length) : firstThing.length; firstThing.pop(); console.log(firstThing.peek() + firstThing.length + firstThing.pop()); A: 3 B: 4 C: 5 D: 6 Answer\rThe code challenge above is a bit lengthy, frankly. But it might practically help you to revise the concept of stack implemented in JavaScript. Such a concept is quite crucial when it comes to the algorithm, so to say. It appears that stack and queue are blood brothers, and as a developer, you are always advised to master these concepts along with array, linked list, tree, graphs, and so on.\nIn my opinion, both stack and queue are simply arrays, but they are exclusively built to serve some particular jobs with strict requirements. You might see pop() or push() in the code above are standard native methods we often use when working with the array.\nSo now firstThing is an object initiated by the class StackHocCoBan. As the class\u0026rsquo;s construct initially triggers an empty array this.stack = [];, first the code firstThing.push(firstThing.length); will actually push the number 0 into the array given that firstThing.length returns 0 as the stack, at the beginning` is empty.\nThen firstThing.push(firstThing.length); (the second one) pushes number 1 to the stack as we have already had one item (the number 0).\nfirstThing.isEmpty() returns false because we have two things in the stack. Yet, be causious with \u0026ldquo;!\u0026rdquo; before it. As we write !firstThing.isEmpty(), the code with call firstThing.push(firstThing.length) rather than firstThing.length;. It is a simply short-hand of if-else.\nSo, the stack is pushed the number 2 because firstThing.length returns 2. So now the stack is as [0, 1, 2], beautiful, right?\nfirstThing.pop() will eliminate the number 2 and the stack is now [0, 1].\nThe last line of the code above is firstThing.peek() (1) + firstThing.length (2) + firstThing.pop() (1).\nSo B is the correct answer.\nAnswer: B 85. What\u0026rsquo;s the output ? class QueueHocCoBan { constructor() { this.queue = []; } enqueue(item) { return this.queue.unshift(item); } dequeue() { return this.queue.pop(); } peek() { return this.queue[this.length - 1]; } get length() { return this.queue.length; } isEmpty() { return this.queue.length === 0; } } const items = new QueueHocCoBan(); items.enqueue(\u0026#34;constructor\u0026#34;); items.enqueue(\u0026#34;QueueHocCoBan\u0026#34;); items.enqueue(\u0026#34;hoccoban.com\u0026#34;); const item = items.peek().length - items.length; console.log(item); A: 6 B: 7 C: 8 D: 9 Answer\rFollowing up the question 85th, we now pay the attention to another important concepts - queue - which is a bit different from stack. While stack leverages two native array methods push() (for adding new item) and pop()(for extracting new item), queue utilises unshift() (for adding new item) and pop() (for extracting new item). In essense, both stack and queue are array and thus the difference between them, IMO, lays in the way push() and unshift() are implemented for adding new item. While push() adds a new item/element at the end/tail of the array, unshift() adds the new one to the top/head of the array itself.\nFirst, the object items will add three new elements into the array (initiated by the constructor) at the top one by one, thanks to the method enqueue. The array will look like this [\u0026ldquo;hoccoban.com\u0026rdquo;, \u0026ldquo;QueueHocCoBan\u0026rdquo;, \u0026ldquo;constructor\u0026rdquo;];\nNow items.peek() gives us \u0026ldquo;constructor\u0026rdquo; and thus items.peek().length returns 11. items.length simply returns 3 and so the final result will be 8.\nSo C is the correct answer.\nBy way of summarisation, using queue, we can only take out the first element (also the tail of the array) with the method dequeue(). You might need to find another way to extract other elements of the queue.\nAnswer: C 86. What\u0026rsquo;s the output ? const domains = new Map(); domains.set(\u0026#34;site\u0026#34;, \u0026#34;hoccoban.com\u0026#34;); domains.set(\u0026#34;youtube\u0026#34;, \u0026#34;youtube.com/hoccoban\u0026#34;); const keys = domains.keys(); const values = domains.values(); let result = domains.has(\u0026#34;hoccoban.com\u0026#34;) ? values.next().value : keys.next().value; console.log(result); A: \u0026ldquo;site\u0026rdquo; B: \u0026ldquo;hoccoban.com\u0026rdquo; C: \u0026ldquo;youtube\u0026rdquo; D: \u0026ldquo;youtube.com/hoccoban\u0026rdquo; Answer\rThere are two ways hash tables are implemented in JavaScript: object and Map(). Hash tables are data structures created to store information in the form of key-value.\nWhile the native object defined as {} is trivial for a JavaScript developer, a new way to design a hash table has been recently added into the language. When writing const domains = new Map();, we have declared an object with a couple of different features as opposed to the veteran one declared in the form of {} or new Object we all know.\nYou are advised to take advantage of the built-in methods such as set(), get(), has() or delete() among others to manipulate the map object.\nNote that a map object can be iterated using for of. You might need to use next().value to extract the raw information written. At this point, you might want to revisit function generator to see why we need to do that.\nBoth keys() and values() are native methods of the class Map. You might see that they works on a map object as in a normal object. Back to the code snippet above, let result = domains.has(\u0026quot;hoccoban.com\u0026quot;) ? values.next().value: keys.next().value returns keys.next().value given that domains.has(\u0026quot;hoccoban.com\u0026quot;) returns false.\nSo console.log(result) gives us \u0026ldquo;site\u0026rdquo;, so A is the correct answer.\nNote that if you want to extract \u0026ldquo;youtube\u0026rdquo;, you must run keys.next().value twice.\nAnswer: A 87. What\u0026rsquo;s the output ? function inner(flag) { hello = 10; if (flag) { return ++hello; } return --hello; } var hello = 12; inner(hello \u0026gt; 11 ? false : true); console.log(hello); A: 9 B: 10 C: 11 D: 12 Answer\rAs a variable in JavaScript can be declared without any functional keyword such as var, let, or const standing before the variable name, as seen on the code above, this challenge sounds a bit odd as now developers tend to use const or let everywhere. What happened when we do that? The variable will have a global scope no matter where it has been written initially. So first, the variable hello will be accessed anywhere outside of the function scope whenever (after to be exact) the function inner has been executed.\nThen we redeclare the hello variable with a different value.\nThe code inner(hello\u0026gt;11? false: true) is translated to inner(false), so the variable hello declared inside this function is mutated to 9.\nAs hello is now 9 instead of 12, A is the correct answer.\nAnswer: A 88. What\u0026rsquo;s the output ? const collections = [\u0026#34;a\u0026#34;, [123], true, \u0026#34;c\u0026#34;, { abc: \u0026#34;hello world\u0026#34; }]; const iterator = collections.values(); const a = iterator.next().value.length; const b = iterator.next().value.length; const c = iterator.next().value.toString().length; const d = iterator.next().value.length; const e = Object.values(iterator.next().value)[Number(a \u0026gt; b)].length; console.log(a + b + c + d + e); A: 12 B: 14 C: 16 D: 18 Answer\rThe code snippet above is frankly tedious as it does not solve any big problem but is still written in a very cryptic manner, honestly. I want you to pay a bit more attention to the native function to manipulate array values(). For your information, I also use Object.values() so that you can somehow make a comparison between the two by yourself.\nIn the beginning, we have a very simple array packed with different types of data such as boolean, string, array and object. The code collections.values(); returns an iterator, so you can not simply access to each element as an usual array. You might run a for of loop here to render all of the elements in this iterator. By doing that, the way iterator works is likely a typical array.\nSo how do we access a single element in this iterator? We need to use next().value. Each time we call it, the iterator will render the value, one by one, starting with the first element.\nIt means const a = iterator.next().value.length; returns 1. So a is 1. So does b. C is a bit different and we have 4 here as true, a boolean, is converted to a string. d is 1. So\nThe code in e is not fascinating, I suppose. Object.values gives us an array of value defined in the object { abc: \u0026quot;hello world\u0026quot; }. [Number(a \u0026gt; b)] give us [0]. So e is simply the length of the string \u0026ldquo;hello world\u0026rdquo;, which is 11.\nFinally, in the console we have 1 + 1 + 4 + 1 + 11 = 18. So D is the correct answer.\nAnswer: D 89. What\u0026rsquo;s the output ? const matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], ]; function matrixHandle(m) { let total = arguments[0][0][0]; let length = m.length; for (let i = 0; i \u0026lt; length; i++) { for (let j = 0; j \u0026lt; m[i].length; j++) { total += m[i][j]; } } return total; } console.log(matrixHandle(matrix)); A: 44 B: 45 C: 46 D: 47 Answer\rYou can easily create a two-dimensional array by nesting an array inside the parent one as the variable `matrix` above. To render all of the elements in the matrix, we implement a simple code with two for-loop functions which are nested.\rarguments[0][0][0]; gives us 1 because arguments has wrapped the variable matrix in an array. Note that arguments is a Array-like.\nSo the variable total at first is 1, and then the final value cumulated by looping through the matrix is 46.\nIn short, we have 1 + 1 + 2 + 3 + 4 + 5 + 6 + 7+ 8 + 9 = 46. So C is the correct answer.\nAnswer: C 90. What\u0026rsquo;s the output ? const container1 = { stack: \u0026#34;Docker\u0026#34;, getStack: function () { return this.stack; }, }; const a = container1.getStack(); const container2 = { stack: \u0026#34;Kubernetes\u0026#34;, getStack: () =\u0026gt; this.stack, }; const b = container2.getStack(); const container3 = { architect: \u0026#34;microservice\u0026#34;, getStack: function () { const stack = [\u0026#34;K8s\u0026#34;]; return stack.map(function (element) { return `${element} - ${this.architect}`; }); }, }; const c = container3.getStack(); const container4 = { architect: \u0026#34;microservice\u0026#34;, getStack: function () { const stack = [\u0026#34;K8s\u0026#34;]; return stack.map((element) =\u0026gt; `${element} - ${this.architect}`); }, }; const d = container4.getStack(); console.log(`${a} -\u0026gt; ${b} -\u0026gt; ${c} -\u0026gt; ${d}`); A: \u0026ldquo;Docker -\u0026gt; Kubernetes -\u0026gt; K8s - undefined -\u0026gt; K8s - microservice\u0026rdquo; B: \u0026ldquo;Docker -\u0026gt; Kubernetes -\u0026gt; K8s - microservice -\u0026gt; K8s - microservice\u0026rdquo; C: \u0026ldquo;Docker -\u0026gt; undefined -\u0026gt; K8s - microservice -\u0026gt; K8s - undefined\u0026rdquo; D: \u0026ldquo;Docker -\u0026gt; undefined -\u0026gt; K8s - undefined -\u0026gt; K8s - microservice\u0026rdquo; Answer\rThe code above might help you revise how the arrow function works in different contexts, especially when dealing with the keyword `this` in JavaScript. There are two crucial takeaway messages you might need to keep in mind when using a function, as follows:\rFirst: The arrow function does not create a new this binding when you use them. It inherits from the parent one(environment) when it is defined.\nSecond: The keyword this could be problematic when it is called in a callback function. For example when implementing setTimeout, setInterval or map, filter, reduce or some, every among others, you will need to pass a callback function. Given that the callback function changes the context, this might therefore change to global object and no longer point to the parent object.\nWe have 4 objects in the snippet above. Each has a simple property and a trivial method. a returns docker because this.stack exactly points to the object declared container1. However, b returns undefined because this in the arrow function points to the global one rather than container2. Why? As we mentioned above, the arrow function does not create a context for itself, so container2.getStack() is still bound to the global object. this.stack becomes undefined as a result.\nNext c gives us K8s - undefined because this is called in the callback function when we use map. A new context is now created by the function map, so this will not point to the object container3. The callback function implemented with map or filter always creates a new context so that this changes.\nWe get K8s - microservice\u0026quot; in d because the arrow function helps us fix the problem caused by switching context as in the object container3. Here are some lessons learned when dealing with context, nested functions (or implementing callback function):\nUse normal function rather than arrow function when you write a method inside an object in which the method does not have a nested function(method) or callback one. Arrow function is not recommended when creating object prototypes, classes along with object literals as well.\nUse the arrow function when you want to access to this, especially in the case of nested method (function) or when using callback function. Otherwise, this will no longer point to the object in these cases (nested method or using callback function with map, filter). There are two other techniques (old-fashion ones) to fix that.\nThere are 3 ways to fix this issue relating to the nested method or callback function: using arrow function as mentioned above, use self = this technique or explicitly binding with call, bind or apply method.\nAnswer: D 91. What\u0026rsquo;s the output ? class Angular { vendor = \u0026#34;Google\u0026#34;; lang = \u0026#34;TypeScript\u0026#34;; overview() { let report = []; report.push(this.lang); report = report.map(function (e) { return e.length + this.vendor.length; }); return report; } } const me = new Angular(); console.log(me.overview()); A: 16 B: 106 C: NaN D: TypeError Answer\rThe code snippet above might help you revise the concept of context in conjunction with the way this is treated in JavaScript. In short, if you implement a callback function for the map method (or in another case: nested function), then you might need to pay attention to this binding.\nWhile report.push(this.lang); works pretty well as this points to the property declared within the class Angular, the line return e.length + this.vendor.length; does not work as this no longer points to vendor we have already declared as a property in the class. The map function creates a new context here. As vendor is undefined inside the callback of the map function, we get TypeError in the console. So D is the correct answer.\nHow to fix that? We can quickly fix this one with one of three techniques: (1) use arrow function for the callback passing to map, (2) temporarily create an alternative this such as let self = this before we call map and use self instead of this. (3) explicitly bind the callback for map using bind, call or apply. We can also pass this as the second parameter for the map function. It also works.\nAnswer: D 92. What\u0026rsquo;s the output ? class FrameWork { constructor(options) { this.options = options ?? [\u0026#34;Angular\u0026#34;, \u0026#34;React\u0026#34;, \u0026#34;Vue\u0026#34;]; } total() { return this.options.length; } filter() { const selected = this.options.filter(function (element) { return element[0] === \u0026#34;A\u0026#34;; }); return selected[0].length + this.total(); } } const app = new FrameWork(); console.log(app.filter()); A: 8 B: 2 C: 10 D: 1 Answer\rThe code challenge above implements a simple class with two methods. There is only one point in the syntax that you might need to pay a bit more attention to is ?? (nullish coalescing operator ) which is quite similar to || (OR).\n?? returns the right-hand side value if the left-hand side is either null or undefined while || does the same thing for falsy value (false, null, undefined, 0, -0, 0n, NaN, \u0026ldquo;\u0026rdquo;).length\nSo as we do not pass anything into the constructor when we initiate the object app, this.options takes the default value [\u0026quot;Angular\u0026quot;, \u0026quot;React\u0026quot;, \u0026quot;Vue\u0026quot;], then the method total() evaluates the length of the array, which is 3.\nfilter() gives us the length of \u0026ldquo;Angular\u0026rdquo;, which is 8. So the final value is 10. The correct answer is C.\nAnswer: C 93. What\u0026rsquo;s the output ? const origin = [[[123], 321], 213]; const manipulated = origin.flat(origin.length); console.log(manipulated.length + origin.length); A: 2 B: 3 C: 4 D: 5 Answer\rThe challenge might hopefully help you have a grip on the native array method flat(), which is quite handy to flatten a nested array. flat() accepts a parameter that defines the level of the nested array you are going to manipulate. By default, this parameter is 1.\nThe method returns a manipulated array. So on the code about origin.length returns 2 given that the array origin has two elements. When flattening the original array named origin with flat(2), we then have a new array [123, 321, 213].\nFinally, we have 5 in the console, and D is the correct answer.\nAnswer: D 94. What\u0026rsquo;s the output ? const pipe = (...funs) =\u0026gt; (v) =\u0026gt; { funs.reduce((res, func) =\u0026gt; { return func(res); }, v); }; const plusFour = (v) =\u0026gt; v + 4; const multiplyBySix = (v) =\u0026gt; v * 6; const divideByTwo = (v) =\u0026gt; v / 2; pipe(plusFour, multiplyBySix, divideByTwo, multiplyBySix, console.log)(1); A: 80 B: 90 C: 100 D: 110 Answer\rThe pipe function can receive an unlimited number of arguments/parameters thanks to rest parameter ...funcs. These arguments/parameters turn out are function as we call the parent function pipe. In JavaScript, it is quite common to pass a function as a parameter of another function.\nPlease call these functions, which are passed to pipe, are child functions. They are then looped and executed one by one with reduce method, no matter how many functions you attempt to pass to pipe. v in the code is simply the argument defined in each child function.\nSo first we have 1, then by executing plusFour it becomes 5. When multiplyBySix is called, the output turns to 30. It becomes 15 when we call divideByTwo. Finally, it becomes 90 as we multiply 15 * 6 when the function multiplyBySix is called again.\nSo B is the correct answer.\nAnswer: B 95. What\u0026rsquo;s the output ? const quickSortRecursive = function (arrayInput) { if (!Array.isArray(arrayInput)) { console.log(\u0026#34;The input data is not an array\u0026#34;); return arrayInput; } const pivotIndex = arrayInput.length - 1; const pivot = arrayInput[pivotIndex]; const left = []; const right = []; let currentItem; for (let i = 0; i \u0026lt; pivotIndex; i++) { currentItem = arrayInput[i]; if (currentItem \u0026lt; pivot) { left.push(currentItem); } else { right.push(currentItem); } } return [...quickSortRecursive(left), pivot, ...quickSortRecursive(right)]; }; console.log(quickSortRecursive([1, 100, 8, 19, 8, 6])); A: [1, 100, 8, 19, 8, 6] B: [1, 6, 8, 8, 19, 100] C: [100, 19, 8, 8, 6, 1] D: 6 Answer\rYou might see a commonly used algorithm here in the code challenge called \u0026ldquo;quicksort\u0026rdquo; in which we apply the strategy \u0026ldquo;divide and conquer\u0026rdquo;. We also use the \u0026ldquo;recursive\u0026rdquo; method when we want to recall the function until it meets our expectations. You might also need to know about the \u0026ldquo;rest parameter\u0026rdquo; in JavaScript, as shown by the three dots (\u0026hellip;) above.\nThe code above helps us to arrange an array in such a way that the value will increase from left to right. Using the quicksort method, we need to create a pivot (likely the first item from right to left or the first item from left to right). First, we divide the original array into two parts: left and right, depending on the value compared to the pivot.\nNext, by calling the function recursively, we keep creating new pivots for the right and left arrays created above for the purpose of sorting value.\nFinally, the original array is sorted from left to right depending on the value.\nSo B is the correct answer.\nAnswer: B 96. What\u0026rsquo;s the output ? const hasOwn = (a) =\u0026gt; { return function (o = { a: 10 }) { o.property = a[1]; return (b) =\u0026gt; { return o.a + o.property + b; }; }; }; console.log(hasOwn([10, 20])()(10)); A: 10 B: 20 C: 30 D: 40 Answer\rWe have quite trivial nested functions. If you are familiar with the concept of closure in JavaScript, then it is not a big deal to read the code above. The final function, named hasOwn, has three parameters, and when we execute it, we only pass two arguments because we have already defined the default value for the second nested function.\nThe final result is as o.a + o.property + b, meaning 10 + 20 + 10. So D is the correct answer.\nAnswer: D ","permalink":"https://shenlong616.github.io/posts/github/in-js-we-trust-by-yeungon/","summary":"In JS we trust - The best way to learn is by building/coding and teaching. I create the challenges to help my friends learn JavaScript and in return it helps me embrace the language in much deeper level. Feel free to clone, fork and pull.\n1. What\u0026rsquo;s the output? function a(x) { x++; return function () { console.log(++x); }; } a(1)(); a(1)(); a(1)(); let x = a(1); x(); x(); x(); A: 1, 2, 3 and 1, 2, 3 B: 3, 3, 3 and 3, 4, 5 C: 3, 3, 3 and 1, 2, 3 D: 1, 2, 3 and 3, 3, 3 Answer\rAnswer: B This question revisits closure - one of the most confusing concepts in JavaScript.","title":"In JS we trust by yeungon"},{"content":"var array = [1, 2, 3]; var array2 = [4, 5, 6]; const randomArray = (arr) =\u0026gt; { return arr[Math.floor(Math.random() * arr.length)]; }; randomArray(array); // 1 -\u0026gt; 3 // randomArray([...array, ...array2]); // 1 -\u0026gt; 6 ","permalink":"https://shenlong616.github.io/posts/javascript/javascript-get-random-item-from-an-array/","summary":"var array = [1, 2, 3]; var array2 = [4, 5, 6]; const randomArray = (arr) =\u0026gt; { return arr[Math.floor(Math.random() * arr.length)]; }; randomArray(array); // 1 -\u0026gt; 3 // randomArray([...array, ...array2]); // 1 -\u0026gt; 6 ","title":"JavaScript: get random item from an Array"},{"content":"There are different ways of building your own anti-DDoS rules for iptables. We will be discussing the most effective iptables DDoS protection methods in this comprehensive tutorial. This guide will teach you how to:\nSelect the best iptables table and chain to stop DDoS attacks\rTweak your kernel settings to mitigate the effects of DDoS attacks\rUse iptables to block most TCP-based DDoS attacks\rUse iptables SYNPROXY to block SYN floods\rPlease note that this article is written for professionals who deal with Linux servers on a daily basis. If you just want to protect your online application from DDoS attacks, you can use our remote protection, a VPS with DDoS protection or a DDoS protected bare metal server.\nWhile one can do a lot with iptables to block DDoS attacks, there isn\u0026rsquo;t a way around actual hardware firewalls (we recently reviewed RioRey DDoS mitigation hardware) to detect and stop large DDoS floods. However, it isn\u0026rsquo;t impossible to filter most bad traffic at line rate using iptables.\nWe\u0026rsquo;ll only cover protection from TCP-based attacks. Most UDP-based attacks are amplified reflection attacks that will exhaust the network interface card of any common server. The only mitigation approach that makes sense against these types of attacks is to block them at the edge or core network or even at the carrier already. If they are able to reach your server, there isn\u0026rsquo;t much you can do against those multi-Gbit/s attacks except to move to a DDoS protected network.\nanti-DDoS iptables What Is IPtables?\nnetfilter iptables (soon to be replaced by nftables) is a user-space command line utility to configure kernel packet filtering rules developed by netfilter. It\u0026rsquo;s the default firewall management utility on Linux systems - everyone working with Linux systems should be familiar with it or have at least heard of it.\niptables can be used to filter certain packets, block source or destination ports and IP addresses, forward packets via NAT and a lot of other things. Most commonly it\u0026rsquo;s used to block destination ports and source IP addresses. Why Your IPtables Anti-DDoS Rules Suck\nTo understand why your current iptables rules to prevent DDoS attacks suck, we first have to dig into how iptables works.\niptables is a command line tool used to set up and control the tables of IP packet filter rules. There are different tables for different purposes. IPtables Tables\nFilter: The filter table is the default and most commonly used table that rules go to if you don\u0026rsquo;t use the -t (\u0026ndash;table) option.\nNat: This table is used for Network Address Translation (NAT). If a packet creates a new connection, the nat table gets checked for rules.\nMangle: The mangle table is used to modify or mark packets and their header information.\nRaw: This table\u0026rsquo;s purpose is mainly to exclude certain packets from connection tracking using the NOTRACK target.\nAs you can see there are four different tables on an average Linux system that doesn\u0026rsquo;t have non-standard kernel modules loaded. Each of these tables supports a different set of iptables chains. IPtables Chains PREROUTING: raw, nat, mangle\nApplies to packets that enter the network interface card (NIC)\rINPUT: filter, mangle\nApplies to packets destined to a local socket\rFORWARD: filter, mangle\nApplies to packets that are being routed through the server\rOUTPUT: raw, filter, nat, mangle\nApplies to packets that the server sends (locally generated)\rPOSTROUTING: nat, mangle\nApplies to packets that leave the server\rDepending on what kind of packets you want to block or modify, you select a certain iptables table and a chain that the selected table supports.\nOf course, we\u0026rsquo;re still missing an explanation of iptables targets (ACCEPT, DROP, REJECT, etc.), but we\u0026rsquo;re assuming that if you\u0026rsquo;re reading this article, you already know how to deal with iptables.\nWe\u0026rsquo;re going to explain why your iptables rules suck to stop DDoS and not teach you how to use iptables. Let\u0026rsquo;s get back to that.\nIf you want to block a DDoS attack with iptables, performance of the iptables rules is extremely important. Most TCP-based DDoS attack types use a high packet rate, meaning the sheer number of packets per second is what causes the server to go down. That\u0026rsquo;s why you want to make sure that you can process and block as many packets per second as possible.\nYou\u0026rsquo;ll find that most if not all guides on how to block DDoS attacks using iptables use the filter table and the INPUT chain for anti-DDoS rules. The issue with this approach is that the INPUT chain is only processed after the PREROUTING and FORWARD chains and therefore only applies if the packet doesn\u0026rsquo;t match any of these two chains.\nThis causes a delay in the filtering of the packet which consumes resources. In conclusion, to make our rules as effective as possible, we need to move our anti-DDoS rules as far up the chains as possible. The first chain that can apply to a packet is the PREROUTING chain, so ideally we\u0026rsquo;ll want to filter the bad packets in this chain already.\nHowever, the filter table doesn\u0026rsquo;t support the PREROUTING chain. To get around this problem, we can simply use the mangle table instead of the filter table for our anti-DDoS iptables rules. It supports most if not all rules that the filter table supports while also supporting all iptables chains.\nSo you want to know why your iptables DDoS protection rules suck? It\u0026rsquo;s because you use the filter table and the INPUT chain to block the bad packets! The best solution to dramatically increase the performance of your iptables rules and therefore the amount of (TCP) DDoS attack traffic they can filter is to use the mangle table and the PREROUTING chain! The Best Linux Kernel Settings to Mitigate DDoS\nAnother common mistake is that people don\u0026rsquo;t use optimized kernel settings to better mitigate the effects of DDoS attacks. Note that this guide focuses on CentOS 7 as the operating system of choice. CentOS 7 includes a recent version of iptables and support of the new SYNPROXY target.\nWe won\u0026rsquo;t cover every single kernel setting that you need to adjust in order to better mitigate DDoS with iptables. Instead, we provide a set of CentOS 7 kernel settings that we would use. Just put the below in your /etc/sysctl.conf file and apply the settings with sysctl -p. Anti-DDoS Kernel Settings (sysctl.conf)\nkernel.printk = 4 4 1 7\rkernel.panic = 10\rkernel.sysrq = 0\rkernel.shmmax = 4294967296\rkernel.shmall = 4194304\rkernel.core_uses_pid = 1\rkernel.msgmnb = 65536\rkernel.msgmax = 65536\rvm.swappiness = 20\rvm.dirty_ratio = 80\rvm.dirty_background_ratio = 5\rfs.file-max = 2097152\rnet.core.netdev_max_backlog = 262144\rnet.core.rmem_default = 31457280\rnet.core.rmem_max = 67108864\rnet.core.wmem_default = 31457280\rnet.core.wmem_max = 67108864\rnet.core.somaxconn = 65535\rnet.core.optmem_max = 25165824\rnet.ipv4.neigh.default.gc_thresh1 = 4096\rnet.ipv4.neigh.default.gc_thresh2 = 8192\rnet.ipv4.neigh.default.gc_thresh3 = 16384\rnet.ipv4.neigh.default.gc_interval = 5\rnet.ipv4.neigh.default.gc_stale_time = 120\rnet.netfilter.nf_conntrack_max = 10000000\rnet.netfilter.nf_conntrack_tcp_loose = 0\rnet.netfilter.nf_conntrack_tcp_timeout_established = 1800\rnet.netfilter.nf_conntrack_tcp_timeout_close = 10\rnet.netfilter.nf_conntrack_tcp_timeout_close_wait = 10\rnet.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20\rnet.netfilter.nf_conntrack_tcp_timeout_last_ack = 20\rnet.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20\rnet.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20\rnet.netfilter.nf_conntrack_tcp_timeout_time_wait = 10\rnet.ipv4.tcp_slow_start_after_idle = 0\rnet.ipv4.ip_local_port_range = 1024 65000\rnet.ipv4.ip_no_pmtu_disc = 1\rnet.ipv4.route.flush = 1\rnet.ipv4.route.max_size = 8048576\rnet.ipv4.icmp_echo_ignore_broadcasts = 1\rnet.ipv4.icmp_ignore_bogus_error_responses = 1\rnet.ipv4.tcp_congestion_control = htcp\rnet.ipv4.tcp_mem = 65536 131072 262144\rnet.ipv4.udp_mem = 65536 131072 262144\rnet.ipv4.tcp_rmem = 4096 87380 33554432\rnet.ipv4.udp_rmem_min = 16384\rnet.ipv4.tcp_wmem = 4096 87380 33554432\rnet.ipv4.udp_wmem_min = 16384\rnet.ipv4.tcp_max_tw_buckets = 1440000\rnet.ipv4.tcp_tw_recycle = 0\rnet.ipv4.tcp_tw_reuse = 1\rnet.ipv4.tcp_max_orphans = 400000\rnet.ipv4.tcp_window_scaling = 1\rnet.ipv4.tcp_rfc1337 = 1\rnet.ipv4.tcp_syncookies = 1\rnet.ipv4.tcp_synack_retries = 1\rnet.ipv4.tcp_syn_retries = 2\rnet.ipv4.tcp_max_syn_backlog = 16384\rnet.ipv4.tcp_timestamps = 1\rnet.ipv4.tcp_sack = 1\rnet.ipv4.tcp_fack = 1\rnet.ipv4.tcp_ecn = 2\rnet.ipv4.tcp_fin_timeout = 10\rnet.ipv4.tcp_keepalive_time = 600\rnet.ipv4.tcp_keepalive_intvl = 60\rnet.ipv4.tcp_keepalive_probes = 10\rnet.ipv4.tcp_no_metrics_save = 1\rnet.ipv4.ip_forward = 0\rnet.ipv4.conf.all.accept_redirects = 0\rnet.ipv4.conf.all.send_redirects = 0\rnet.ipv4.conf.all.accept_source_route = 0\rnet.ipv4.conf.all.rp_filter = 1 These sysctl.conf settings help to maximize the performance of your server under DDoS as well as the effectiveness of the iptables rules that we\u0026rsquo;re going to provide in this guide. The Actual IPtables Anti-DDoS Rules\nConsidering you now know that you need to use the mangle table and the PREROUTING chain as well as optimized kernel settings to mitigate the effects of DDoS attacks, we\u0026rsquo;ll now move on to a couple of example rules to mitigate most TCP DDoS attacks.\nDDoS attacks are complex. There are many different types of DDoS and it\u0026rsquo;s close to impossible to maintain signature-based rules against all of them. But luckily there is something called connection tracking (nf_conntrack kernel module), which can help us to mitigate almost any TCP-based DDoS attack that doesn\u0026rsquo;t use SYN packets that seem legitimate. This includes all types of ACK and SYN-ACK DDoS attacks as well as DDoS attacks that use bogus TCP flags.\nWe\u0026rsquo;ll start with just five simple iptables rules that will already drop many TCP-based DDoS attacks. Block Invalid Packets\niptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP This rule blocks all packets that are not a SYN packet and don\u0026rsquo;t belong to an established TCP connection. Block New Packets That Are Not SYN\niptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP This blocks all packets that are new (don\u0026rsquo;t belong to an established connection) and don\u0026rsquo;t use the SYN flag. This rule is similar to the \u0026ldquo;Block Invalid Packets\u0026rdquo; one, but we found that it catches some packets that the other one doesn\u0026rsquo;t. Block Uncommon MSS Values\niptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP The above iptables rule blocks new packets (only SYN packets can be new packets as per the two previous rules) that use a TCP MSS value that is not common. This helps to block dumb SYN floods. Block Packets With Bogus TCP Flags\niptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP\riptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP The above ruleset blocks packets that use bogus TCP flags, ie. TCP flags that legitimate packets wouldn\u0026rsquo;t use. Block Packets From Private Subnets (Spoofing)\niptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP\riptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP\riptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP\riptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP\riptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP\riptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP\riptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP\riptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP\riptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP These rules block spoofed packets originating from private (local) subnets. On your public network interface you usually don\u0026rsquo;t want to receive packets from private source IPs. These rules assume that your loopback interface uses the 127.0.0.0/8 IP space.\nThese five sets of rules alone already block many TCP-based DDoS attacks at very high packet rates. With the kernel settings and rules mentioned above, you\u0026rsquo;ll be able to filter ACK and SYN-ACK attacks at line rate. Additional Rules\niptables -t mangle -A PREROUTING -p icmp -j DROP This drops all ICMP packets. ICMP is only used to ping a host to find out if it\u0026rsquo;s still alive. Because it\u0026rsquo;s usually not needed and only represents another vulnerability that attackers can exploit, we block all ICMP packets to mitigate Ping of Death (ping flood), ICMP flood and ICMP fragmentation flood.\niptables -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset This iptables rule helps against connection attacks. It rejects connections from hosts that have more than 80 established connections. If you face any issues you should raise the limit as this could cause troubles with legitimate clients that establish a large number of TCP connections.\niptables -A INPUT -p tcp -m conntrack \u0026ndash;ctstate NEW -m limit \u0026ndash;limit 60/s \u0026ndash;limit-burst 20 -j ACCEPT iptables -A INPUT -p tcp -m conntrack \u0026ndash;ctstate NEW -j DROP\nLimits the new TCP connections that a client can establish per second. This can be useful against connection attacks, but not so much against SYN floods because the usually use an endless amount of different spoofed source IPs.\niptables -t mangle -A PREROUTING -f -j DROP This rule blocks fragmented packets. Normally you don\u0026rsquo;t need those and blocking fragments will mitigate UDP fragmentation flood. But most of the time UDP fragmentation floods use a high amount of bandwidth that is likely to exhaust the capacity of your network card, which makes this rule optional and probably not the most useful one.\niptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT\riptables -A INPUT -p tcp --tcp-flags RST RST -j DROP This limits incoming TCP RST packets to mitigate TCP RST floods. Effectiveness of this rule is questionable. Mitigating SYN Floods With SYNPROXY\nSYNPROXY is a new target of iptables that has been added in Linux kernel version 3.12 and iptables 1.4.21. CentOS 7 backported the feature and it\u0026rsquo;s available in its 3.10 default kernel.\nThe purpose of SYNPROXY is to check whether the host that sent the SYN packet actually establishes a full TCP connection or just does nothing after it sent the SYN packet. If it does nothing, it discards the packet with minimal performance impact.\nWhile the iptables rules that we provided above already block most TCP-based attacks, the attack type that can still slip through them if sophisticated enough is a SYN flood. It\u0026rsquo;s important to note that the performance of the rules will always be better if we find a certain pattern or signature to block, such as packet length (-m length), TOS (-m tos), TTL (-m ttl) or strings and hex values (-m string and -m u32 for the more advanced users). But in some rare cases that\u0026rsquo;s not possible or at least not easy to achieve. So in these cases, you can make use of SYNPROXY.\nHere are iptables SYNPROXY rules that help mitigate SYN floods that bypass our other rules:\niptables -t raw -D PREROUTING -p tcp -m tcp --syn -j CT --notrack\riptables -D INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460\riptables -D INPUT -m conntrack --ctstate INVALID -j DROP These rules apply to all ports. If you want to use SYNPROXY only on certain TCP ports that are active (recommended - also you should block all TCP ports that are not in use using the mangle table and PREROUTING chain), you can just add \u0026ndash;dport 80 to each of the rules if you want to use SYNPROXY on port 80 only.\nTo verify that SYNPROXY is working, you can do watch -n1 cat /proc/net/stat/synproxy. If the values change when you establish a new TCP connection to the port you use SYNPROXY on, it works. The Complete IPtables Anti-DDoS Rules\nIf you don\u0026rsquo;t want to copy \u0026amp; paste each single rule we discussed in this article, you can use the below ruleset for basic DDoS protection of your Linux server.\nDrop invalid packets /sbin/iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP Drop TCP packets that are new and are not SYN /sbin/iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP Drop SYN packets with suspicious MSS value /sbin/iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP Block packets with bogus TCP flags /sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP\r/sbin/iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP Block spoofed packets /sbin/iptables -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP\r/sbin/iptables -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP Drop ICMP (you usually don\u0026rsquo;t need this protocol) /sbin/iptables -t mangle -A PREROUTING -p icmp -j DROP Drop fragments in all chains /sbin/iptables -t mangle -A PREROUTING -f -j DROP Limit connections per source IP /sbin/iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset Limit RST packets /sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT\r/sbin/iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP Limit new TCP connections per second per source IP /sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT\r/sbin/iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP Use SYNPROXY on all ports (disables connection limiting rule) #/sbin/iptables -t raw -D PREROUTING -p tcp -m tcp --syn -j CT --notrack\r#/sbin/iptables -D INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460\r#/sbin/iptables -D INPUT -m conntrack --ctstate INVALID -j DROP Bonus Rules\nHere are some more iptables rules that are useful to increase the overall security of a Linux server:\nSSH brute-force protection /sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set\r/sbin/iptables -A INPUT -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP Protection against port scanning /sbin/iptables -N port-scanning\r/sbin/iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN\r/sbin/iptables -A port-scanning -j DROP Conclusion This tutorial demonstrates some of the most powerful and effective methods to stop DDoS attacks using iptables. We\u0026rsquo;ve successfully mitigated DDoS attacks that peaked at multiple million packets per second using these iptables rules.\nEvery single guide on the same topic that we had researched provided inefficient methods to stop DDoS traffic or only a very limited number of iptables rules. If used correctly, iptables is an extremely powerful tool that\u0026rsquo;s able to block different types of DDoS attacks at line-rate of 1GigE NICs and close to line-rate of 10GigE NICs. Don\u0026rsquo;t underestimate the power of iptables!\n","permalink":"https://shenlong616.github.io/posts/github/anti-ddos-iptables-by-scriptzteam/","summary":"There are different ways of building your own anti-DDoS rules for iptables. We will be discussing the most effective iptables DDoS protection methods in this comprehensive tutorial. This guide will teach you how to:\nSelect the best iptables table and chain to stop DDoS attacks\rTweak your kernel settings to mitigate the effects of DDoS attacks\rUse iptables to block most TCP-based DDoS attacks\rUse iptables SYNPROXY to block SYN floods\rPlease note that this article is written for professionals who deal with Linux servers on a daily basis.","title":"anti DDoS iptables by scriptzteam"},{"content":"This repository hosts my hardened version of sysctl.conf. This configuration file aims to provide better security for Linux systems and improves system performance whenever possible. For example, below are some of the features this configuration file provides.\nPrevents kernel pointers from being read Disables Ptrace for all programs Disallows core dumping by SUID/GUID programs Disables IPv4/IPv6 routing Enables BBR TCP congestion control Enables SYN cookies to mitigate SYN flooding attacks Enables IP reverse path filtering for source validation \u0026hellip; Please review the configuration file carefully before applying it. You are responsible for actions done to your system. If you need some guidance understanding what each of the settings is for, sysctl-explorer might come in handy. You may also consult Linux\u0026rsquo;s kernel documentation.\nAssumptions This configuration file is written with a few assumptions about your OS. You can still use this configuration as a template if your OS does not match these assumptions (e.g., set net.ipv4.ip_forward to 1 on a router). Making these assumptions helps us to develop a configuration file with the most number of optimizations enabled for common systems.\nSecurity is valued over performance and convenience The OS does not act as a router The OS is running on a 64-bit system The OS is on a network that is relatively stable (e.g., wired vs. LTE) No debugging features are required (e.g., no need for GDB/kdump) ICMP echo messages are not regarded as harmful Configuration Deployment Linux kernel configuration files are stored in the directory /etc/sysctl.d. Configurations in all files having a suffix of .conf will read by the procps (a.k.a. systemd-sysctl) service. Additionally, the procps service also loads configurations from the following directories.\n/run/sysctl.d /usr/local/lib/sysctl.d /usr/lib/sysctl.d /lib/sysctl.d Files are sorted and read by their file names in lexicographic order. Variables read later will overwrite variables read earlier. For example, configurations in 20-something.conf will be read before 99-sysctl.conf. If a variable exists in both files, values read from 20-something.conf will be overwritten by values read from 99-sysctl.conf.\n# in 20-something.conf\rnet.ipv4.ip_forward = 0\r# in 99-sysctl.conf\rnet.ipv4.ip_forward = 1\r# net.ipv4.ip_forward will be 1 Method 1: Deploy Definitively By default, on most Linux distributions, the /etc/sysctl.d/99-sysctl.conf file is a link to the /etc/sysctl.conf file. Therefore, you may write the variables into the /etc/sysctl.conf. However, since configuration files with a file name that starts with an alphabetical character sort later in the list than 99-sysctl.conf, the changes you make in the /etc/sysctl.conf might not be the final value loaded into the kernel. To make sure that your changes are loaded into the kernel, you would have to make sure that your configuration file\u0026rsquo;s name is lexicographically the last file in /etc/sysctl.d. The filename z-k4yt3x.conf will be used as an example in the code snippet below.\nThis deployment method is suitable for systems that do not expect to have their sysctl configurations updated from this repository anymore. Otherwise, the configuration file\u0026rsquo;s content has to be updated every time a new update form this repository is installed.\n# download the configuration file from GitHub using curl curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf # you may also download with wget or other methods if curl is not available wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf # move the configuration file into the sysctl configuration directory sudo mv ~/sysctl.conf /etc/sysctl.d/z-k4yt3x.conf # make sure the file has correct ownership and permissions sudo chown root:root /etc/sysctl.d/z-k4yt3x.conf sudo chmod 644 /etc/sysctl.d/z-k4yt3x.conf Method 2: Deploy as Template Alternatively, you can use this configuration file as a template. If you name the configuration file something akin to /etc/sysctl.d/98-k4yt3x.conf, you may overwrite values in this configuration file by giving them a new definition the /etc/sysctl.conf file.\nThe advantage of doing this is that you would not have to change this template file\u0026rsquo;s content every time it is updated in this repository. You can drop the template file in and make any modifications in /etc/sysctl.conf.\nThis method\u0026rsquo;s disadvantage is that values from this template might be overwritten by values in other configurations unknowingly. For example, a uhd-usrp2.conf exists on my system, and overwrites the value of net.core.rmem_max and net.core.wmem_max set in previous configuration files. Packages managers can install new configurations as you install a new package or update your system. Therefore, you will have to be careful that other files do not overwrite your variables.\n# download the configuration file from GitHub using curl curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf # you may also download with wget or other methods if curl is not available wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf # move the configuration file into the sysctl configuration directory sudo mv ~/sysctl.conf /etc/sysctl.d/98-k4yt3x.conf # make sure the file has correct ownership and permissions sudo chown root:root /etc/sysctl.d/98-k4yt3x.conf sudo chmod 644 /etc/sysctl.d/98-k4yt3x.conf Method 3: Custom Order (Personal Recommendation) To ensure that the configuration files are read in an order you prefer, you may also rename the files to your preference. For example, you can install this template to /etc/sysctl.d/y-k4yt3x.conf, then make a symbolic link from /etc/sysctl.d/z-sysctl.conf to /etc/sysctl.conf. This ensures that the two files are more likely to be read the last.\n# download the configuration file from GitHub using curl curl https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -o ~/sysctl.conf # you may also download with wget or other methods if curl is not available wget https://raw.githubusercontent.com/k4yt3x/sysctl/master/sysctl.conf -O ~/sysctl.conf # move the configuration file into the sysctl configuration directory sudo mv ~/sysctl.conf /etc/sysctl.d/y-k4yt3x.conf # make sure the file has correct ownership and permissions sudo chown root:root /etc/sysctl.d/y-k4yt3x.conf sudo chmod 644 /etc/sysctl.d/y-k4yt3x.conf # point z-sysctl.conf to /etc/sysctl.conf sudo ln -s /etc/sysctl.conf /etc/sysctl.d/z-sysctl.conf Loading and Verifying the Changes For the changes to be effective, you will have to either reboot your machine or reload the configurations using one of the following commands.\n# instruct sysctl to load settings from the configuration file into the live kernel # this command allows you to see the variables as they are being loaded sudo sysctl --system # alternatively, you can restart the systemd-sysctl service on a system that uses systemd sudo systemctl restart systemd-sysctl # procps is an alias of systemd-sysctl # restarting either one of procps and systemd-sysctl would work sudo systemctl restart procps Afterwards, you may verify your changes by dumping all kernel variables. Replace your.config in the following command with the name of the variable you would like to check.\nsudo sysctl -a | grep \u0026#34;your.config\u0026#34; For example, the following command prints the value of kernel.kptr_restrict.\n$ sudo sysctl -a | grep \u0026#34;kernel.kptr_restrict\u0026#34; kernel.kptr_restrict = 2 Short URL for Downloading sysctl.conf For convenience, I have pointed the URL https://k4t.io/sysctl to the sysctl.conf file. You may therefore download the sysctl.conf file with the following command. However, be sure to check the file\u0026rsquo;s integrity after downloading it if you choose to download using this method.\ncurl -L k4t.io/sysctl -o sysctl.conf Others sysctl.conf ","permalink":"https://shenlong616.github.io/posts/github/hardened-sysctl-configuration-by-k4yt3x/","summary":"This repository hosts my hardened version of sysctl.conf. This configuration file aims to provide better security for Linux systems and improves system performance whenever possible. For example, below are some of the features this configuration file provides.\nPrevents kernel pointers from being read Disables Ptrace for all programs Disallows core dumping by SUID/GUID programs Disables IPv4/IPv6 routing Enables BBR TCP congestion control Enables SYN cookies to mitigate SYN flooding attacks Enables IP reverse path filtering for source validation \u0026hellip; Please review the configuration file carefully before applying it.","title":"Hardened sysctl Configuration by k4yt3x"},{"content":"Tools git-tip - A handy CLI to make optimum use of these tips. (Here in Docker container) P.S: All these commands are tested on git version 2.7.4 (Apple Git-66).\nEveryday Git in twenty commands or so git help everyday Show helpful guides that come with Git git help -g Search change by content git log -S\u0026#39;\u0026lt;a term in the source\u0026gt;\u0026#39; Show changes over time for specific file git log -p \u0026lt;file_name\u0026gt; Remove sensitive data from history, after a push git filter-branch --force --index-filter \u0026#39;git rm --cached --ignore-unmatch \u0026lt;path-to-your-file\u0026gt;\u0026#39; --prune-empty --tag-name-filter cat -- --all \u0026amp;\u0026amp; git push origin --force --all Sync with remote, overwrite local changes git fetch origin \u0026amp;\u0026amp; git reset --hard origin/master \u0026amp;\u0026amp; git clean -f -d List of all files till a commit git ls-tree --name-only -r \u0026lt;commit-ish\u0026gt; Git reset first commit git update-ref -d HEAD Reset: preserve uncommitted local changes git reset --keep \u0026lt;commit\u0026gt; List all the conflicted files git diff --name-only --diff-filter=U List of all files changed in a commit git diff-tree --no-commit-id --name-only -r \u0026lt;commit-ish\u0026gt; Unstaged changes since last commit git diff Changes staged for commit git diff --cached Alternatives:\ngit diff --staged Show both staged and unstaged changes git diff HEAD List all branches that are already merged into master git branch --merged master Quickly switch to the previous branch git checkout - Alternatives:\ngit checkout @{-1} Remove branches that have already been merged with master git branch --merged master | grep -v \u0026#39;^\\*\u0026#39; | xargs -n 1 git branch -d Alternatives:\ngit branch --merged master | grep -v \u0026#39;^\\*\\| master\u0026#39; | xargs -n 1 git branch -d # will not delete master if master is not checked out List all branches and their upstreams, as well as last commit on branch git branch -vv Track upstream branch git branch -u origin/mybranch Delete local branch git branch -d \u0026lt;local_branchname\u0026gt; Delete remote branch git push origin --delete \u0026lt;remote_branchname\u0026gt; Alternatives:\ngit push origin :\u0026lt;remote_branchname\u0026gt; git branch -dr \u0026lt;remote/branch\u0026gt; Create local tag git tag \u0026lt;tag-name\u0026gt; Delete local tag git tag -d \u0026lt;tag-name\u0026gt; Delete remote tag git push origin :refs/tags/\u0026lt;tag-name\u0026gt; Undo local changes with the last content in head git checkout -- \u0026lt;file_name\u0026gt; Revert: Undo a commit by creating a new commit git revert \u0026lt;commit-ish\u0026gt; Reset: Discard commits, advised for private branch git reset \u0026lt;commit-ish\u0026gt; Reword the previous commit message git commit -v --amend See commit history for just the current branch git cherry -v master Amend author. git commit --amend --author=\u0026#39;Author Name \u0026lt;email@address.com\u0026gt;\u0026#39; Reset author, after author has been changed in the global config. git commit --amend --reset-author --no-edit Changing a remote\u0026rsquo;s URL git remote set-url origin \u0026lt;URL\u0026gt; Get list of all remote references git remote Alternatives:\ngit remote show Get list of all local and remote branches git branch -a Get only remote branches git branch -r Stage parts of a changed file, instead of the entire file git add -p Get git bash completion curl -L http://git.io/vfhol \u0026gt; ~/.git-completion.bash \u0026amp;\u0026amp; echo \u0026#39;[ -f ~/.git-completion.bash ] \u0026amp;\u0026amp; . ~/.git-completion.bash\u0026#39; \u0026gt;\u0026gt; ~/.bashrc What changed since two weeks? git log --no-merges --raw --since=\u0026#39;2 weeks ago\u0026#39; Alternatives:\ngit whatchanged --since=\u0026#39;2 weeks ago\u0026#39; See all commits made since forking from master git log --no-merges --stat --reverse master.. Pick commits across branches using cherry-pick git checkout \u0026lt;branch-name\u0026gt; \u0026amp;\u0026amp; git cherry-pick \u0026lt;commit-ish\u0026gt; Find out branches containing commit-hash git branch -a --contains \u0026lt;commit-ish\u0026gt; Alternatives:\ngit branch --contains \u0026lt;commit-ish\u0026gt; Git Aliases git config --global alias.\u0026lt;handle\u0026gt; \u0026lt;command\u0026gt; git config --global alias.st status Saving current state of tracked files without commiting git stash Alternatives:\ngit stash push Saving current state of unstaged changes to tracked files git stash -k Alternatives:\ngit stash --keep-index git stash push --keep-index Saving current state including untracked files git stash -u Alternatives:\ngit stash push -u git stash push --include-untracked Saving current state with message git stash push -m \u0026lt;message\u0026gt; Alternatives:\ngit stash push --message \u0026lt;message\u0026gt; Saving current state of all files (ignored, untracked, and tracked) git stash -a Alternatives:\ngit stash --all git stash push --all Show list of all saved stashes git stash list Show the contents of any stash in patch form git stash show -p \u0026lt;stash@{n}\u0026gt; Apply any stash without deleting from the stashed list git stash apply \u0026lt;stash@{n}\u0026gt; Apply last stashed state and delete it from stashed list git stash pop Alternatives:\ngit stash apply stash@{0} \u0026amp;\u0026amp; git stash drop stash@{0} Delete all stored stashes git stash clear Alternatives:\ngit stash drop \u0026lt;stash@{n}\u0026gt; Grab a single file from a stash git checkout \u0026lt;stash@{n}\u0026gt; -- \u0026lt;file_path\u0026gt; Alternatives:\ngit checkout stash@{0} -- \u0026lt;file_path\u0026gt; Show all tracked files git ls-files -t Show all untracked files git ls-files --others Show all ignored files git ls-files --others -i --exclude-standard Create new working tree from a repository (git 2.5) git worktree add -b \u0026lt;branch-name\u0026gt; \u0026lt;path\u0026gt; \u0026lt;start-point\u0026gt; Create new working tree from HEAD state git worktree add --detach \u0026lt;path\u0026gt; HEAD Untrack files without deleting git rm --cached \u0026lt;file_path\u0026gt; Alternatives:\ngit rm --cached -r \u0026lt;directory_path\u0026gt; Before deleting untracked files/directory, do a dry run to get the list of these files/directories git clean -n Forcefully remove untracked files git clean -f Forcefully remove untracked directory git clean -f -d Update all the submodules git submodule foreach git pull Alternatives:\ngit submodule update --init --recursive git submodule update --remote Show all commits in the current branch yet to be merged to master git cherry -v master Alternatives:\ngit cherry -v master \u0026lt;branch-to-be-merged\u0026gt; Rename a branch git branch -m \u0026lt;new-branch-name\u0026gt; Alternatives:\ngit branch -m [\u0026lt;old-branch-name\u0026gt;] \u0026lt;new-branch-name\u0026gt; Rebases \u0026lsquo;feature\u0026rsquo; to \u0026lsquo;master\u0026rsquo; and merges it in to master git rebase master feature \u0026amp;\u0026amp; git checkout master \u0026amp;\u0026amp; git merge - Archive the master branch git archive master --format=zip --output=master.zip Modify previous commit without modifying the commit message git add --all \u0026amp;\u0026amp; git commit --amend --no-edit Prunes references to remove branches that have been deleted in the remote. git fetch -p Alternatives:\ngit remote prune origin Delete local branches that has been squash and merged in the remote. git branch -vv | grep \u0026#39;: gone]\u0026#39; | awk \u0026#39;{print \u0026lt;!-- @doxie.inject start --\u0026gt;}\u0026#39; | xargs git branch -D Retrieve the commit hash of the initial revision. git rev-list --reverse HEAD | head -1 Alternatives:\ngit rev-list --max-parents=0 HEAD git log --pretty=oneline | tail -1 | cut -c 1-40 git log --pretty=oneline --reverse | head -1 | cut -c 1-40 Visualize the version tree. git log --pretty=oneline --graph --decorate --all Alternatives:\ngitk --all git log --graph --pretty=format:\u0026#39;%C(auto) %h | %s | %an | %ar%d\u0026#39; Visualize the tree including commits that are only referenced from reflogs git log --graph --decorate --oneline $(git rev-list --walk-reflogs --all) Deploying git tracked subfolder to gh-pages git subtree push --prefix subfolder_name origin gh-pages Adding a project to repo using subtree git subtree add --prefix=\u0026lt;directory_name\u0026gt;/\u0026lt;project_name\u0026gt; --squash git@github.com:\u0026lt;username\u0026gt;/\u0026lt;project_name\u0026gt;.git master Get latest changes in your repo for a linked project using subtree git subtree pull --prefix=\u0026lt;directory_name\u0026gt;/\u0026lt;project_name\u0026gt; --squash git@github.com:\u0026lt;username\u0026gt;/\u0026lt;project_name\u0026gt;.git master Export a branch with history to a file. git bundle create \u0026lt;file\u0026gt; \u0026lt;branch-name\u0026gt; Import from a bundle git clone repo.bundle \u0026lt;repo-dir\u0026gt; -b \u0026lt;branch-name\u0026gt; Get the name of current branch. git rev-parse --abbrev-ref HEAD Ignore one file on commit (e.g. Changelog). git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog Stash changes before rebasing git rebase --autostash Fetch pull request by ID to a local branch git fetch origin pull/\u0026lt;id\u0026gt;/head:\u0026lt;branch-name\u0026gt; Alternatives:\ngit pull origin pull/\u0026lt;id\u0026gt;/head:\u0026lt;branch-name\u0026gt; Show the most recent tag on the current branch. git describe --tags --abbrev=0 Show inline word diff. git diff --word-diff Show changes using common diff tools. git difftool [-t \u0026lt;tool\u0026gt;] \u0026lt;commit1\u0026gt; \u0026lt;commit2\u0026gt; \u0026lt;path\u0026gt; Don‚Äôt consider changes for tracked file. git update-index --assume-unchanged \u0026lt;file_name\u0026gt; Undo assume-unchanged. git update-index --no-assume-unchanged \u0026lt;file_name\u0026gt; Clean the files from .gitignore. git clean -X -f Restore deleted file. git checkout \u0026lt;deleting_commit\u0026gt; -- \u0026lt;file_path\u0026gt; Restore file to a specific commit-hash git checkout \u0026lt;commit-ish\u0026gt; -- \u0026lt;file_path\u0026gt; Always rebase instead of merge on pull. git config --global pull.rebase true Alternatives:\n#git \u0026lt; 1.7.9 git config --global branch.autosetuprebase always List all the alias and configs. git config --list Make git case sensitive. git config --global core.ignorecase false Add custom editors. git config --global core.editor \u0026#39;$EDITOR\u0026#39; Auto correct typos. git config --global help.autocorrect 1 Check if the change was a part of a release. git name-rev --name-only \u0026lt;SHA-1\u0026gt; Dry run. (any command that supports dry-run flag should do.) git clean -fd --dry-run Marks your commit as a fix of a previous commit. git commit --fixup \u0026lt;SHA-1\u0026gt; Squash fixup commits normal commits. git rebase -i --autosquash Skip staging area during commit. git commit --only \u0026lt;file_path\u0026gt; Interactive staging. git add -i List ignored files. git check-ignore * Status of ignored files. git status --ignored Commits in Branch1 that are not in Branch2 git log Branch1 ^Branch2 List n last commits git log -\u0026lt;n\u0026gt; Alternatives:\ngit log -n \u0026lt;n\u0026gt; Reuse recorded resolution, record and reuse previous conflicts resolutions. git config --global rerere.enabled 1 Open all conflicted files in an editor. git diff --name-only | uniq | xargs $EDITOR Count unpacked number of objects and their disk consumption. git count-objects --human-readable Prune all unreachable objects from the object database. git gc --prune=now --aggressive Instantly browse your working repository in gitweb. git instaweb [--local] [--httpd=\u0026lt;httpd\u0026gt;] [--port=\u0026lt;port\u0026gt;] [--browser=\u0026lt;browser\u0026gt;] View the GPG signatures in the commit log git log --show-signature Remove entry in the global config. git config --global --unset \u0026lt;entry-name\u0026gt; Checkout a new branch without any history git checkout --orphan \u0026lt;branch_name\u0026gt; Extract file from another branch. git show \u0026lt;branch_name\u0026gt;:\u0026lt;file_name\u0026gt; List only the root and merge commits. git log --first-parent Change previous two commits with an interactive rebase. git rebase --interactive HEAD~2 List all branch is WIP git checkout master \u0026amp;\u0026amp; git branch --no-merged Find guilty with binary search git bisect start # Search start git bisect bad # Set point to bad commit git bisect good v2.6.13-rc2 # Set point to good commit|tag git bisect bad # Say current state is bad git bisect good # Say current state is good git bisect reset # Finish search Bypass pre-commit and commit-msg githooks git commit --no-verify List commits and changes to a specific file (even through renaming) git log --follow -p -- \u0026lt;file_path\u0026gt; Clone a single branch git clone -b \u0026lt;branch-name\u0026gt; --single-branch https://github.com/user/repo.git Create and switch new branch git checkout -b \u0026lt;branch-name\u0026gt; Alternatives:\ngit branch \u0026lt;branch-name\u0026gt; \u0026amp;\u0026amp; git checkout \u0026lt;branch-name\u0026gt; git switch -c \u0026lt;branch-name\u0026gt; Ignore file mode changes on commits git config core.fileMode false Turn off git colored terminal output git config --global color.ui false Specific color settings git config --global \u0026lt;specific command e.g branch, diff\u0026gt; \u0026lt;true, false or always\u0026gt; Show all local branches ordered by recent commits git for-each-ref --sort=-committerdate --format=\u0026#39;%(refname:short)\u0026#39; refs/heads/ Find lines matching the pattern (regex or string) in tracked files git grep --heading --line-number \u0026#39;foo bar\u0026#39; Clone a shallow copy of a repository git clone https://github.com/user/repo.git --depth 1 Search Commit log across all branches for given text git log --all --grep=\u0026#39;\u0026lt;given-text\u0026gt;\u0026#39; Get first commit in a branch (from master) git log --oneline master..\u0026lt;branch-name\u0026gt; | tail -1 Alternatives:\ngit log --reverse master..\u0026lt;branch-name\u0026gt; | head -6 Unstaging Staged file git reset HEAD \u0026lt;file-name\u0026gt; Force push to Remote Repository git push -f \u0026lt;remote-name\u0026gt; \u0026lt;branch-name\u0026gt; Adding Remote name git remote add \u0026lt;remote-nickname\u0026gt; \u0026lt;remote-url\u0026gt; List all currently configured remotes git remote -v Show the author, time and last revision made to each line of a given file git blame \u0026lt;file-name\u0026gt; Group commits by authors and title git shortlog Forced push but still ensure you don\u0026rsquo;t overwrite other\u0026rsquo;s work git push --force-with-lease \u0026lt;remote-name\u0026gt; \u0026lt;branch-name\u0026gt; Show how many lines does an author contribute git log --author=\u0026#39;_Your_Name_Here_\u0026#39; --pretty=tformat: --numstat | gawk \u0026#39;{ add += \u0026lt;!-- @doxie.inject start --\u0026gt;; subs += \u0026lt;!-- @doxie.inject end --\u0026gt;; loc += \u0026lt;!-- @doxie.inject start --\u0026gt; - \u0026lt;!-- @doxie.inject end --\u0026gt; } END { printf \u0026#34;added lines: %s removed lines: %s total lines: %s \u0026#34;, add, subs, loc }\u0026#39; - Alternatives:\ngit log --author=\u0026#39;_Your_Name_Here_\u0026#39; --pretty=tformat: --numstat | awk \u0026#39;{ add += \u0026lt;!-- @doxie.inject start --\u0026gt;; subs += \u0026lt;!-- @doxie.inject end --\u0026gt;; loc += \u0026lt;!-- @doxie.inject start --\u0026gt; - \u0026lt;!-- @doxie.inject end --\u0026gt; } END { printf \u0026#34;added lines: %s, removed lines: %s, total lines: %s \u0026#34;, add, subs, loc }\u0026#39; - # on Mac OSX Revert: Reverting an entire merge git revert -m 1 \u0026lt;commit-ish\u0026gt; Number of commits in a branch git rev-list --count \u0026lt;branch-name\u0026gt; Alias: git undo git config --global alias.undo \u0026#39;!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f\u0026#39; Add object notes git notes add -m \u0026#39;Note on the previous commit....\u0026#39; Show all the git-notes git log --show-notes=\u0026#39;*\u0026#39; Apply commit from another repository git --git-dir=\u0026lt;source-dir\u0026gt;/.git format-patch -k -1 --stdout \u0026lt;SHA1\u0026gt; | git am -3 -k Specific fetch reference git fetch origin master:refs/remotes/origin/mymaster Find common ancestor of two branches git merge-base \u0026lt;branch-name\u0026gt; \u0026lt;other-branch-name\u0026gt; List unpushed git commits git log --branches --not --remotes Alternatives:\ngit log @{u}.. git cherry -v Add everything, but whitespace changes git diff --ignore-all-space | git apply --cached Edit [local/global] git config git config [--global] --edit blame on certain range git blame -L \u0026lt;start\u0026gt;,\u0026lt;end\u0026gt; Show a Git logical variable. git var -l | \u0026lt;variable\u0026gt; Preformatted patch file. git format-patch -M upstream..topic Get the repo name. git rev-parse --show-toplevel logs between date range git log --since=\u0026#39;FEB 1 2017\u0026#39; --until=\u0026#39;FEB 14 2017\u0026#39; Exclude author from logs git log --perl-regexp --author=\u0026#39;^((?!excluded-author-regex).*) Generates a summary of pending changes git request-pull v1.0 https://git.ko.xz/project master:for-linus List references in a remote repository git ls-remote git://git.kernel.org/pub/scm/git/git.git Backup untracked files. git ls-files --others -i --exclude-standard | xargs zip untracked.zip List all git aliases git config -l | grep alias | sed \u0026#39;s/^alias\\.//g\u0026#39; Alternatives:\ngit config -l | grep alias | cut -d \u0026#39;.\u0026#39; -f 2 Show git status short git status --short --branch Checkout a commit prior to a day ago git checkout master@{yesterday} Push the current branch to the same name on the remote repository git push origin HEAD Push a new local branch to remote repository and track git push -u origin \u0026lt;branch_name\u0026gt; Change a branch base git rebase --onto \u0026lt;new_base\u0026gt; \u0026lt;old_base\u0026gt; Use SSH instead of HTTPs for remotes git config --global url.\u0026#39;git@github.com:\u0026#39;.insteadOf \u0026#39;https://github.com/\u0026#39; Update a submodule to the latest commit cd \u0026lt;path-to-submodule\u0026gt; git pull origin \u0026lt;branch\u0026gt; cd \u0026lt;root-of-your-main-project\u0026gt; git add \u0026lt;path-to-submodule\u0026gt; git commit -m \u0026#34;submodule updated\u0026#34; Prevent auto replacing LF with CRLF git config --global core.autocrlf false ","permalink":"https://shenlong616.github.io/posts/github/git-tips/","summary":"Tools git-tip - A handy CLI to make optimum use of these tips. (Here in Docker container) P.S: All these commands are tested on git version 2.7.4 (Apple Git-66).\nEveryday Git in twenty commands or so git help everyday Show helpful guides that come with Git git help -g Search change by content git log -S\u0026#39;\u0026lt;a term in the source\u0026gt;\u0026#39; Show changes over time for specific file git log -p \u0026lt;file_name\u0026gt; Remove sensitive data from history, after a push git filter-branch --force --index-filter \u0026#39;git rm --cached --ignore-unmatch \u0026lt;path-to-your-file\u0026gt;\u0026#39; --prune-empty --tag-name-filter cat -- --all \u0026amp;\u0026amp; git push origin --force --all Sync with remote, overwrite local changes git fetch origin \u0026amp;\u0026amp; git reset --hard origin/master \u0026amp;\u0026amp; git clean -f -d List of all files till a commit git ls-tree --name-only -r \u0026lt;commit-ish\u0026gt; Git reset first commit git update-ref -d HEAD Reset: preserve uncommitted local changes git reset --keep \u0026lt;commit\u0026gt; List all the conflicted files git diff --name-only --diff-filter=U List of all files changed in a commit git diff-tree --no-commit-id --name-only -r \u0026lt;commit-ish\u0026gt; Unstaged changes since last commit git diff Changes staged for commit git diff --cached Alternatives:","title":"Git tips"},{"content":"\rArray 1. Generate an Array\rCreate an empty array of length n\nvar arr = new Array(3); // result: arr = [undefined, undefined, undefined] Create an empty array of length n \u0026amp; fill value x\nvar arr = [...Array(3).fill(1)]; var arr2 = [...Array(5).fill(1, 0, 3)]; /* result: arr = [1, 1, 1] arr2 = [1, 1, 1, undefined, undefined] */ Create an array containing 0...n\nvar arr = [...Array.keys(5)]; // result: arr = [0, 1, 2, 3, 4] Create an array containing 1...n\nvar arr = []; for (let i = 0; arr.push(++i) \u0026lt; 4; ); var arr2 = Array.from({ length: 4 }, (_, i) =\u0026gt; i + 1); var arr3 = Array.from({ length: 4 }, (_, i) =\u0026gt; i * 2); var arr4 = Array.from({ length: 4 }, () =\u0026gt; Math.random()); /* result: arr = [1, 2, 3, 4] arr2 = [1, 2, 3, 4] arr3 = [0, 2, 4, 6] arr4 = [0.211, 0.5123, 0.612, 0.8921] */ 2. Extract Unique Values of Array\rvar arr = [1, 2, 2, 3, 5, 5, 4]; var newArr = [...new Set(arr)]; // result: newArr = [1, 2, 3, 5, 4] 3. Shuffle Elements from Array\rvar arr = [1, 2, 3, 4, 5]; var newArr = arr.sort(() =\u0026gt; Math.random() - 0.5); // result: newArr = [3, 1, 2, 4, 5] 4. Flatten a Multidimensional Array\rvar arr = [1, [2, 3], [4, 5, 6], 7]; var newArr = [].concat(...arr); // result: [1, 2, 3, 4, 5, 6, 7] 5. Resize an Array\rThe length array isn\u0026rsquo;t a read only property.\nvar arr = [1, 2, 3, 4, 5]; arr.length = 2; var arr2 = [1, 2, 3, 4, 5]; arr2.length = 0; var arr3 = [1, 2, 3, 4, 5]; arr3.length = 7; /* result: arr = [1, 2] arr2 = [] arr3 = [1, 2, 3, 4, 5, undefined, undefined] */ 6. Random an Item in Array\rvar arr = [2, 4, 5]; var item = arr[Math.floor(Math.random() * arr.length)]; 7. Remove an Item from Array\rvar arr = [1, 2, 3]; // Not Recommended delete arr[1]; // arr = [1, undefined, 3], length = 3 // Recommended arr.splice(1, 1); // arr = [1, 3], length = 2 Object 1. Dynamic Property Name\rconst dynamic = \u0026#34;age\u0026#34;, dynamicValue = 18; var obj = { name: \u0026#34;Dyno\u0026#34;, [dynamic]: dynamicValue, }; // result: obj = { name: \u0026#39;Dyno\u0026#39;, age: 18 } 2. Clone an Object\rShallow copy (Not Recommended)\nUse the = operator to copy object 1 into object 2. These 2 objects point to the same memory area (reference). Therefore, if we change object 1, object 2 will also change.\nvar obj1 = { a: 1, b: 2 }; var obj2 = obj1; // obj2 = { a: 1, b: 2 } obj1.a = 3; // change value of a property console.log(obj1); // { a: 3, b: 2 } console.log(obj2); // { a: 3, b: 2 } =\u0026gt; property a of obj2 changed üôÇ‚ùó console.log(obj3); // { a: 3, b: 2 } =\u0026gt; property a of obj2 changed üôÇ‚ùó Deep copy\nWay 1: Use Spread operator {...} or Object.assign() to fix \u0026ldquo;Shallow copy\u0026rdquo;. Issue: Nested objects still have shallow copy problem.\nvar obj1 = { a: 1, b: 2, c: { nested: 3 } }; var obj2 = { ...obj1 }; // obj2 = { a: 1, b: 2, c: { nested: 3 } } var obj3 = Object.assign({}, obj1); // obj3 = { a: 1, b: 2, c: { nested: 3 } } obj1.b = 3; obj1.c.nested = 4; console.log(obj1); // { a: 1, b: 3, c: { nested: 4 } } console.log(obj2); // { a: 1, b: 2, c: { nested: 4 } } üôÇ console.log(obj3); // { a: 1, b: 2, c: { nested: 4 } } üôÇ Way 2 (Recommended): Use JSON.stringify() \u0026amp; JSON.parse() to solve the above problems.\nvar obj1 = { a: 1, b: 2, c: { nested: 3 } }; var obj2 = JSON.parse(JSON.stringify(obj1)); // obj2 = { a: 1, b: 2, c: { nested: 3 } } obj1.b = 3; obj1.c.nested = 4; console.log(obj1); // { a: 1, b: 3, c: { nested: 4 } } console.log(obj2); // { a: 1, b: 2, c: { nested: 3 } } üòâüòò Destructuring (ES6+) 1. With Array\rvar [a, b] = [1, 2]; // same: var a = 1, b = 2; var [a, b, c] = [1, 2, 3, 4, 5]; // same: var a = 1, b = 2, c = 3; var [a, , c] = [1, 2, 3, 4, 5]; // same: var a = 1, c = 3 // ignore values var [a, b, ...rest] = [1, 2, 3, 4, 5]; // same: var a = 1, b = 2, rest = [4, 5] // use \u0026#34;rest params ES6\u0026#34; var [a, b, c] = [1, 2]; // same: var a = 1, b = 2, c = undefined; var [a, b = 0, c = 0] = [1, 2]; // same: var a = 1, b = 2, c = 0; // declare and set default value var [a, b, [c, d], e] = [1, 2, [3, 4], 5]; // same: var a = 1, b = 2, c = 3, d = 4, e = 5 // nested array destructuring 2. With Object\rvar person = { name: \u0026#34;Dyno\u0026#34;, age: 18 }; var { name, age } = person; // same: var name = person.name, age = person.age; var { name = \u0026#34;Anonymous\u0026#34;, age = 1, address = \u0026#34;HCM city\u0026#34; } = person; // same: var name = person.name, age = person.age, address: \u0026#39;HCM city\u0026#39; // declare and set default value var { name: personName, age: personAge } = person; // same: var personName = person.name, personAge = person.age // decleare and change variable name console.log({ name, age }); // same: console.log({ name: name, age: age }) var person = { name: \u0026#34;Dyno\u0026#34;, age: 18, infor: { address: \u0026#34;HCM\u0026#34;, phone: \u0026#34;123\u0026#34; } }; var { name, age, infor: { address, phone }, } = person; // same: name = person.name, age = person.agem, address = person.infor.address, phone = person.infor.phone // nested object destructuring Operator 1. Optional chaining (?.)\r\u0026ldquo;The optional chaining operator ?. enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.\u0026rdquo; MDN\nconst person = { name: \u0026#34;Dyno\u0026#34;, age: 18, sayHello: function () { console.log(\u0026#34;Hello\u0026#34;); }, }; // ‚ùó Wrong way console.log(person.infor.address); // ‚ùå Uncaught TypeError: Cannot read property \u0026#39;address\u0026#39; of undefined // ‚úÖ Right way (check condition) if (person.infor) console.log(person.infor.address); // Not log // ‚úÖ Right way (use ?.) console.log(person.infor?.address); // undefined // Optional chaining with function calls console.log(person.sayHello?.()); // Hello console.log(person.callPhone?.()); // undefined // A chain Optional chaining console.log(person.infor?.address?.province?.name); // undefined // syntax obj.val?.prop; obj.val?.[expr]; obj.arr?.[index]; obj.func?.(args); 2. Nullish coalescing operator (??)\r\u0026ldquo;The nullish coalescing operator ?? is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\u0026rdquo; MDN\nvar a = null ?? \u0026#34;Default\u0026#34;; // a = \u0026#39;Default\u0026#39; var a = false ?? \u0026#34;Default\u0026#34;; // a = false 3. Logical OR (||)\rvar a = 1, b = 2; if (a \u0026gt; 2 || b \u0026gt; 1) console.log(\u0026#34;Dyno\u0026#34;); // result: Dyno The OR operator || is a logical operator that returns its right-hand side operand when its left-hand side operand is falsy, and otherwise returns its left-hand side operand.\nvar a = null || \u0026#34;Default\u0026#34;; // a = \u0026#39;Default\u0026#39; var a = false || \u0026#34;Default\u0026#34;; // a = \u0026#39;Default\u0026#39; 4. Logical AND (\u0026\u0026)\rlet a = true, b = true, c = false; if (a \u0026amp;\u0026amp; b) console.log(\u0026#34;Hello\u0026#34;); // Hello (a, b = true) if (a \u0026amp;\u0026amp; c) console.log(\u0026#34;Dyno\u0026#34;); // not log (c = false) // other usage function sayHi() { console.log(\u0026#34;Hi\u0026#34;); } a \u0026amp;\u0026amp; sayHi(); // Hi c \u0026amp;\u0026amp; sayHi(); // false 5. Double tilde operator (~~)\rlet num = 2.6; console.log(~~num); // 2 = Math.floor(2) 6. Logical Assignment Operator ES12 (||=, ??=) a ||= b; // same a = a || b; a ??= b; // same a = a ?? b; 7. Numeric separator ES12 (_)\rconst n = 1_000_000_000; // same: n = 1000000000; Comparison 1. Use === instead of ==\rThe operator == (!=) will automatically cast if 2 variables are not of the same type, then compare. The === (!==) operator compares the value and the type =\u0026gt; === faster than ==.\n1 == \u0026#39;1\u0026#39; // true 1 === \u0026#39;1\u0026#39; // false 0 == false // true 0 === false // false \u0026#39;\u0026#39; == false // true \u0026#39;\u0026#39; === false // false [] == 0 // true [] === 0 // false 2. The difference between isNaN() and Number.isNaN() The isNaN() method (is Not a Number ?) use to check if a variable is a Number. The Number.isNaN() (is NaN ?) method use to check if a variable is NaN\nisNaN(\u0026#34;string\u0026#34;); // true, \u0026#39;string\u0026#39; is not Number isNaN([]); // true, [] is not Number isNaN(0 / 0); // true, 0/0 is not Number isNaN(1); // false, 1 is Number Number.isNaN(\u0026#34;string\u0026#34;); // false, \u0026#39;string\u0026#39; is not NaN Number.isNaN([]); // false, [] is not NaN Number.isNaN(0 / 0); // true, 0/0 is NaN Number.isNaN(NaN); // true Others 1. Swapping use Destructuring\rlet a = 1, b = 2; [a, b] = [b, a]; // result: a = 2, b = 1; 2. Create function that returns only 1 object\rconst fn = () =\u0026gt; ({ obj: 1 }); /* same: const fn = () =\u0026gt; { return { obj: 1 } } */ 3. Immediately Invoked Function Expression (IIFE)\rThe function will execute automatically when you create it.\n// Way 1: var res = ()(function(){ // do something... console.log(\u0026#34;Hello\u0026#34;); return true; })(); // result: Hello, res = true; // Way 2: var res = (() =\u0026gt; { console.log(\u0026#39;Hello\u0026#39;); return true; })(); // result: Hello, res = true; 4. typeof vs instanceof typeof: return a string that represents the primitive type of a variable.\ninstanceof: check in all the prototypes chain the constructor it returns true if it‚Äôs found and false if not.\nvar arr = [1, 2, 3]; console.log(typeof arr); // \u0026#34;object\u0026#34; console.log(arr instanceof Array); // true typeof 1; // \u0026#34;number\u0026#34; typeof NaN; // \u0026#34;number\u0026#34; typeof \u0026#34;str\u0026#34;; // \u0026#34;string\u0026#34; typeof true; // \u0026#34;boolean\u0026#34; typeof {}; // \u0026#34;object\u0026#34; typeof []; // \u0026#34;object\u0026#34; typeof null; // \u0026#34;object\u0026#34; typeof undefined; // \u0026#34;undefined\u0026#34; typeof function name() {}; // \u0026#34;function\u0026#34; 5. Falsy\rA Falsy value is a value that is considered false when encountered in a Boolean context . MDN\nComplete list of JavaScript falsy values false, 0, -0, 0n, \u0026quot;\u0026quot;, '', ``, NaN, null, undefined, document.all\nFalsy value bypass the if block. Ex:\nif (null) { } else { console.log(\u0026#34;Falsy\u0026#34;); } const a = undefined || \u0026#34;Falsy\u0026#34;; // result: Falsy, a = \u0026#34;Falsy\u0026#34; Filter out Falsy values\nconst arr = [1, \u0026#34;Dyno\u0026#34;, false, 0, true, NaN, 2000]; var filteredArr = arr.filter(Boolean); // result: filteredArr = [1, \u0026#34;Dyno\u0026#34;, true, 2000] 6. Template string `${}`\rconst name = \u0026#34;Dyno\u0026#34;; const hello1 = \u0026#34;Hello \u0026#34; + name + \u0026#34;, how are you?\u0026#34;; const hello2 = `Hello ${name}, how are you?`; // template string. 7. Rounding number to n decimal place\rvar num = 25.0420001; console.log(typeof num); // \u0026#34;number\u0026#34; num = num.toFixed(2); // num = \u0026#34;25.04\u0026#34; console.log(typeof num); // ‚ùó \u0026#34;string\u0026#34; 8. Check variable - convert a variable to Boolean (!! operator)\rconsole.log(!!null); // false console.log(!!undefined); // false console.log(!!1); // true ","permalink":"https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-tuannguyen2504/","summary":"Array 1. Generate an Array\rCreate an empty array of length n\nvar arr = new Array(3); // result: arr = [undefined, undefined, undefined] Create an empty array of length n \u0026amp; fill value x\nvar arr = [...Array(3).fill(1)]; var arr2 = [...Array(5).fill(1, 0, 3)]; /* result: arr = [1, 1, 1] arr2 = [1, 1, 1, undefined, undefined] */ Create an array containing 0...n\nvar arr = [...Array.keys(5)]; // result: arr = [0, 1, 2, 3, 4] Create an array containing 1.","title":"JavaScript tips \u0026 tricks by TuanNguyen2504"},{"content":"Disclaimer: This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.\nLooping over a range of numbers Using range() is better than using a list (ex. [1, 2, 3]), because the list takes up memory space, whereas the range() function generates values on demand, thus taking a fixed amount of memory whatever the size of the elements is:\nfor i in range(10): print(i**2) takes the same memory space as:\nfor i in range(100000): print(i**2) Note: This function used to create a list in python2, and xrange() used to do what range() currently does, but it got changed, so range() in python3 is xrange() in python2.\nLooping backwards Use the function reversed():\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] for lang in reversed(langs): print(lang) # prints rust, kotlin, c++, java, python, c Looping over a collection and indices Use the function enumerate():\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] for i,lang in enumerate(langs): print(f\u0026#39;{i} --\u0026gt; {lang}\u0026#39;) # prints # 0 --\u0026gt; c # 1 --\u0026gt; python # 2 --\u0026gt; java # 3 --\u0026gt; c++ # 4 --\u0026gt; kotlin # 5 --\u0026gt; rust Looping over two collections Use the function zip(). It returns tuples of the elements until one of the iterables is exahusted:\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] numbers = [1, 2, 3] for number, lang in zip(numbers, langs): print(f\u0026#39;{number} --\u0026gt; {lang}\u0026#39;) # prints # 1 --\u0026gt; c # 2 --\u0026gt; python # 3 --\u0026gt; java Note: It takes any number of iterables and \u0026ldquo;zips\u0026rdquo; them into tuples.\nNote 2: It\u0026rsquo;s important to note that it generates tuples on demand, so it reuses memory space (it used to create a third list in python2, and izip() used to do what zip() does now in python3).\nLooping in sorted order Use the function sorted() or the method sort() of iterables.\nBy default, it sorts the iterable in ascending order:\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] for lang in sorted(langs): print(lang) # or langs.sort() print(*langs) # prints c c++ java kotlin python rust The second method sorts the iterable IN-PLACE, whilst the first returns a different iterable.\nBoth the functions can take 2 extra parameters which can specify a comparison function and if the iterable should be reversed:\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] for lang in sorted(langs, key=len, reverse=True): print(lang) # or langs.sort(key=len, reverse=True) print(*langs) # prints kotlin python java rust c++ c # notice that kotlin and python might be interchanged because they have the same size, same java and rust Partial functions A partial function is a function who has some parameters \u0026ldquo;frozen\u0026rdquo;, in the sense that they are preset. The other parameters must be given when the partial function is called:\nfrom functools import partial def func(x, y, z): return x + 2*y + 3*z my_func = partial(func, 2, 3) # assign (preset) 2 to x, 3 to y my_func(3) # equivalent to func(2, 3, 3) # prints 17 my_func(4) # equivalent to func(2, 3, 4) # prints 20 Fastest way to format multiple strings Going from fastest to slowest, they are:\nf\u0026#39;{s} {t}\u0026#39; # fastest s + \u0026#39; \u0026#39; + t \u0026#39; \u0026#39;.join((s, t)) \u0026#39;%s %s\u0026#39; % (s, t) \u0026#39;{} {}\u0026#39;.format(s, t) Template(\u0026#39;$s $t\u0026#39;).substitute(s=s, t=t) # slowest Note: f-strings were added in Python 3.6.\nIterating until a sentinel value This method has 2 forms:\niter(iterable) - this form simply returns an iterator from the iterable. You can call next() on the iterator and iterate through the iterable. langs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] ir = iter(langs) print(next(ir)) # prints c print(next(ir)) # prints python iter(callable, sentinel) - this form executes the function callable until it returns sentinel value. def func(langs = []): langs.append(\u0026#39;c\u0026#39;) return len(langs) ir = iter(func, 5) next(ir) # prints 1 next(ir) # prints 2 next(ir) # prints 3 next(ir) # prints 4 next(ir) # raise StopIteration Read 80 characters from file f into line and append to text until f.read() returns '':\ntext = list() for line in iter(partial(f.read, 80), \u0026#39;\u0026#39;): text.append(line) For else in Python Search a certain value in an iterable and do something if it is not there:\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] for lang in langs: if lang == \u0026#39;scala\u0026#39;: print(\u0026#39;We found Scala!\u0026#39;) break else: print(\u0026#39;Scala is not in the list...\u0026#39;) Note: Careful if you ever come back to this kind of code. Don\u0026rsquo;t indent the else statement by accident!!!\nLooping over dictionary keys d = { \u0026#39;foo\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;bar\u0026#39;: \u0026#39;java\u0026#39;, \u0026#39;baz\u0026#39;: \u0026#39;rust\u0026#39; } # cannot mutate dictionary here for k in d: print(k) # free to mutate the keys and values for k in list(d.keys()): if k == \u0026#39;foo\u0026#39;: del d[k] Note: d.keys() used to make a list copy of the keys, so there was no problem iterating and mutating the original dictionary at the same time. In modern Python3, d.keys() returns an iterable and can no longer be used to iterate and mutate a dictionary at the same time. To go around this, just wrap the method into a list as in the example.\nNote 2: There is an \u0026lsquo;alternative\u0026rsquo; to this, but it has worse performance and memory usage:\nd = { \u0026#39;foo\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;bar\u0026#39;: \u0026#39;java\u0026#39;, \u0026#39;baz\u0026#39;: \u0026#39;rust\u0026#39; } # Don\u0026#39;t do this, performance is bad as it copies every element in a dictionary and can be really bad for really big dictionaries s = {k: v for k, v in d.items() if k != \u0026#39;foo\u0026#39;} Looping over dictionary keys and values d = { \u0026#39;foo\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;bar\u0026#39;: \u0026#39;java\u0026#39;, \u0026#39;baz\u0026#39;: \u0026#39;rust\u0026#39; } for k, v in d.items(): print(f\u0026#39;{k} --\u0026gt; {v}\u0026#39;) The items() method returns and iterator, so it uses the same amount of memory no matter how big the dictionary is.\nNote: In python2, the items() method used to return a list of tuples, and the iteritems() used to do what items() does now in python3.\nConstruct a dictionary from 2 iterables Use the zip() method to pack 2 iterables into a zip object, then use the dict() method to make that into a dictionary.\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] colors = [\u0026#39;blue\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;red\u0026#39;] d = dict(zip(langs, colors)) print(d) # prints {\u0026#39;c\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;python\u0026#39;: \u0026#39;green\u0026#39;, \u0026#39;java\u0026#39;: \u0026#39;red\u0026#39;} s = dict(enumerate(colors)) print(s) # prints {1: \u0026#39;blue\u0026#39;, 2: \u0026#39;green\u0026#39;, 3: \u0026#39;red\u0026#39;} Populating a dictionary with default data (Counting with dictionary) Use the defaultdict() method imported from collections. When a key is not in the dictionary, it creates a new key that has the default value.\nfrom collections import defaultdict colors = [\u0026#39;red\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;red\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;red\u0026#39;] d = defaultdict(int) for color in colors: d[color] += 1 print(dict(d)) # prints {\u0026#39;blue\u0026#39;: 1, \u0026#39;green\u0026#39;: 2, \u0026#39;red\u0026#39;: 3} Note: This is a faster approach than setdefault() on most cases and faster than get() in all cases. Also, defaultdict() seems to work faster on native types like int or string and slower on dict or list. That being said, there are times when you cannot use defaultdict() and have to use either setdefault() or get(), for example when the default value of a certain key depends on the key itself, so defaultdict() cannot be used from the beginning to have a default value for every new key.\ncolors = [\u0026#39;red\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;red\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;red\u0026#39;] d = {} for color in colors: d[color] = d.setdefault(color, 2 if color == \u0026#39;red\u0026#39; else 0) + 1 print(d) # prints {\u0026#39;blue\u0026#39;: 1, \u0026#39;green\u0026#39;: 2, \u0026#39;red\u0026#39;: 5} Note 2: A case where get() accomplishes nicely what setdefault() and defaultdict() would do in a more complicated manner is when you have to return a default value from a dictionary if the key is not in it.\nd = { 1: \u0026#39;Alice\u0026#39;, 2: \u0026#39;Bob\u0026#39;, 3: \u0026#39;Carla\u0026#39; } def hello(id): return f\u0026#39;Hi, {d.get(id, \u0026#34;random person\u0026#34;)}\u0026#39; print(hello(1)) # prints Hi, Alice print(hello(4)) # prints Hi, random person Creating a list with n elements Say you want to create a list with 100 elements of 0. You can just do:\nlst = [0] * 100 print(lst) Ternary operator in Python This:\n#include \u0026lt;stdio.h\u0026gt; int main() { int x; int y = 1; x = (y == 1 ? 1 : 0); printf(\u0026#34;%d\u0026#34;, x); return 0; } can be written like this in python:\ny = 1 x = (1 if y == 1 else 0) print(x) Grouping data with dictionaries Say you want to group the items in a list based on some comparison function, for example len():\nfrom collections import defaultdict names = [\u0026#39;julia\u0026#39;, \u0026#39;mark\u0026#39;, \u0026#39;thomas\u0026#39;, \u0026#39;rachel\u0026#39;, \u0026#39;alex\u0026#39;, \u0026#39;maria\u0026#39;] d = defaultdict(list) for name in names: key = len(name) d[key].append(name) print(dict(d)) # prints {5: [\u0026#39;julia\u0026#39;, \u0026#39;maria\u0026#39;], 4: [\u0026#39;mark\u0026#39;, \u0026#39;alex\u0026#39;], 6: [\u0026#39;thomas\u0026#39;, \u0026#39;rachel\u0026#39;]} All you have to do to group based on some other function is change the key to something else.\nUnpacking sequences p = \u0026#39;alex\u0026#39;, \u0026#39;blue\u0026#39;, 20, \u0026#39;c\u0026#39; # same as p = (\u0026#39;alex\u0026#39;, \u0026#39;blue\u0026#39;, 20, \u0026#39;c\u0026#39;) name, color, age, lang = p print(p) # prints a tuple - (\u0026#39;alex\u0026#39;, \u0026#39;blue\u0026#39;, 20, \u0026#39;c\u0026#39;) print(name, color, age, lang) # prints alex blue 20 c Note: In the same manner, swapping 2 variables in python might be the most elegant way out of all the languages:\nx, y = 1, 2 # swap x and y x, y = y, x print(x, y) # prints 2 1 Concatenating strings Use the join() method to concatenate strings from an iterable.\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] # join the strings from langs, having \u0026#39;, \u0026#39; as separator text = \u0026#39;, \u0026#39;.join(langs) print(text) # prints c, python, java, c++, kotlin, rust Atomicity of builtin data types Most (!not all) of the builtin data types methods are implemented using C function calls, so that makes it atomic.\nFor a better explanaton check here.\nAlso, dictionaries\u0026rsquo; popitem() is atomic, while pop() may not, based on the key type (if the key is not a builtin data type, Python has to call that object\u0026rsquo;s __hash__() implementation), so better use popitem() where atomicity is needed.\nd = { \u0026#39;foo\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;bar\u0026#39;: \u0026#39;java\u0026#39;, \u0026#39;baz\u0026#39;: \u0026#39;rust\u0026#39; } while d: key, value = d.popitem() print(f\u0026#39;{key} --\u0026gt; {value}\u0026#39;) # prints # foo --\u0026gt; c # bar --\u0026gt; java # baz --\u0026gt; rust # d is empty at the end Note: If unsure, don\u0026rsquo;t hesitate to use mutexes!\nLinking and overriding dictionaries with defaults When you have a dictionary that has some default values and you want to override it with another dictionary, use ChainMap(). ChainMap() has the advantage that it doesn\u0026rsquo;t copy anything, it just \u0026ldquo;links\u0026rdquo; the dictionaries, using the initial memory (this also means that any change in the initial dictionary will be reflected in the ChainMap() as well).\nfrom collections import ChainMap defaults = { \u0026#39;bar\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;foo\u0026#39;: \u0026#39;java\u0026#39; } overwritten = { \u0026#39;foo\u0026#39;: \u0026#39;rust\u0026#39;, \u0026#39;barn\u0026#39;: \u0026#39;c++\u0026#39; } d = ChainMap(overwritten, defaults) print(dict(d)) # prints {\u0026#39;foo\u0026#39;: \u0026#39;rust\u0026#39;, \u0026#39;barn\u0026#39;: \u0026#39;c++\u0026#39;, \u0026#39;bar\u0026#39;: \u0026#39;c\u0026#39;} Note: Don\u0026rsquo;t use copy() and then update(), it is really bad performance-wise and can be replaced in 99% of the cases by a ChainMap().\nd1 = { \u0026#39;bar\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;foo\u0026#39;: \u0026#39;java\u0026#39; } d2 = { \u0026#39;foo\u0026#39;: \u0026#39;rust\u0026#39;, \u0026#39;barn\u0026#39;: \u0026#39;c++\u0026#39; } # Don\u0026#39;t do this!! d = d1.copy() d.update(d2) Note 2: For a better example when this is useful, see this.\nOrdered dictionary A dictionary is not guaranteed to preserve the order of insertion. It actually optimizes keys for faster lookup. However there is one way to have a dictionary preserve insertion order, using OrderedDict() from collections.\nfrom collections import OrderedDict d = OrderedDict() d[\u0026#39;bar\u0026#39;] = \u0026#39;c\u0026#39; d[\u0026#39;foo\u0026#39;] = \u0026#39;java\u0026#39; d[\u0026#39;baz\u0026#39;] = \u0026#39;rust\u0026#39; print(dict(d)) # prints {\u0026#39;bar\u0026#39;: \u0026#39;c\u0026#39;, \u0026#39;foo\u0026#39;: \u0026#39;java\u0026#39;, \u0026#39;baz\u0026#39;: \u0026#39;rust\u0026#39;} Note: Since Python 3.7, regular dicts have guaranteed ordering. More here. Note however that they don\u0026rsquo;t completely replace OrderedDicts, since they have extra features:\nfrom collections import OrderedDict a = {1: 1, 2: 2} b = {2: 2, 1: 1} c = OrderedDict(a) d = OrderedDict(b) print(a == b) # returns True print(c == d) # returns False since OrderedDicts are order-sensitive, and regular dicts are not Also, OrderedDicts have methods to change order of elements, while regular dicts don\u0026rsquo;t.\nUsing deque instead of a list when updating Deques (double ended queues) are really fast in python3. They are implemented using doubly-linked lists, so inserting and removing at the end or at the beginning is O(1) complexity. Lists are implemented as normal arrays, so they have to sometimes realloc() to accomodate for the number of elements (only sometimes because by default it realloc()s more memory at the time than necessary\u0026rsquo;), so that makes them have O(n) complexity when inserting or removing at the beginning because they have to copy the rest of the elements.\nGenerally, updating a sequence is MUCH faster when using a deque() as opposed to using a list() (though keep in mind that accessing a random element in a deque() is expensive, whereas accessing a random element in a list() is O(1)).\nfrom collections import deque # Wrong! langs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] del langs[0] langs.pop(0) langs.insert(0, \u0026#39;scala\u0026#39;) # Right! langs = deque([\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;]) del langs[0] langs.popleft(0) langs.appendleft(0, \u0026#39;scala\u0026#39;) Temporary contexts Usually there is the case that code like this is written in other languages:\nfrom decimal import getcontext, setcontext old_context = getcontext().copy() getcontext().prec = 50 print(Decimal(355) / Decimal(113)) setcontext(old_context) This can easily be replaced with contexts:\nfrom decimal import localcontext, Context with localcontext(Context(prec=50)): print(Decimal(355) / Decimal(113)) Other examples:\nWriting or reading from file f = open(\u0026#39;data.txt\u0026#39;) try: data = f.read() # do something with data finally: f.close() can be replaced with:\nwith open(\u0026#39;data.txt\u0026#39;) as f: data = f.read() # do something with data Deleting a file (getting rid of the try-except-pass idiom): try: os.remove(\u0026#39;sometempfile.tmp\u0026#39;) except OSError: pass can be replaced with:\nfrom contextlib import suppress with suppress(FileNotFoundError): os.remove(\u0026#39;sometempfile.tmp\u0026#39;) Note: suppress() is a reentrant context manager. More info here.\nUsing a lock lock = threading.Lock() lock.acquire() try: # critical section finally: lock.release() can be replaced with:\nlock = threading.Lock() with lock: # critical section Note: For reentrant lock context manager, see threading.RLock.\nRedirecting output from stdout to file with open(\u0026#39;help.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: sldstdout = sys.stdout sys.stdout = f try: help(pow) finally: sys.stdout = oldstdout can be replaced with:\nwith open(\u0026#39;help.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: with redirect_stdout(f): help(pow) Note: redirect_stdout() is also a reentrant context manager.\nMore on context managers here.\nUsing the cache for optimized function calls For example, looking up a webpage numerous times is expensive, and usually the result is the same. So use the lru_cache() decorator:\nfrom functools import lru_cache @lru_cache def web_lookup(url): return urllib.urlopen(url).read() More can be found here.\nTest a sequence or generator for truthness Using the any() function, you can check if at least one value in the iterable is True. It applies the bool() function to every element.\nfalse_lst = [0, False, \u0026#39;\u0026#39;, 0.0, [], {}, None] # all of these return False when using bool() on them print(any(false_lst)) # prints False true_lst = [1, True, \u0026#39;x\u0026#39;, 3.14, [\u0026#39;x\u0026#39;], {\u0026#39;a\u0026#39;: \u0026#39;b\u0026#39;}] # all of these return True when using bool() on them print(any(true_lst)) # prints True falst_lst.append(-1) # any integer different from 0 is considered True print(any(false_lst)) # prints True Note: This function shortcircuits, meaning the first time it finds True it returns; it does NOT check for the rest of the values to be True.\nNote 2: It is really useful with generators:\nprint(any(range(1000000)) # prints True after 2 values evaluated, as range() is a generator print(any([range(1000000)])) # prints True after the whole list of 1000000 elements has been initialized, as range() has to populate the list first There is another function, all(), that does what it says: it tests for all the elements in the sequence to be True, and works much in the same way as any().\nUse namedtuples instead of tuples Aside from the fact that namedtuple()s are more verbose, they also offer better usage, as they can be treated as regular tuples, classes or even dictionaries.\nFor example, having a point:\npt1 = (2, 3) print(pt1[0], pt1[1]) # prints 2 3 can be replaced with the better alternative namedtuple():\nfrom collections import namedtuple Point = namedtuple(\u0026#39;Point\u0026#39;, \u0026#39;x y\u0026#39;) # a tuple named \u0026#39;Point\u0026#39; with attributes \u0026#39;x\u0026#39; and \u0026#39;y\u0026#39; # alternatively this means the exact same thing # Point = namedtuple(\u0026#39;Point\u0026#39;, [\u0026#39;x\u0026#39;, \u0026#39;y\u0026#39;]) pt1 = Point(2, 3) print(pt1) # prints Point(x=2, y=3) print(pt1.x, pt1.y) # prints 2 3 print(pt1[0], pt1[1]) # prints 2 3 print(dict(pt1._asdict())) # prints {\u0026#39;x\u0026#39;: 2, \u0026#39;y\u0026#39;: 3} print(pt1._replace(x=50)) # prints Point(x=50, y=3) # Note however that _replace() returns a modified copy. The original is still a tuple, so it cannot be modified Another common example:\nfrom collections import namedtuple Person = namedtuple(\u0026#39;Person\u0026#39;, \u0026#39;age color lang\u0026#39;) person = Person(31, \u0026#39;blue\u0026#39;, \u0026#39;c\u0026#39;) print(person) # prints Person(age=31, color=\u0026#39;blue\u0026#39;, lang=\u0026#39;c\u0026#39;) Note: When the values from a namedtuple() are invalid (e.g. having one of the fields named class or having the same field twice), it throws a ValueError. To avoid this you can possibly provide a third parameter named rename. If set to True, it will rename the field that is incorrect.\nfrom collections import namedtuple Person = namedtuple(\u0026#39;Person\u0026#39;, \u0026#39;age color age\u0026#39;, rename=True) print(Person(31, \u0026#39;blue\u0026#39;, \u0026#39;whatever\u0026#39;)) # prints Person(age=31, color=\u0026#39;blue\u0026#39;, _2=\u0026#39;whatever\u0026#39;) Note 2: Since Python 3.8, _asdict() method returns a regular dictionary, as regular dicts now have guaranteed ordering based on insertion (since Python 3.7).\nProfiling code with cProfile Since Python 3.8, cProfile can be used as a context manager, making it extremely easy to profile code.\nimport cProfile with cProfile.Profile() as profiler: # code to be profiled profiler.print_stats() Pretty print stuff One way to format the output is to use the pprint module.\nfrom pprint import pprint d = { \u0026#39;b\u0026#39;: [*range(5)], \u0026#39;c\u0026#39;: [] \u0026#39;a\u0026#39;: \u0026#34;Here is a long string\u0026#34;.split(\u0026#34; \u0026#34;), } pprint(d, indent=2, width=20, compact=True) # prints # { \u0026#39;a\u0026#39;: [ \u0026#39;Here\u0026#39;, # \u0026#39;is\u0026#39;, \u0026#39;a\u0026#39;, # \u0026#39;long\u0026#39;, # \u0026#39;string\u0026#39;], # \u0026#39;b\u0026#39;: [ 0, 1, 2, 3, # 4], # \u0026#39;c\u0026#39;: []} Note: Since Python 3.8, the parameter sort_dicts was added (True by default):\nfrom pprint import pprint d = { \u0026#39;b\u0026#39;: [*range(5)], \u0026#39;c\u0026#39;: [] \u0026#39;a\u0026#39;: \u0026#34;Here is a long string\u0026#34;.split(\u0026#34; \u0026#34;), } pprint(d, indent=2, width=20, compact=True, sort_dicts=False) # prints # { \u0026#39;b\u0026#39;: [ 0, 1, 2, 3, # 4], # \u0026#39;c\u0026#39;: [], # \u0026#39;a\u0026#39;: [ \u0026#39;Here\u0026#39;, # \u0026#39;is\u0026#39;, \u0026#39;a\u0026#39;, # \u0026#39;long\u0026#39;, # \u0026#39;string\u0026#39;]} More info here.\nThe \u0026ldquo;is\u0026rdquo; operator vs \u0026ldquo;==\u0026rdquo; operator The is operator checks if 2 objects point to the same memory address. The equality operator == checks if 2 objects are equal.\nlangs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] copy = langs # now copy and langs point to the same memory object print(copy == langs) # prints True print(copy is langs) # prints True other_copy = list(langs) # other_copy has a copy of langs, but point to different memory objects print(other_copy == langs) # prints True print(other_copy is langs) # prints False List slices You can use slices to replace elements, delete elements or make a copy of a list.\nDelete items: langs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] del langs[0:3] print(langs) # prints [\u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] Replace elements of a list without creating a new list object langs = [\u0026#39;c\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;, \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] copy = langs print(copy is langs) # prints True langs[:] = [41, 42, 43] print(copy is langs) # prints True print(copy) # prints [41, 42, 43] langs = [1, 2, 3] print(copy is langs) # prints False, langs points to new list (new memory object) Make a (shallow) copy of a list langs = [\u0026#39;c\u0026#39;, [\u0026#39;python\u0026#39;, \u0026#39;java\u0026#39;], \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] copy = langs[:] copy[1][0] = \u0026#39;some other lang\u0026#39; print(langs) # prints [\u0026#39;c\u0026#39;, [\u0026#39;some other lang\u0026#39;, \u0026#39;java\u0026#39;], \u0026#39;c++\u0026#39;, \u0026#39;kotlin\u0026#39;, \u0026#39;rust\u0026#39;] Note: If you need a deep copy consider using the function deepcopy() from the module copy.\nDeep and shallow copies There are 2 types of copies in Python. One is the shallow copy, that works very similar to how assigning to pointers works in C (they only reference the object they point to, changing one also changes the other), and the other is the deep copy, which makes a perfect copy of the object.\nimport copy list1 = [1, 2, [3, 4], 5] list2 = copy.copy(list1) list2[2][1] = 6 list2[0] = 7 # shallow copy, list2 holds references to objects in list1, changing one also changes the other print(list1) # prints [1, 2, [3, 6], 5] print(list2) # prints [7, 2, [3, 6], 5] list3 = copy.deepcopy(list1) list3[2][1] = 8 list3[0] = 9 # deep copy, list3 is a perfect copy of list1 with no references to it, changing one doesn\u0026#39;t change the other print(list1) # prints [1, 2, [3, 6], 5] print(list3) # prints [9, 2, [3, 8], 5] More about deep and shallow copies here.\nPython\u0026rsquo;s built-in http server Python has a built-in http server; it can be super useful if you want to preview a website without going the hurdle of starting an apache or nginx server.\nThis serves the website in the current directory at address localhost:8000:\npython3 -m http.server Type annotations Python 3.5 supports type annotations, which can ensure better readability. Note however that they are only there for the programmer to acknowledge, Python does not care and won\u0026rsquo;t change anything based on them.\ndef func(s1: int, s2: int = 42) -\u0026gt; int: return s1 + s2 They can be changed to anything you want:\ndef func2(page: \u0026#39;web page\u0026#39;, request: \u0026#39;web request\u0026#39;) -\u0026gt; \u0026#39;web response\u0026#39;: # return response Note: Passing 2 strings to func() is perfectly valid, as Python does NOT care at all about these annotations (in this case the function would return the 2 strings concatenated).\nNote 2: You can use stuff like Mypy to enforce this kind of behaviour, so Python becomes statically-typed!\nMore info about type annotations can be found in PEP 484.\nNote 3: Since Python 3.6, PEP 526, more support for type annotations was added. Again, Python will always be a dynamically-typed language, but tools can be used to ensure static typing.\nCounter for iterables This is an easy method to find the most common elements in an iterable:\nimport collections count = collections.Counter(\u0026#39;some random string\u0026#39;) print(c.most_common()) # prints [(\u0026#39;s\u0026#39;, 2), (\u0026#39;o\u0026#39;, 2), (\u0026#39;m\u0026#39;, 2), (\u0026#39; \u0026#39;, 2), (\u0026#39;r\u0026#39;, 2), (\u0026#39;n\u0026#39;, 2), (\u0026#39;e\u0026#39;, 1), (\u0026#39;a\u0026#39;, 1), (\u0026#39;d\u0026#39;, 1), (\u0026#39;t\u0026#39;, 1), (\u0026#39;i\u0026#39;, 1), (\u0026#39;g\u0026#39;, 1)] print(c.most_common(3)) # prints [(\u0026#39;s\u0026#39;, 2), (\u0026#39;o\u0026#39;, 2), (\u0026#39;m\u0026#39;, 2)] More info can be found in the Python docs for the Counter class.\nPermutations of an iterable Get permutations of an iterable:\nimport itertools lst = list(itertools.permutations(\u0026#39;abc\u0026#39;, 2)) print(lst) # prints [(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;), (\u0026#39;a\u0026#39;, \u0026#39;c\u0026#39;), (\u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;), (\u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;), (\u0026#39;c\u0026#39;, \u0026#39;a\u0026#39;), (\u0026#39;c\u0026#39;, \u0026#39;b\u0026#39;)] The function takes an iterable and another optional argument specifying the length of one permutation.\nGetting the representation of an object as a string Python has 2 methods to transform an object into a string (similar to other languages toString() methods); those are str() and repr().\nimport datetime now = datetime.date.today() print(str(now)) # prints \u0026#39;2020-02-12\u0026#39; print(repr(now)) # prints \u0026#39;datetime.date(2020, 2, 12)\u0026#39; The function str() is made for clarity, while the function repr() is made to be unambiguos about what the object represents.\nThe python console uses repr().\nPython disassembler Python has a built-in disassembler. It is very rudimentary, but it can help debug some code.\nimport dis def func(text): return \u0026#39;This is some text \\\u0026#39;\u0026#39; + str(text) + \u0026#39;\\\u0026#39;.\u0026#39; dis.dis(func) # 4 0 LOAD_CONST 1 (\u0026#34;This is some text \u0026#39;\u0026#34;) # 2 LOAD_GLOBAL 0 (str) # 4 LOAD_FAST 0 (text) # 6 CALL_FUNCTION 1 # 8 BINARY_ADD # 10 LOAD_CONST 2 (\u0026#34;\u0026#39;.\u0026#34;) # 12 BINARY_ADD # 14 RETURN_VALUE More info in the docs.\nLambda functions Lambda functions, as in other functional programming languages, are anonymous functions that don\u0026rsquo;t have a name. They are useful for small code that doesn\u0026rsquo;t require more than a line or two, and they are generally passed as arguments to other functions.\nOne such example that applies to all functional programming languages is the map() function. It takes a callable as the first argument (read function, lambda function, something that can be called), and an iterable as the second argument, and applies the function to each of the elements of the iterable, returning a new iterable.\nobj = map(lambda string: string.lower(), [\u0026#39;StRiNg\u0026#39;, \u0026#39;ANOTHER string\u0026#39;]) print(list(obj)) # prints [\u0026#39;string\u0026#39;, \u0026#39;another string\u0026#39;] This code does the exact same thing:\ndef stringlower(string): return string.lower() lst = [\u0026#39;StRiNg\u0026#39;, \u0026#39;ANOTHER string\u0026#39;] obj = [] for item in lst: obj.append(stringlower(item)) print(obj) # prints [\u0026#39;string\u0026#39;, \u0026#39;another string\u0026#39;] Another example:\npower_func = lambda x, y: x ** y print(power_func(2, 3)) # prints 8 x = (lambda a, b: a - b)(5, 4) print(x) # prints 1 Ip addresses in Python Python has an interesting module to work with Ip addresses:\nimport ipaddress address = ipaddress.ip_address(\u0026#39;192.168.100.14\u0026#39;) print(repr(address)) # prints IPv4Address(\u0026#39;192.168.100.14\u0026#39;) # you can even have arithmetic operations done on this address print(address + 3) # prints 192.168.100.17 More info here.\nSubclasses and subinstances In Python, you can check if a class is a subclass of some other class:\nclass BaseClass(): pass class SubClass(BaseClass): pass print(issubclass(SubClass, BaseClass)) # prints True print(issubclass(SubClass, object)) # prints True You can also check if some instance is an instance of the specified class or another sublass of that class:\nclass BaseClass(): pass class SubClass(BaseClass): pass obj = SubClass() print(isinstance(obj, BaseClass)) # prints True Asterisk (*) and slash (\\) in function definition (positional- and keyword-only function parameters) In Python 3, you can add an asterisk and a slash to a function definition with special meaning. Asterisk marks keyword-only parameters (that means parameters that can be given to the function just by keyword, not by position), while slash marks positional-only parameters (meaning parameters cannot be given by keyword, but by position only).\ndef func(positional_only_argument, /, positional_and_keyword_argument, *, keyword_only_argument): return positional_only_argument + positional_and_keyword_argument + keyword_only_argument print(func(1, 2, 3)) # Type error, third parameter should be keyword print(func(positional_only_argument = 1, 2, 3)) # Type error, first parameter is positional only print(func(1, 2, keyword_only_argument = 3)) # fine, prints 6 print(func(1, positional_and_keyword_argument = 2, keyword_only_argument = 3)) # fine, prints 6 Info and rationale about these 2 types of parameters can be found in PEP 3102 - keyword-only parameters and in PEP 570 - positional-only parameters.\nNote: Until Python 3.8, positional-only arguments could only be used in library functions. Starting from Python 3.8, they can be used in programmer constructions too.\nPython interactive shell Say you wrote some Python code like this:\ndef min(a, b): return a if a \u0026lt; b else b You can launch it in an interactive shell with python -i main.py, which is similar to calling only python in the command line, with the key difference that the python shell contains your function in the global scope as well. Go ahead, try it!\nPython debugger Python has a debugger, similar to gdb. One way to use it is to simply add import pdb; pdb.set_trace() in your program wherever u want the debugger to stop program execution.\nIn Python 3.7, the debugger can also be called on a script like this: python -m pdb script.py, and it stops when the module loads, just before executing the first line of the script.\ndef add(a, b): return a + b import pdb pdb.set_trace() # code execution will stop here, and the program will enter the debugger print(add(1, 2)) For more information on how to operate the python debugger, visit this.\nNote: Since Python 3.7, instead of import pdb; pdb.set_trace(), you can simply add a breakpoint() function call whenever you want the program to stop execution.\nThe walrus operator (:=) Python 3.8 introduced assignment expressions through the use of a new operator, called the walrus operator (if you look sideways, the operator looks like a walrus).\nAssignment expressions allow you to assign and return a value in the same expression, similar to how things work in a language like C.\nwhile (x := int(input(\u0026#34;What is your age?\u0026#34;))) \u0026gt; 18: print(\u0026#34;You are a grown-up!\u0026#34;) else: print(\u0026#34;You are a kid!\u0026#34;) It can be useful, for example in list comprehensions:\nlst = [y for x in \u0026#39;abcd\u0026#39; if (y := f(x)) is not None] # instead of having to compute f(x) twice lst = [f(x) for x in \u0026#39;abcd\u0026#39; if f(x) is not None] Arguably, the operator is a little confusing, and most of the times not needed and can be replaced with more expressive syntax. There are good arguments to why this operator is not needed in Python here.\nNonetheless, Python 3.8 adopted assignment expressions through the use of the walrus operator :=.\nFor more info on the walrus operator and assignment expressions, see PEP 572.\nFormatted strings (f-strings) Formatted string literals (or f-strings) are a construct added in Python 3.6 and have since become very popular due to the speed (see tip 7) and simplicity.\nSome examples:\nnumber = 3.1415 width = 10 precision = 3 print(f\u0026#39;This is {number:{width}.{precision}}\u0026#39;) # prints # This is 3.14 There are three conversion fields; r, s and a. What they do is call the functions repr(), str() and ascii() respectively on the formatted parameter.\nname = \u0026#39;Alex\u0026#39; print(f\u0026#39;My name is {name!r}\u0026#39;) # prints # My name is \u0026#39;Alex\u0026#39; Since Python 3.8, there is a new specifier (=), that expands to the representation of the expression, making it useful for debugging and self-documenting.\nimport datetime name = \u0026#39;Alex\u0026#39; print(f\u0026#39;{name=}\u0026#39;) # prints name=\u0026#39;Alex\u0026#39; now = datetime.date.today() print(f\u0026#39;{now=}\u0026#39;) # prints now=datetime.date(2020, 2, 14) # f-string specifiers still work print(f\u0026#39;{now=!s}\u0026#39;) # prints now=2020-02-14 number = 3.1415 # Careful when adding format specifiers print(f\u0026#39;{number + 1=:10.2f}\u0026#39;) # prints number + 1= 4.14 print(f\u0026#39;{number + 1=:10.2}\u0026#39;) # prints number + 1= 4.1 More info about f-strings in the docs.\nNote: Formatted strings have a \u0026lsquo;formatting\u0026rsquo; option similar to how printf() works in other languages. Python\u0026rsquo;s implementation of formatted print is a little more advanced though.\nDecorators and the functools.wraps helper function Say you have a function:\ndef sum(a, b): \u0026#34;\u0026#34;\u0026#34;This function adds 2 numbers and returns the result.\u0026#34;\u0026#34;\u0026#34; return a + b But now we want to log this function call. Of course, adding this code in the implementation of the function is bad, since we\u0026rsquo;re polluting the function code. Even more so, what if we want to log another 10 function calls?\nFor this purpose, we can easily use a decorator.\ndef log(func): def wrapper(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34;Wrapper function.\u0026#34;\u0026#34;\u0026#34; # do some logging return func(*args, **kwargs) return wrapper Now it is easy to use the decorator on whatever function we want to log.\n@log def sum(a, b): \u0026#34;\u0026#34;\u0026#34;This function adds 2 numbers and returns the result.\u0026#34;\u0026#34;\u0026#34; return a + b print(sum(4, 5)) # this function call will be logged However, one problem arises when decorating a function like this. If we now try to get the doc or the function name, we notice that we get the information of the wrapper function, rather than that of our initial function:\nprint(sum.__doc__) # prints \u0026#34;Wrapper function\u0026#34; print(sum.__name__) # prints \u0026#34;wrapper\u0026#34; This is not ideal, considering that debuggers and other introspection tools use this. To fix this, we can use functools.wraps.\nimport functools def log(func): @functools.wraps(func) def wrapper(*args, **kwargs): \u0026#34;\u0026#34;\u0026#34;Wrapper function.\u0026#34;\u0026#34;\u0026#34; # do some logging return func(*args, **kwargs) return wrapper @log def sum(a, b): \u0026#34;\u0026#34;\u0026#34;This function adds 2 numbers and returns the result.\u0026#34;\u0026#34;\u0026#34; return a + b print(sum.__doc__) # prints \u0026#34;This function adds 2 numbers and returns the result.\u0026#34; print(sum.__name__) # prints \u0026#34;sum\u0026#34; Static function variables Python does not have a built-in method to have a static variable in a function like C or other languages do through the use of the static keyword.\nInstead, we can use the fact that functions are first-class objects in Python and we can assign variables to them.\ndef func(): try: func.number_of_times_called += 1 except: func.number_of_times_called = 1 # some really interesting code This is better than having a global variable pollute the global namespace, and is better than having a decorator that does that (because the decorator runs when the python module is loaded even if the function might never be called, so the decorator will still do some work and initialize some value; instead here the code runs only when the function is called, if ever).\n","permalink":"https://shenlong616.github.io/posts/github/python-3-tricks-by-alexghergh/","summary":"Disclaimer: This list is meant as a comprehension of cool tips and tricks I found on the internet. If you would like to contribute, or notice any mistakes or typos, please contact me or upload a pull request. If you think any material here can be considered personal property let me know and I will take it down.\nLooping over a range of numbers Using range() is better than using a list (ex.","title":"Python 3 tricks by alexghergh"},{"content":"A collection of JavaScript tips and tricks.\nNo particular order or path.\nI add things as I discover them.\nCheck Codinghub.tips, too, for JavaScript tips. It\u0026rsquo;s not my project but I like it. üî•\nOptional chaining \u0026ldquo;Shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing.\u0026rdquo; (Source: MDN)\nconst person = { name: \u0026#34;Catalin Pit\u0026#34;, socialMedia: { twitter: \u0026#34;@catalinmpit\u0026#34;, instagram: \u0026#34;@catalinmpit\u0026#34;, linkedin: \u0026#34;@catalinmpit\u0026#34;, }, experience: \u0026#34;Junior\u0026#34;, employed: true, }; if (person \u0026amp;\u0026amp; person.socialMedia \u0026amp;\u0026amp; person.socialMedia.twitter) { console.log(person.socialMedia.twitter); } // The same thing with optional chaining if (person?.socialMedia?.twitter) { console.log(person.socialMedia.twitter); // outputs @catalinmpit } // or console.log(person?.socialMedia?.twitter); Nullish coalescing operator \u0026ldquo;The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\u0026rdquo; (Source: MDN)\nconst person = { name: \u0026#34;Catalin Pit\u0026#34;, socialMedia: { twitter: \u0026#34;@catalinmpit\u0026#34;, instagram: \u0026#34;@catalinmpit\u0026#34;, linkedin: \u0026#34;@catalinmpit\u0026#34;, }, experience: \u0026#34;Junior\u0026#34;, employed: true, }; console.log(person.socialMedia.facebook ?? \u0026#34;No Facebook account found!\u0026#34;); // Outputs \u0026#39;No Facebook account found!\u0026#39; console.log(person.socialMedia.instagram ?? \u0026#34;No Instagram account found!\u0026#34;); // Outputs \u0026#39;@catalinmpit\u0026#39; /// Another example /// let name; console.log(name ?? \u0026#34;No name assigned\u0026#34;); // Outputs \u0026#39;No name assigned\u0026#39; let name = \u0026#34;Catalin Pit\u0026#34;; console.log(name ?? \u0026#34;No name assigned\u0026#34;); // Outputs \u0026#39;Catalin Pit\u0026#39; Merge objects together - spread operator \u0026ldquo;Shallow-cloning (excluding prototype) or merging of objects is now possible using a shorter syntax than Object.assign().\u0026rdquo; (Source: MDN)\nconst user = { name: \u0026#34;Catalin Pit\u0026#34;, role: \u0026#34;Junior Fullstack Developer\u0026#34;, age: 23, }; const uses = { machine: \u0026#34;MacBook Pro 15 inch\u0026#34;, editor: \u0026#34;VS Code\u0026#34;, language: \u0026#34;JavaScript\u0026#34;, phone: \u0026#34;Samsung Note 10\u0026#34;, }; const summary = { ...user, ...uses }; console.log(summary); // Outputs // const summary = { name: \u0026#34;Catalin Pit\u0026#34;, role: \u0026#34;Junior Fullstack Developer\u0026#34;, age: 23, machine: \u0026#34;MacBook Pro 15 inch\u0026#34;, editor: \u0026#34;VS Code\u0026#34;, language: \u0026#34;JavaScript\u0026#34;, phone: \u0026#34;Samsung Note 10\u0026#34;, }; Two ways to convert a string to a character array These are two quick ways to convert your string to an array of characters.\nconst firstName = \u0026#34;Catalin\u0026#34;; const firstNameArr1 = firstName.split(\u0026#34;\u0026#34;); console.log(firstNameArr1); const firstNameArr2 = [...firstName]; console.log(firstNameArr2); Default parameters \u0026ldquo;Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.\u0026rdquo; (Source: MDN)\nfunction add(x = 1, y = 2) { return x + y; } add(); // Returns 3 add(10); // Returns 12 add(5, 5); // Returns 10 Filter unique values / remove duplicate values \u0026ldquo;Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur once; it is unique in the Set\u0026rsquo;s collection.\u0026rdquo; (Source: MDN)\n// Strings const names = [ \u0026#34;Catalin\u0026#34;, \u0026#34;Catalin\u0026#34;, \u0026#34;Pit\u0026#34;, \u0026#34;Pit\u0026#34;, \u0026#34;Tom\u0026#34;, \u0026#34;Tom\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;John\u0026#34;, ]; const uniqueNames = [...new Set(names)]; console.log(uniqueNames); // Outputs [\u0026#39;Catalin\u0026#39;, \u0026#39;Pit\u0026#39;, \u0026#39;Tom\u0026#39;, \u0026#39;John\u0026#39;] // Numbers const examScores = [ 50, 75, 100, 99, 95, 67, 43, 43, 43, 100, 99, 50, 50, 50, 50, ]; const uniqueExamScores = [...new Set(examScores)]; console.log(uniqueExamScores); // Outputs [50, 75, 100, 99, 95, 67, 43]; Filter out falsy values Remove falsy values such as null, undefined, 0, boolean and so on, from an array.\nconst myArray = [ \u0026#34;Catalin\u0026#34;, 1, \u0026#34;Macbook\u0026#34;, false, true, \u0026#34;Car\u0026#34;, \u0026#34;Peace\u0026#34;, 191, false, ]; const filteredArray = myArray.filter(Boolean); console.log(filteredArray); // Returns [\u0026#34;Catalin\u0026#34;, 1, \u0026#34;Macbook\u0026#34;, true, \u0026#34;Car\u0026#34;, \u0026#34;Peace\u0026#34;, 191] Required parameters Default parameters allows us to require an argument to be passed to the function.\nWe can create a function which throws an error and assign it as default value for required parameters.\nconst required = () =\u0026gt; { throw new TypeError(\u0026#34;You did not pass the required argument!\u0026#34;); }; const greet = (name = required()) =\u0026gt; console.log(`Hello ${name}!`); greet(); // Returns \u0026#34;Uncaught TypeError: You did not pass the required argument!\u0026#34; greet(\u0026#34;Catalin Pit\u0026#34;); // Returns \u0026#34;Hello Catalin Pit!\u0026#34; Pass an empty parameter With the help of the spread syntax, we can now pass an empty parameter to a function.\n\u0026ldquo;Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.\u0026rdquo; (Source: MDN)\nfunction greet(fullName, instagramHandle, twitterHandle) { let message = `Hello, my name is ${fullName}.`; if (instagramHandle) { message += ` My Instagram handle is ${instagramHandle}.`; } if (twitterHandle) { message += ` My Twitter handle is ${twitterHandle}.`; } return message; } // Returns \u0026#34;Hello, my name is Catalin Pit.\u0026#34; console.log(greet(\u0026#34;Catalin Pit\u0026#34;)); // Returns \u0026#34;Hello, my name is Catalin Pit. My Instagram handle is @cpit. My Twitter handle is @catapit.\u0026#34; console.log(greet(\u0026#34;Catalin Pit\u0026#34;, \u0026#34;@cpit\u0026#34;, \u0026#34;@catapit\u0026#34;)); // Returns \u0026#34;Hello, my name is Catalin Pit. My Twitter handle is @cpit.\u0026#34; greet(...[\u0026#34;Catalin Pit\u0026#34;, , \u0026#34;@cpit\u0026#34;]); // Returns \u0026#34;Hello, my name is Catalin Pit. My Instagram handle is @catapit.\u0026#34; greet(...[\u0026#34;Catalin Pit\u0026#34;, \u0026#34;@catapit\u0026#34;]); Accept any number of arguments in a function We are making use of the spread operator again to accept any number of arguments in a function.\nfunction accumulator(...args) { let acc = 0; for (let val of args) { acc += val; } return acc; } accumulator(); // Outputs 0 accumulator(5); // Outputs 5 accumulator(1, 5); // Outputs 6 accumulator(5, 9, 3); // Outputs 17 accumulator(1, 9, 2, 8); // Outputs 20 accumulator(8, 1, 9, 2, 1000); // Outputs 1020 Check if every item from an array passes a test condition \u0026ldquo;The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.\u0026rdquo; (Source: MDN)\nlet closeOffice = [\u0026#34;false\u0026#34;, \u0026#34;true\u0026#34;, \u0026#34;false\u0026#34;, \u0026#34;true\u0026#34;]; let closeOffice2 = [\u0026#34;true\u0026#34;, \u0026#34;true\u0026#34;, \u0026#34;true\u0026#34;, \u0026#34;true\u0026#34;]; let closeOffice3 = [\u0026#34;false\u0026#34;, \u0026#34;false\u0026#34;, \u0026#34;false\u0026#34;, \u0026#34;false\u0026#34;]; function doYouWorkFromHome(answer) { return answer == \u0026#34;true\u0026#34;; } closeOffice.every(doYouWorkFromHome); // Returns false - We don\u0026#39;t close the office closeOffice2.every(doYouWorkFromHome); // Returns true - We close the office closeOffice3.every(doYouWorkFromHome); // Returns false - We don\u0026#39;t close the office Check if some items from an array pass a test condition \u0026ldquo;The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.\u0026rdquo; (Source: MDN)\nlet devTeam = [\u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;senior\u0026#34;, \u0026#34;senior\u0026#34;]; let devTeam1 = [\u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;]; let devTeam2 = [\u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;senior\u0026#34;, \u0026#34;junior\u0026#34;]; function proceedWithProject(answer) { return answer == \u0026#34;senior\u0026#34;; } devTeam.some(proceedWithProject); // Returns true - We can proceed with the project devTeam1.some(proceedWithProject); // Returns false - We cannot proceed with the project devTeam2.some(proceedWithProject); // Returns true - We can proceed with the project ","permalink":"https://shenlong616.github.io/posts/github/javascript-tips-and-tricks-by-catalinpit/","summary":"A collection of JavaScript tips and tricks.\nNo particular order or path.\nI add things as I discover them.\nCheck Codinghub.tips, too, for JavaScript tips. It\u0026rsquo;s not my project but I like it. üî•\nOptional chaining \u0026ldquo;Shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing.\u0026rdquo; (Source: MDN)\nconst person = { name: \u0026#34;Catalin Pit\u0026#34;, socialMedia: { twitter: \u0026#34;@catalinmpit\u0026#34;, instagram: \u0026#34;@catalinmpit\u0026#34;, linkedin: \u0026#34;@catalinmpit\u0026#34;, }, experience: \u0026#34;Junior\u0026#34;, employed: true, }; if (person \u0026amp;\u0026amp; person.","title":"JAVASCRIPT TIPS \u0026 TRICKS by catalinpit"}]