[{"content":"def myfunc(x, y, z): print(x, y, z) tuple_vec = (1, 0, 1) dict_vec = {\u0026#34;x\u0026#34;: 1, \u0026#34;y\u0026#34;: 0, \u0026#34;z\u0026#34;: 1} myfunc(*tuple_vec) # 1 0 1 myfunc(**dict_vec) # 1 0 1 ","permalink":"https://shenlong616.github.io/posts/function-argument-unpacking-in-python/","summary":"def myfunc(x, y, z): print(x, y, z) tuple_vec = (1, 0, 1) dict_vec = {\u0026#34;x\u0026#34;: 1, \u0026#34;y\u0026#34;: 0, \u0026#34;z\u0026#34;: 1} myfunc(*tuple_vec) # 1 0 1 myfunc(**dict_vec) # 1 0 1 ","title":"Function argument unpacking in Python"},{"content":"Python 2.x x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = dict(x, **y) print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} Python 3.5+ x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = {**x, **y} print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} ","permalink":"https://shenlong616.github.io/posts/how-to-merge-two-dictionaries-in-python/","summary":"Python 2.x x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = dict(x, **y) print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} Python 3.5+ x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = {**x, **y} print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} ","title":"How to merge two dictionaries in Python"},{"content":"using the ** syntax def process_data(a, b, c, d): print(a, b, c, d) x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;c\u0026#34;: 3, \u0026#34;d\u0026#34;: 4} process_data(**x, **y) # 1 2 3 4 process_data(**x, c=23, d=42) # 1 2 23 42 ","permalink":"https://shenlong616.github.io/posts/multiple-sets-of-kwargs-in-python-3-5/","summary":"using the ** syntax def process_data(a, b, c, d): print(a, b, c, d) x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;c\u0026#34;: 3, \u0026#34;d\u0026#34;: 4} process_data(**x, **y) # 1 2 3 4 process_data(**x, c=23, d=42) # 1 2 23 42 ","title":"Multiple sets of kwargs in Python 3.5+"},{"content":"\rDescription üòã This is a collection of JavaScript tips and tricks. you can refer to it and apply it to make your code more concise. But don\u0026rsquo;t overdo it, it can make your code difficult to read and maintain. Hope everyone contributes, thanks.\nTable Of Content üìÉ Description Table Of Content Array Object Destructuring Operator Comparison Others Array 1. Generate an Array\rCreate an empty array of length n\nvar arr = new Array(3); // result: arr = [undefined, undefined, undefined] Create an empty array of length n \u0026amp; fill value x\nvar arr = [...Array(3).fill(1)]; var arr2 = [...Array(5).fill(1, 0, 3)]; /* result: arr = [1, 1, 1] arr2 = [1, 1, 1, undefined, undefined] */ Create an array containing 0...n\nvar arr = [...Array.keys(5)]; // result: arr = [0, 1, 2, 3, 4] Create an array containing 1...n\nvar arr = []; for (let i = 0; arr.push(++i) \u0026lt; 4; ); var arr2 = Array.from({ length: 4 }, (_, i) =\u0026gt; i + 1); var arr3 = Array.from({ length: 4 }, (_, i) =\u0026gt; i * 2); var arr4 = Array.from({ length: 4 }, () =\u0026gt; Math.random()); /* result: arr = [1, 2, 3, 4] arr2 = [1, 2, 3, 4] arr3 = [0, 2, 4, 6] arr4 = [0.211, 0.5123, 0.612, 0.8921] */ 2. Extract Unique Values of Array\rvar arr = [1, 2, 2, 3, 5, 5, 4]; var newArr = [...new Set(arr)]; // result: newArr = [1, 2, 3, 5, 4] 3. Shuffle Elements from Array\rvar arr = [1, 2, 3, 4, 5]; var newArr = arr.sort(() =\u0026gt; Math.random() - 0.5); // result: newArr = [3, 1, 2, 4, 5] 4. Flatten a Multidimensional Array\rvar arr = [1, [2, 3], [4, 5, 6], 7]; var newArr = [].concat(...arr); // result: [1, 2, 3, 4, 5, 6, 7] 5. Resize an Array\rThe length array isn\u0026rsquo;t a read only property.\nvar arr = [1, 2, 3, 4, 5]; arr.length = 2; var arr2 = [1, 2, 3, 4, 5]; arr2.length = 0; var arr3 = [1, 2, 3, 4, 5]; arr3.length = 7; /* result: arr = [1, 2] arr2 = [] arr3 = [1, 2, 3, 4, 5, undefined, undefined] */ 6. Random an Item in Array\rvar arr = [2, 4, 5]; var item = arr[Math.floor(Math.random() * arr.length)]; 7. Remove an Item from Array\rvar arr = [1, 2, 3]; // Not Recommended delete arr[1]; // arr = [1, undefined, 3], length = 3 // Recommended arr.splice(1, 1); // arr = [1, 3], length = 2 Object 1. Dynamic Property Name\rconst dynamic = \u0026#34;age\u0026#34;, dynamicValue = 18; var obj = { name: \u0026#34;Dyno\u0026#34;, [dynamic]: dynamicValue, }; // result: obj = { name: \u0026#39;Dyno\u0026#39;, age: 18 } 2. Clone an Object\rShallow copy (Not Recommended)\nUse the = operator to copy object 1 into object 2. These 2 objects point to the same memory area (reference). Therefore, if we change object 1, object 2 will also change.\nvar obj1 = { a: 1, b: 2 }; var obj2 = obj1; // obj2 = { a: 1, b: 2 } obj1.a = 3; // change value of a property console.log(obj1); // { a: 3, b: 2 } console.log(obj2); // { a: 3, b: 2 } =\u0026gt; property a of obj2 changed üôÇ‚ùó console.log(obj3); // { a: 3, b: 2 } =\u0026gt; property a of obj2 changed üôÇ‚ùó Deep copy\nWay 1: Use Spread operator {...} or Object.assign() to fix \u0026ldquo;Shallow copy\u0026rdquo;. Issue: Nested objects still have shallow copy problem.\nvar obj1 = { a: 1, b: 2, c: { nested: 3 } }; var obj2 = { ...obj1 }; // obj2 = { a: 1, b: 2, c: { nested: 3 } } var obj3 = Object.assign({}, obj1); // obj3 = { a: 1, b: 2, c: { nested: 3 } } obj1.b = 3; obj1.c.nested = 4; console.log(obj1); // { a: 1, b: 3, c: { nested: 4 } } console.log(obj2); // { a: 1, b: 2, c: { nested: 4 } } üôÇ console.log(obj3); // { a: 1, b: 2, c: { nested: 4 } } üôÇ Way 2 (Recommended): Use JSON.stringify() \u0026amp; JSON.parse() to solve the above problems.\nvar obj1 = { a: 1, b: 2, c: { nested: 3 } }; var obj2 = JSON.parse(JSON.stringify(obj1)); // obj2 = { a: 1, b: 2, c: { nested: 3 } } obj1.b = 3; obj1.c.nested = 4; console.log(obj1); // { a: 1, b: 3, c: { nested: 4 } } console.log(obj2); // { a: 1, b: 2, c: { nested: 3 } } üòâüòò Destructuring (ES6+) 1. With Array\rvar [a, b] = [1, 2]; // same: var a = 1, b = 2; var [a, b, c] = [1, 2, 3, 4, 5]; // same: var a = 1, b = 2, c = 3; var [a, , c] = [1, 2, 3, 4, 5]; // same: var a = 1, c = 3 // ignore values var [a, b, ...rest] = [1, 2, 3, 4, 5]; // same: var a = 1, b = 2, rest = [4, 5] // use \u0026#34;rest params ES6\u0026#34; var [a, b, c] = [1, 2]; // same: var a = 1, b = 2, c = undefined; var [a, b = 0, c = 0] = [1, 2]; // same: var a = 1, b = 2, c = 0; // declare and set default value var [a, b, [c, d], e] = [1, 2, [3, 4], 5]; // same: var a = 1, b = 2, c = 3, d = 4, e = 5 // nested array destructuring 2. With Object\rvar person = { name: \u0026#34;Dyno\u0026#34;, age: 18 }; var { name, age } = person; // same: var name = person.name, age = person.age; var { name = \u0026#34;Anonymous\u0026#34;, age = 1, address = \u0026#34;HCM city\u0026#34; } = person; // same: var name = person.name, age = person.age, address: \u0026#39;HCM city\u0026#39; // declare and set default value var { name: personName, age: personAge } = person; // same: var personName = person.name, personAge = person.age // decleare and change variable name console.log({ name, age }); // same: console.log({ name: name, age: age }) var person = { name: \u0026#34;Dyno\u0026#34;, age: 18, infor: { address: \u0026#34;HCM\u0026#34;, phone: \u0026#34;123\u0026#34; } }; var { name, age, infor: { address, phone }, } = person; // same: name = person.name, age = person.agem, address = person.infor.address, phone = person.infor.phone // nested object destructuring Operator 1. Optional chaining (?.)\r\u0026ldquo;The optional chaining operator ?. enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.\u0026rdquo; MDN\nconst person = { name: \u0026#34;Dyno\u0026#34;, age: 18, sayHello: function () { console.log(\u0026#34;Hello\u0026#34;); }, }; // ‚ùó Wrong way console.log(person.infor.address); // ‚ùå Uncaught TypeError: Cannot read property \u0026#39;address\u0026#39; of undefined // ‚úÖ Right way (check condition) if (person.infor) console.log(person.infor.address); // Not log // ‚úÖ Right way (use ?.) console.log(person.infor?.address); // undefined // Optional chaining with function calls console.log(person.sayHello?.()); // Hello console.log(person.callPhone?.()); // undefined // A chain Optional chaining console.log(person.infor?.address?.province?.name); // undefined // syntax obj.val?.prop; obj.val?.[expr]; obj.arr?.[index]; obj.func?.(args); 2. Nullish coalescing operator (??)\r\u0026ldquo;The nullish coalescing operator ?? is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\u0026rdquo; MDN\nvar a = null ?? \u0026#34;Default\u0026#34;; // a = \u0026#39;Default\u0026#39; var a = false ?? \u0026#34;Default\u0026#34;; // a = false 3. Logical OR (||)\rvar a = 1, b = 2; if (a \u0026gt; 2 || b \u0026gt; 1) console.log(\u0026#34;Dyno\u0026#34;); // result: Dyno The OR operator || is a logical operator that returns its right-hand side operand when its left-hand side operand is falsy, and otherwise returns its left-hand side operand.\nvar a = null || \u0026#34;Default\u0026#34;; // a = \u0026#39;Default\u0026#39; var a = false || \u0026#34;Default\u0026#34;; // a = \u0026#39;Default\u0026#39; 4. Logical AND (\u0026\u0026)\rlet a = true, b = true, c = false; if (a \u0026amp;\u0026amp; b) console.log(\u0026#34;Hello\u0026#34;); // Hello (a, b = true) if (a \u0026amp;\u0026amp; c) console.log(\u0026#34;Dyno\u0026#34;); // not log (c = false) // other usage function sayHi() { console.log(\u0026#34;Hi\u0026#34;); } a \u0026amp;\u0026amp; sayHi(); // Hi c \u0026amp;\u0026amp; sayHi(); // false 5. Double tilde operator (~~)\rlet num = 2.6; console.log(~~num); // 2 = Math.floor(2) 6. Logical Assignment Operator ES12 (||=, ??=) a ||= b; // same a = a || b; a ??= b; // same a = a ?? b; 7. Numeric separator ES12 (_)\rconst n = 1_000_000_000; // same: n = 1000000000; Comparison 1. Use === instead of ==\rThe operator == (!=) will automatically cast if 2 variables are not of the same type, then compare. The === (!==) operator compares the value and the type =\u0026gt; === faster than ==.\n1 == \u0026#39;1\u0026#39; // true 1 === \u0026#39;1\u0026#39; // false 0 == false // true 0 === false // false \u0026#39;\u0026#39; == false // true \u0026#39;\u0026#39; === false // false [] == 0 // true [] === 0 // false 2. The difference between isNaN() and Number.isNaN() The isNaN() method (is Not a Number ?) use to check if a variable is a Number. The Number.isNaN() (is NaN ?) method use to check if a variable is NaN\nisNaN(\u0026#34;string\u0026#34;); // true, \u0026#39;string\u0026#39; is not Number isNaN([]); // true, [] is not Number isNaN(0 / 0); // true, 0/0 is not Number isNaN(1); // false, 1 is Number Number.isNaN(\u0026#34;string\u0026#34;); // false, \u0026#39;string\u0026#39; is not NaN Number.isNaN([]); // false, [] is not NaN Number.isNaN(0 / 0); // true, 0/0 is NaN Number.isNaN(NaN); // true Others 1. Swapping use Destructuring\rlet a = 1, b = 2; [a, b] = [b, a]; // result: a = 2, b = 1; 2. Create function that returns only 1 object\rconst fn = () =\u0026gt; ({ obj: 1 }); /* same: const fn = () =\u0026gt; { return { obj: 1 } } */ 3. Immediately Invoked Function Expression (IIFE)\rThe function will execute automatically when you create it.\n// Way 1: var res = ()(function(){ // do something... console.log(\u0026#34;Hello\u0026#34;); return true; })(); // result: Hello, res = true; // Way 2: var res = (() =\u0026gt; { console.log(\u0026#39;Hello\u0026#39;); return true; })(); // result: Hello, res = true; 4. typeof vs instanceof typeof: return a string that represents the primitive type of a variable.\ninstanceof: check in all the prototypes chain the constructor it returns true if it‚Äôs found and false if not.\nvar arr = [1, 2, 3]; console.log(typeof arr); // \u0026#34;object\u0026#34; console.log(arr instanceof Array); // true typeof 1; // \u0026#34;number\u0026#34; typeof NaN; // \u0026#34;number\u0026#34; typeof \u0026#34;str\u0026#34;; // \u0026#34;string\u0026#34; typeof true; // \u0026#34;boolean\u0026#34; typeof {}; // \u0026#34;object\u0026#34; typeof []; // \u0026#34;object\u0026#34; typeof null; // \u0026#34;object\u0026#34; typeof undefined; // \u0026#34;undefined\u0026#34; typeof function name() {}; // \u0026#34;function\u0026#34; 5. Falsy\rA Falsy value is a value that is considered false when encountered in a Boolean context . MDN\nComplete list of JavaScript falsy values false, 0, -0, 0n, \u0026quot;\u0026quot;, '', ``, NaN, null, undefined, document.all\nFalsy value bypass the if block. Ex:\nif (null) { } else { console.log(\u0026#34;Falsy\u0026#34;); } const a = undefined || \u0026#34;Falsy\u0026#34;; // result: Falsy, a = \u0026#34;Falsy\u0026#34; Filter out Falsy values\nconst arr = [1, \u0026#34;Dyno\u0026#34;, false, 0, true, NaN, 2000]; var filteredArr = arr.filter(Boolean); // result: filteredArr = [1, \u0026#34;Dyno\u0026#34;, true, 2000] 6. Template string `${}`\rconst name = \u0026#34;Dyno\u0026#34;; const hello1 = \u0026#34;Hello \u0026#34; + name + \u0026#34;, how are you?\u0026#34;; const hello2 = `Hello ${name}, how are you?`; // template string. 7. Rounding number to n decimal place\rvar num = 25.0420001; console.log(typeof num); // \u0026#34;number\u0026#34; num = num.toFixed(2); // num = \u0026#34;25.04\u0026#34; console.log(typeof num); // ‚ùó \u0026#34;string\u0026#34; 8. Check variable - convert a variable to Boolean (!! operator)\rconsole.log(!!null); // false console.log(!!undefined); // false console.log(!!1); // true ","permalink":"https://shenlong616.github.io/posts/javascript-tips-tricks-by-tuannguyen2504/","summary":"Description üòã This is a collection of JavaScript tips and tricks. you can refer to it and apply it to make your code more concise. But don\u0026rsquo;t overdo it, it can make your code difficult to read and maintain. Hope everyone contributes, thanks.\nTable Of Content üìÉ Description Table Of Content Array Object Destructuring Operator Comparison Others Array 1. Generate an Array\rCreate an empty array of length n","title":"JavaScript tips \u0026 tricks by TuanNguyen2504"},{"content":"A collection of JavaScript tips and tricks.\nNo particular order or path.\nI add things as I discover them.\nCheck Codinghub.tips, too, for JavaScript tips. It\u0026rsquo;s not my project but I like it. üî•\nOPTIONAL CHAINING \u0026ldquo;Shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing.\u0026rdquo; (Source: MDN)\nconst person = { name: \u0026#34;Catalin Pit\u0026#34;, socialMedia: { twitter: \u0026#34;@catalinmpit\u0026#34;, instagram: \u0026#34;@catalinmpit\u0026#34;, linkedin: \u0026#34;@catalinmpit\u0026#34;, }, experience: \u0026#34;Junior\u0026#34;, employed: true, }; if (person \u0026amp;\u0026amp; person.socialMedia \u0026amp;\u0026amp; person.socialMedia.twitter) { console.log(person.socialMedia.twitter); } // The same thing with optional chaining if (person?.socialMedia?.twitter) { console.log(person.socialMedia.twitter); // outputs @catalinmpit } // or console.log(person?.socialMedia?.twitter); NULLISH COALESCING OPERATOR \u0026ldquo;The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\u0026rdquo; (Source: MDN)\nconst person = { name: \u0026#34;Catalin Pit\u0026#34;, socialMedia: { twitter: \u0026#34;@catalinmpit\u0026#34;, instagram: \u0026#34;@catalinmpit\u0026#34;, linkedin: \u0026#34;@catalinmpit\u0026#34;, }, experience: \u0026#34;Junior\u0026#34;, employed: true, }; console.log(person.socialMedia.facebook ?? \u0026#34;No Facebook account found!\u0026#34;); // Outputs \u0026#39;No Facebook account found!\u0026#39; console.log(person.socialMedia.instagram ?? \u0026#34;No Instagram account found!\u0026#34;); // Outputs \u0026#39;@catalinmpit\u0026#39; /// Another example /// let name; console.log(name ?? \u0026#34;No name assigned\u0026#34;); // Outputs \u0026#39;No name assigned\u0026#39; let name = \u0026#34;Catalin Pit\u0026#34;; console.log(name ?? \u0026#34;No name assigned\u0026#34;); // Outputs \u0026#39;Catalin Pit\u0026#39; MERGE OBJECTS TOGETHER - SPREAD OPERATOR \u0026ldquo;Shallow-cloning (excluding prototype) or merging of objects is now possible using a shorter syntax than Object.assign().\u0026rdquo; (Source: MDN)\nconst user = { name: \u0026#34;Catalin Pit\u0026#34;, role: \u0026#34;Junior Fullstack Developer\u0026#34;, age: 23, }; const uses = { machine: \u0026#34;MacBook Pro 15 inch\u0026#34;, editor: \u0026#34;VS Code\u0026#34;, language: \u0026#34;JavaScript\u0026#34;, phone: \u0026#34;Samsung Note 10\u0026#34;, }; const summary = { ...user, ...uses }; console.log(summary); // Outputs // const summary = { name: \u0026#34;Catalin Pit\u0026#34;, role: \u0026#34;Junior Fullstack Developer\u0026#34;, age: 23, machine: \u0026#34;MacBook Pro 15 inch\u0026#34;, editor: \u0026#34;VS Code\u0026#34;, language: \u0026#34;JavaScript\u0026#34;, phone: \u0026#34;Samsung Note 10\u0026#34;, }; TWO WAYS TO CONVERT A STRING TO A CHARACTER ARRAY These are two quick ways to convert your string to an array of characters.\nconst firstName = \u0026#34;Catalin\u0026#34;; const firstNameArr1 = firstName.split(\u0026#34;\u0026#34;); console.log(firstNameArr1); const firstNameArr2 = [...firstName]; console.log(firstNameArr2); DEFAULT PARAMETERS \u0026ldquo;Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.\u0026rdquo; (Source: MDN)\nfunction add(x = 1, y = 2) { return x + y; } add(); // Returns 3 add(10); // Returns 12 add(5, 5); // Returns 10 FILTER UNIQUE VALUES / REMOVE DUPLICATE VALUES \u0026ldquo;Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur once; it is unique in the Set\u0026rsquo;s collection.\u0026rdquo; (Source: MDN)\n// Strings const names = [ \u0026#34;Catalin\u0026#34;, \u0026#34;Catalin\u0026#34;, \u0026#34;Pit\u0026#34;, \u0026#34;Pit\u0026#34;, \u0026#34;Tom\u0026#34;, \u0026#34;Tom\u0026#34;, \u0026#34;John\u0026#34;, \u0026#34;John\u0026#34;, ]; const uniqueNames = [...new Set(names)]; console.log(uniqueNames); // Outputs [\u0026#39;Catalin\u0026#39;, \u0026#39;Pit\u0026#39;, \u0026#39;Tom\u0026#39;, \u0026#39;John\u0026#39;] // Numbers const examScores = [ 50, 75, 100, 99, 95, 67, 43, 43, 43, 100, 99, 50, 50, 50, 50, ]; const uniqueExamScores = [...new Set(examScores)]; console.log(uniqueExamScores); // Outputs [50, 75, 100, 99, 95, 67, 43]; FILTER OUT FALSY VALUES Remove falsy values such as null, undefined, 0, boolean and so on, from an array.\nconst myArray = [ \u0026#34;Catalin\u0026#34;, 1, \u0026#34;Macbook\u0026#34;, false, true, \u0026#34;Car\u0026#34;, \u0026#34;Peace\u0026#34;, 191, false, ]; const filteredArray = myArray.filter(Boolean); console.log(filteredArray); // Returns [\u0026#34;Catalin\u0026#34;, 1, \u0026#34;Macbook\u0026#34;, true, \u0026#34;Car\u0026#34;, \u0026#34;Peace\u0026#34;, 191] REQUIRED PARAMETERS Default parameters allows us to require an argument to be passed to the function.\nWe can create a function which throws an error and assign it as default value for required parameters.\nconst required = () =\u0026gt; { throw new TypeError(\u0026#34;You did not pass the required argument!\u0026#34;); }; const greet = (name = required()) =\u0026gt; console.log(`Hello ${name}!`); greet(); // Returns \u0026#34;Uncaught TypeError: You did not pass the required argument!\u0026#34; greet(\u0026#34;Catalin Pit\u0026#34;); // Returns \u0026#34;Hello Catalin Pit!\u0026#34; PASS AN EMPTY PARAMETER With the help of the spread syntax, we can now pass an empty parameter to a function.\n\u0026ldquo;Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.\u0026rdquo; (Source: MDN)\nfunction greet(fullName, instagramHandle, twitterHandle) { let message = `Hello, my name is ${fullName}.`; if (instagramHandle) { message += ` My Instagram handle is ${instagramHandle}.`; } if (twitterHandle) { message += ` My Twitter handle is ${twitterHandle}.`; } return message; } // Returns \u0026#34;Hello, my name is Catalin Pit.\u0026#34; console.log(greet(\u0026#34;Catalin Pit\u0026#34;)); // Returns \u0026#34;Hello, my name is Catalin Pit. My Instagram handle is @cpit. My Twitter handle is @catapit.\u0026#34; console.log(greet(\u0026#34;Catalin Pit\u0026#34;, \u0026#34;@cpit\u0026#34;, \u0026#34;@catapit\u0026#34;)); // Returns \u0026#34;Hello, my name is Catalin Pit. My Twitter handle is @cpit.\u0026#34; greet(...[\u0026#34;Catalin Pit\u0026#34;, , \u0026#34;@cpit\u0026#34;]); // Returns \u0026#34;Hello, my name is Catalin Pit. My Instagram handle is @catapit.\u0026#34; greet(...[\u0026#34;Catalin Pit\u0026#34;, \u0026#34;@catapit\u0026#34;]); ACCEPT ANY NUMBER OF ARGUMENTS IN A FUNCTION We are making use of the spread operator again to accept any number of arguments in a function.\nfunction accumulator(...args) { let acc = 0; for (let val of args) { acc += val; } return acc; } accumulator(); // Outputs 0 accumulator(5); // Outputs 5 accumulator(1, 5); // Outputs 6 accumulator(5, 9, 3); // Outputs 17 accumulator(1, 9, 2, 8); // Outputs 20 accumulator(8, 1, 9, 2, 1000); // Outputs 1020 CHECK IF EVERY ITEM FROM AN ARRAY PASSES A TEST CONDITION \u0026ldquo;The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.\u0026rdquo; (Source: MDN)\nlet closeOffice = [\u0026#34;false\u0026#34;, \u0026#34;true\u0026#34;, \u0026#34;false\u0026#34;, \u0026#34;true\u0026#34;]; let closeOffice2 = [\u0026#34;true\u0026#34;, \u0026#34;true\u0026#34;, \u0026#34;true\u0026#34;, \u0026#34;true\u0026#34;]; let closeOffice3 = [\u0026#34;false\u0026#34;, \u0026#34;false\u0026#34;, \u0026#34;false\u0026#34;, \u0026#34;false\u0026#34;]; function doYouWorkFromHome(answer) { return answer == \u0026#34;true\u0026#34;; } closeOffice.every(doYouWorkFromHome); // Returns false - We don\u0026#39;t close the office closeOffice2.every(doYouWorkFromHome); // Returns true - We close the office closeOffice3.every(doYouWorkFromHome); // Returns false - We don\u0026#39;t close the office CHECK IF SOME ITEMS FROM AN ARRAY PASS A TEST CONDITION \u0026ldquo;The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.\u0026rdquo; (Source: MDN)\nlet devTeam = [\u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;senior\u0026#34;, \u0026#34;senior\u0026#34;]; let devTeam1 = [\u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;]; let devTeam2 = [\u0026#34;junior\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;middle\u0026#34;, \u0026#34;junior\u0026#34;, \u0026#34;senior\u0026#34;, \u0026#34;junior\u0026#34;]; function proceedWithProject(answer) { return answer == \u0026#34;senior\u0026#34;; } devTeam.some(proceedWithProject); // Returns true - We can proceed with the project devTeam1.some(proceedWithProject); // Returns false - We cannot proceed with the project devTeam2.some(proceedWithProject); // Returns true - We can proceed with the project ","permalink":"https://shenlong616.github.io/posts/javascript-tips-tricks-by-catalinpit/","summary":"A collection of JavaScript tips and tricks.\nNo particular order or path.\nI add things as I discover them.\nCheck Codinghub.tips, too, for JavaScript tips. It\u0026rsquo;s not my project but I like it. üî•\nOPTIONAL CHAINING \u0026ldquo;Shorter and simpler expressions when accessing chained properties when the possibility exists that a reference may be missing.\u0026rdquo; (Source: MDN)\nconst person = { name: \u0026#34;Catalin Pit\u0026#34;, socialMedia: { twitter: \u0026#34;@catalinmpit\u0026#34;, instagram: \u0026#34;@catalinmpit\u0026#34;, linkedin: \u0026#34;@catalinmpit\u0026#34;, }, experience: \u0026#34;Junior\u0026#34;, employed: true, }; if (person \u0026amp;\u0026amp; person.","title":"JAVASCRIPT TIPS \u0026 TRICKS by catalinpit"}]