[{"content":"def myfunc(x, y, z): print(x, y, z) tuple_vec = (1, 0, 1) dict_vec = {\u0026#34;x\u0026#34;: 1, \u0026#34;y\u0026#34;: 0, \u0026#34;z\u0026#34;: 1} myfunc(*tuple_vec) # 1 0 1 myfunc(**dict_vec) # 1 0 1 ","permalink":"https://shenlong616.github.io/posts/function-argument-unpacking-in-python/","summary":"def myfunc(x, y, z): print(x, y, z) tuple_vec = (1, 0, 1) dict_vec = {\u0026#34;x\u0026#34;: 1, \u0026#34;y\u0026#34;: 0, \u0026#34;z\u0026#34;: 1} myfunc(*tuple_vec) # 1 0 1 myfunc(**dict_vec) # 1 0 1 ","title":"Function argument unpacking in Python"},{"content":"Python 2.x x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = dict(x, **y) print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} Python 3.5+ x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = {**x, **y} print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} ","permalink":"https://shenlong616.github.io/posts/how-to-merge-two-dictionaries-in-python/","summary":"Python 2.x x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = dict(x, **y) print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} Python 3.5+ x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;b\u0026#34;: 3, \u0026#34;c\u0026#34;: 4} z = {**x, **y} print(z) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 3, \u0026#39;c\u0026#39;: 4} ","title":"How to merge two dictionaries in Python"},{"content":"using the ** syntax def process_data(a, b, c, d): print(a, b, c, d) x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;c\u0026#34;: 3, \u0026#34;d\u0026#34;: 4} process_data(**x, **y) # 1 2 3 4 process_data(**x, c=23, d=42) # 1 2 23 42 ","permalink":"https://shenlong616.github.io/posts/multiple-sets-of-kwargs-in-python-3-5/","summary":"using the ** syntax def process_data(a, b, c, d): print(a, b, c, d) x = {\u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2} y = {\u0026#34;c\u0026#34;: 3, \u0026#34;d\u0026#34;: 4} process_data(**x, **y) # 1 2 3 4 process_data(**x, c=23, d=42) # 1 2 23 42 ","title":"Multiple sets of kwargs in Python 3.5+"}]